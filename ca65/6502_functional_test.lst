ca65 V2.18 - N/A
Main file   : 6502_functional_test.ca65
Current file: 6502_functional_test.ca65

000000r 1               ;
000000r 1               ; 6 5 0 2   F U N C T I O N A L   T E S T
000000r 1               ;
000000r 1               ; Copyright (C) 2012-2020  Klaus Dormann
000000r 1               ;
000000r 1               ; This program is free software: you can redistribute it and/or modify
000000r 1               ; it under the terms of the GNU General Public License as published by
000000r 1               ; the Free Software Foundation, either version 3 of the License, or
000000r 1               ; (at your option) any later version.
000000r 1               ;
000000r 1               ; This program is distributed in the hope that it will be useful,
000000r 1               ; but WITHOUT ANY WARRANTY; without even the implied warranty of
000000r 1               ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
000000r 1               ; GNU General Public License for more details.
000000r 1               ;
000000r 1               ; You should have received a copy of the GNU General Public License
000000r 1               ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
000000r 1               
000000r 1               
000000r 1               ; This program is designed to test all opcodes of a 6502 emulator using all
000000r 1               ; addressing modes with focus on propper setting of the processor status
000000r 1               ; register bits.
000000r 1               ;
000000r 1               ; version 05-jan-2020
000000r 1               ; contact info at http://2m5.de or email K@2m5.de
000000r 1               ;
000000r 1               ; assembled with CA65, linked with LD65 (cc65.github.io):
000000r 1               ;  ca65 -l 6502_functional_test.lst 6502_functional_test.ca65
000000r 1               ;  ld65 6502_functional_test.o -o 6502_functional_test.bin \
000000r 1               ;   -m 6502_functional_test.map -C example.cfg
000000r 1               ; example linker config (example.cfg):
000000r 1               ;  MEMORY {
000000r 1               ;  RAM: start = $0000, size=$8000, type = rw, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  ROM: start = $8000, size=$7FFA, type = ro, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  ROM_VECTORS: start = $FFFA, size=6, type = ro, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  }
000000r 1               ;  SEGMENTS {
000000r 1               ;  ZEROPAGE: load=RAM, type=rw;
000000r 1               ;  DATA: load=RAM, type=rw, offset=$0200;
000000r 1               ;  CODE: load=RAM, type=rw, offset=$0400;
000000r 1               ;  VECTORS: load=ROM_VECTORS, type=ro;
000000r 1               ;  }
000000r 1               ;
000000r 1               ; No IO - should be run from a monitor with access to registers.
000000r 1               ; To run load intel hex image with a load command, than alter PC to 400 hex
000000r 1               ; (code_segment) and enter a go command.
000000r 1               ; Loop on program counter determines error or successful completion of test.
000000r 1               ; Check listing for relevant traps (jump/branch *).
000000r 1               ; Please note that in early tests some instructions will have to be used before
000000r 1               ; they are actually tested!
000000r 1               ;
000000r 1               ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
000000r 1               ; Tests documented behavior of the original NMOS 6502 only! No unofficial
000000r 1               ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
000000r 1               ; not be tested. Decimal ops will only be tested with valid BCD operands and
000000r 1               ; N V Z flags will be ignored.
000000r 1               ;
000000r 1               ; Debugging hints:
000000r 1               ;     Most of the code is written sequentially. if you hit a trap, check the
000000r 1               ;   immediately preceeding code for the instruction to be tested. Results are
000000r 1               ;   tested first, flags are checked second by pushing them onto the stack and
000000r 1               ;   pulling them to the accumulator after the result was checked. The "real"
000000r 1               ;   flags are no longer valid for the tested instruction at this time!
000000r 1               ;     If the tested instruction was indexed, the relevant index (X or Y) must
000000r 1               ;   also be checked. Opposed to the flags, X and Y registers are still valid.
000000r 1               ;
000000r 1               ; versions:
000000r 1               ;   28-jul-2012  1st version distributed for testing
000000r 1               ;   29-jul-2012  fixed references to location 0, now #0
000000r 1               ;                added license - GPLv3
000000r 1               ;   30-jul-2012  added configuration options
000000r 1               ;   01-aug-2012  added trap macro to allow user to change error handling
000000r 1               ;   01-dec-2012  fixed trap in branch field must be a branch
000000r 1               ;   02-mar-2013  fixed PLA flags not tested
000000r 1               ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
000000r 1               ;                added test sequence check to detect if tests jump their fence
000000r 1               ;   23-jul-2013  added RAM integrity check option
000000r 1               ;   16-aug-2013  added error report to standard output option
000000r 1               ;   13-dec-2014  added binary/decimal opcode table switch test
000000r 1               ;   14-dec-2014  improved relative address test
000000r 1               ;   23-aug-2015  added option to disable self modifying tests
000000r 1               ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
000000r 1               ;                added small branch offset pretest
000000r 1               ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
000000r 1               ;   04-dec-2017  fixed BRK only tested with interrupts enabled
000000r 1               ;                added option to skip the remainder of a failing test
000000r 1               ;                in report.i65
000000r 1               ;   05-jan-2020  fixed shifts not testing zero result and flag when last 1-bit
000000r 1               ;                is shifted out
000000r 1               
000000r 1               ; C O N F I G U R A T I O N
000000r 1               
000000r 1               ;ROM_vectors writable (0=no, 1=yes)
000000r 1               ;if ROM vectors can not be used interrupts will not be trapped
000000r 1               ;as a consequence BRK can not be tested but will be emulated to test RTI
000000r 1               ROM_vectors = 0
000000r 1               
000000r 1               ;load_data_direct (0=move from code segment, 1=load directly)
000000r 1               ;loading directly is preferred but may not be supported by your platform
000000r 1               ;0 produces only consecutive object code, 1 is not suitable for a binary image
000000r 1               load_data_direct = 1
000000r 1               
000000r 1               ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
000000r 1               ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
000000r 1               ;tested if you allow changing the interrupt status (I_flag = 3)
000000r 1               I_flag = 3
000000r 1               
000000r 1               ;configure memory - try to stay away from memory used by the system
000000r 1               ;zero_page memory start address, $52 (82) consecutive Bytes required
000000r 1               ;                                add 2 if I_flag = 2
000000r 1               zero_page = $a
000000r 1               
000000r 1               ;data_segment memory start address, $7B (123) consecutive Bytes required
000000r 1               ; check that this matches the linker configuration file
000000r 1               data_segment = $200
000000r 1                   .if (data_segment & $ff) <> 0
000000r 1                       .error "low byte of data_segment MUST be $00 !!"
000000r 1                   .endif
000000r 1               
000000r 1               ;code_segment memory start address, 13.1kB of consecutive space required
000000r 1               ;                                   add 2.5 kB if I_flag = 2
000000r 1               ; check that this matches the linker configuration file
000000r 1               code_segment = $1000
000000r 1               
000000r 1               ;self modifying code may be disabled to allow running in ROM
000000r 1               ;0=part of the code is self modifying and must reside in RAM
000000r 1               ;1=tests disabled: branch range
000000r 1               disable_selfmod = 0
000000r 1               
000000r 1               ;report errors through I/O channel (0=use standard self trap loops, 1=include
000000r 1               ;report.i65 as I/O channel, add 3.5 kB)
000000r 1               report = 0
000000r 1               
000000r 1               ;RAM integrity test option. Checks for undesired RAM writes.
000000r 1               ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
000000r 1               ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
000000r 1               ram_top = -1
000000r 1               
000000r 1               ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
000000r 1               ;2=disable including decimal flag in processor status
000000r 1               disable_decimal = 0
000000r 1               
000000r 1               ;macros for error & success traps to allow user modification
000000r 1               ;example:
000000r 1               ;        .macro  trap
000000r 1               ;        jsr my_error_handler
000000r 1               ;        .endmacro
000000r 1               ;        .macro  trap_eq
000000r 1               ;        bne :+
000000r 1               ;        trap           ;failed equal (zero)
000000r 1               ;:
000000r 1               ;        .endmacro
000000r 1               ;
000000r 1               ; my_error_handler should pop the calling address from the stack and report it.
000000r 1               ; putting larger portions of code (more than 3 bytes) inside the trap macro
000000r 1               ; may lead to branch range problems for some tests.
000000r 1                   .if report = 0
000000r 1                       .macro  trap
000000r 1                       jmp *           ;failed anyway
000000r 1                       .endmacro
000000r 1                       .macro  trap_eq
000000r 1                       beq *           ;failed equal (zero)
000000r 1                       .endmacro
000000r 1                       .macro  trap_ne
000000r 1                       bne *           ;failed not equal (non zero)
000000r 1                       .endmacro
000000r 1                       .macro  trap_cs
000000r 1                       bcs *           ;failed carry set
000000r 1                       .endmacro
000000r 1                       .macro  trap_cc
000000r 1                       bcc *           ;failed carry clear
000000r 1                       .endmacro
000000r 1                       .macro  trap_mi
000000r 1                       bmi *           ;failed minus (bit 7 set)
000000r 1                       .endmacro
000000r 1                       .macro  trap_pl
000000r 1                       bpl *           ;failed plus (bit 7 clear)
000000r 1                       .endmacro
000000r 1                       .macro  trap_vs
000000r 1                       bvs *           ;failed overflow set
000000r 1                       .endmacro
000000r 1                       .macro  trap_vc
000000r 1                       bvc *           ;failed overflow clear
000000r 1                       .endmacro
000000r 1               ; please observe that during the test the stack gets invalidated
000000r 1               ; therefore a RTS inside the success macro is not possible
000000r 1                       .macro  success
000000r 1                       jmp *           ;test passed, no errors
000000r 1                       .endmacro
000000r 1                   .endif
000000r 1                   .if report = 1
000000r 1                       .macro  trap
000000r 1                       jsr report_error
000000r 1                       .endmacro
000000r 1                       .macro  trap_eq
000000r 1                       bne :+
000000r 1                       trap           ;failed equal (zero)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_ne
000000r 1                       beq :+
000000r 1                       trap            ;failed not equal (non zero)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_cs
000000r 1                       bcc :+
000000r 1                       trap            ;failed carry set
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_cc
000000r 1                       bcs :+
000000r 1                       trap            ;failed carry clear
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_mi
000000r 1                       bpl :+
000000r 1                       trap            ;failed minus (bit 7 set)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_pl
000000r 1                       bmi :+
000000r 1                       trap            ;failed plus (bit 7 clear)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_vs
000000r 1                       bvc :+
000000r 1                       trap            ;failed overflow set
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_vc
000000r 1                       bvs :+
000000r 1                       trap            ;failed overflow clear
000000r 1               :
000000r 1                       .endmacro
000000r 1               ; please observe that during the test the stack gets invalidated
000000r 1               ; therefore a RTS inside the success macro is not possible
000000r 1                       .macro  success
000000r 1                       jsr report_success
000000r 1                       .endmacro
000000r 1                   .endif
000000r 1               
000000r 1                   .define equ =
000000r 1               
000000r 1               carry   equ %00000001   ;flag bits in status
000000r 1               zero    equ %00000010
000000r 1               intdis  equ %00000100
000000r 1               decmode equ %00001000
000000r 1               break   equ %00010000
000000r 1               reserv  equ %00100000
000000r 1               overfl  equ %01000000
000000r 1               minus   equ %10000000
000000r 1               
000000r 1               fc      equ carry
000000r 1               fz      equ zero
000000r 1               fzc     equ carry+zero
000000r 1               fv      equ overfl
000000r 1               fvz     equ overfl+zero
000000r 1               fn      equ minus
000000r 1               fnc     equ minus+carry
000000r 1               fnz     equ minus+zero
000000r 1               fnzc    equ minus+zero+carry
000000r 1               fnv     equ minus+overfl
000000r 1               
000000r 1               fao     equ break+reserv    ;bits always on after PHP, BRK
000000r 1               fai     equ fao+intdis      ;+ forced interrupt disable
000000r 1               faod    equ fao+decmode     ;+ ignore decimal
000000r 1               faid    equ fai+decmode     ;+ ignore decimal
000000r 1               m8      equ $ff             ;8 bit mask
000000r 1               m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
000000r 1               
000000r 1               ;macros to allow masking of status bits.
000000r 1               ;masking test of decimal bit
000000r 1               ;masking of interrupt enable/disable on load and compare
000000r 1               ;masking of always on bits after PHP or BRK (unused & break) on compare
000000r 1                   .if disable_decimal < 2
000000r 1                       .if I_flag = 0
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1&m8i          ;force enable interrupts (mask I)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fao)&m8i   ;I_flag is always enabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #(p1&m8i|fao)   ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 1
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1|intdis      ;force disable interrupts
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fai)&m8    ;I_flag is always disabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #(p1|fai)       ;invert expected flags + always on bits + I
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 2
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1
000000r 1                           ora flag_I_on       ;restore I-flag
000000r 1                           and flag_I_off
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           cmp #(p1|fao)&m8i   ;expected flags + always on bits, mask I
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           eor #(p1&m8i|fao)   ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 3
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1             ;allow test to change I-flag (no mask)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fao)&m8    ;expected flags + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #p1|fao         ;invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                   .else
000000r 1                       .if I_flag = 0
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1&m8i         ;force enable interrupts (mask I)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8i  ;I_flag is always enabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1&m8i|faod)  ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 1
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1|intdis      ;force disable interrupts
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faid)&m8   ;I_flag is always disabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1|faid)      ;invert expected flags + always on bits + I
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 2
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1
000000r 1                           ora flag_I_on       ;restore I-flag
000000r 1                           and flag_I_off
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8i  ;expected flags + always on bits, mask I
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1&m8i|faod)  ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 3
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1             ;allow test to change I-flag (no mask)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8   ;expected flags + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #p1|faod        ;invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                   .endif
000000r 1               
000000r 1               ;macros to set (register|memory|zeropage) & status
000000r 1                           .macro      set_stat    p1          ;setting flags in the processor status register
000000r 1                           load_flag p1
000000r 1                           pha         ;use stack to load status
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_a       p1,p2       ;precharging accu & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda #p1     ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_x       p1,p2       ;precharging index & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           ldx #p1     ;precharge index x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_y       p1,p2       ;precharging index & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           ldy #p1     ;precharge index y
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_ax      p1,p2       ;precharging indexed accu & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_ay      p1,p2       ;precharging indexed accu & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,y    ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_z       p1,p2       ;precharging indexed zp & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to zeropage
000000r 1                           sta zpt
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_zx      p1,p2       ;precharging zp,x & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to indexed zeropage
000000r 1                           sta zpt,x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_abs     p1,p2       ;precharging indexed memory & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to memory
000000r 1                           sta abst
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_absx    p1,p2       ;precharging abs,x & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to indexed memory
000000r 1                           sta abst,x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1               ;macros to test (register|memory|zeropage) & status & (mask)
000000r 1                           .macro      tst_stat    p1          ;testing flags in the processor status register
000000r 1                           php         ;save status
000000r 1                           pla         ;use stack to retrieve status
000000r 1                           pha
000000r 1                           cmp_flag p1
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_a       p1,p2        ;testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_x       p1,p2       ;testing result in x index & flags
000000r 1                           php         ;save flags
000000r 1                           cpx #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_y       p1,p2       ;testing result in y index & flags
000000r 1                           php         ;save flags
000000r 1                           cpy #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_ax      p1,p2,p3    ;indexed testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne     ;
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_ay      p1,p2,p3    ;indexed testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp p1,y    ;test result
000000r 1                           trap_ne     ;
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,y    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_z       p1,p2,p3    ;indexed testing result in zp & flags
000000r 1                           php         ;save flags
000000r 1                           lda zpt
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_zx      p1,p2,p3    ;testing result in zp,x & flags
000000r 1                           php         ;save flags
000000r 1                           lda zpt,x
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_abs     p1,p2,p3    ;indexed testing result in memory & flags
000000r 1                           php         ;save flags
000000r 1                           lda abst
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_absx    p1,p2,p3    ;testing result in abs,x & flags
000000r 1                           php         ;save flags
000000r 1                           lda abst,x
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1               ; RAM integrity test
000000r 1               ;   verifies that none of the previous tests has altered RAM outside of the
000000r 1               ;   designated write areas.
000000r 1               ;   uses zpt word as indirect pointer, zpt+2 word as checksum
000000r 1                       .if ram_top > -1
000000r 1               check_ram   macro
000000r 1                           cld
000000r 1                           lda #0
000000r 1                           sta zpt         ;set low byte of indirect pointer
000000r 1                           sta zpt+3       ;checksum high byte
000000r 1                         .if disable_selfmod = 0
000000r 1                           sta range_adr   ;reset self modifying code
000000r 1                         .endif
000000r 1                           clc
000000r 1                           ldx #zp_bss-zero_page ;zeropage - write test area
000000r 1               ccs3:       adc zero_page,x
000000r 1                           bcc ccs2
000000r 1                           inc zpt+3       ;carry to high byte
000000r 1                           clc
000000r 1               ccs2:       inx
000000r 1                           bne ccs3
000000r 1                           ldx #hi(abs1)   ;set high byte of indirect pointer
000000r 1                           stx zpt+1
000000r 1                           ldy #lo(abs1)   ;data after write & execute test area
000000r 1               ccs5:       adc (zpt),y
000000r 1                           bcc ccs4
000000r 1                           inc zpt+3       ;carry to high byte
000000r 1                           clc
000000r 1               ccs4:       iny
000000r 1                           bne ccs5
000000r 1                           inx             ;advance RAM high address
000000r 1                           stx zpt+1
000000r 1                           cpx #ram_top
000000r 1                           bne ccs5
000000r 1                           sta zpt+2       ;checksum low is
000000r 1                           cmp ram_chksm   ;checksum low expected
000000r 1                           trap_ne         ;checksum mismatch
000000r 1                           lda zpt+3       ;checksum high is
000000r 1                           cmp ram_chksm+1 ;checksum high expected
000000r 1                           trap_ne         ;checksum mismatch
000000r 1                           .endmacro
000000r 1                       .else
000000r 1                           .macro  check_ram
000000r 1                           ;RAM check disabled - RAM size not set
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1               
000000r 1                           .macro  next_test   ;make sure, tests don't jump the fence
000000r 1                           lda test_case   ;previous test
000000r 1                           cmp #test_num
000000r 1                           trap_ne         ;test is out of sequence
000000r 1               test_num .set test_num + 1
000000r 1                           lda #test_num   ;*** next tests' number
000000r 1                           sta test_case
000000r 1                           ;check_ram       ;uncomment to find altered RAM after each test
000000r 1                           .endmacro
000000r 1               
000000r 1                       .ZEROPAGE
000000r 1  00 00 00 00  		.res zero_page, 0
000004r 1  00 00 00 00  
000008r 1  00 00        
00000Ar 1                       .org zero_page
00000A  1               
00000A  1               ;break test interrupt save
00000A  1  00           irq_a:  .res    1,0             ;a register
00000B  1  00           irq_x:  .res    1,0             ;x register
00000C  1                   .if I_flag = 2
00000C  1               ;masking for I bit in status
00000C  1               flag_I_on:  .res    1,0         ;or mask to load flags
00000C  1               flag_I_off: .res    1,0         ;and mask to load flags
00000C  1                   .endif
00000C  1               zpt:                        ;6 bytes store/modify test area
00000C  1               ;add/subtract operand generation and result/flag prediction
00000C  1  00           adfc:   .res    1,0             ;carry flag before op
00000D  1  00           ad1:    .res    1,0             ;operand 1 - accumulator
00000E  1  00           ad2:    .res    1,0             ;operand 2 - memory / immediate
00000F  1  00           adrl:   .res    1,0             ;expected result bits 0-7
000010  1  00           adrh:   .res    1,0             ;expected result bit 8 (carry)
000011  1  00           adrf:   .res    1,0             ;expected flags NV0000ZC (only binary mode)
000012  1  00           sb2:    .res    1,0             ;operand 2 complemented for subtract
000013  1               zp_bss:
000013  1  80 01        zps:    .byte   $80,1           ;additional shift pattern to test zero result & flag
000015  1  C3 82 41 00  zp1:    .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
000019  1  7F           zp7f:   .byte   $7f             ;test pattern for compare
00001A  1               ;logical zeropage operands
00001A  1  00 1F 71 80  zpOR:   .byte   0,$1f,$71,$80   ;test pattern for OR
00001E  1  0F FF 7F 80  zpAN:   .byte   $0f,$ff,$7f,$80 ;test pattern for AND
000022  1  FF 0F 8F 8F  zpEO:   .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
000026  1               ;indirect addressing pointers
000026  1  18 02        ind1:   .word   abs1            ;indirect pointer to pattern in absolute memory
000028  1  19 02                .word   abs1+1
00002A  1  1A 02                .word   abs1+2
00002C  1  1B 02                .word   abs1+3
00002E  1  1C 02                .word   abs7f
000030  1  20 01        inw1:   .word   abs1-$f8        ;indirect pointer for wrap-test pattern
000032  1  03 02        indt:   .word   abst            ;indirect pointer to store area in absolute memory
000034  1  04 02                .word   abst+1
000036  1  05 02                .word   abst+2
000038  1  06 02                .word   abst+3
00003A  1  0B 01        inwt:   .word   abst-$f8        ;indirect pointer for wrap-test store
00003C  1  5F 02        indAN:  .word   absAN           ;indirect pointer to AND pattern in absolute memory
00003E  1  60 02                .word   absAN+1
000040  1  61 02                .word   absAN+2
000042  1  62 02                .word   absAN+3
000044  1  63 02        indEO:  .word   absEO           ;indirect pointer to EOR pattern in absolute memory
000046  1  64 02                .word   absEO+1
000048  1  65 02                .word   absEO+2
00004A  1  66 02                .word   absEO+3
00004C  1  5B 02        indOR:  .word   absOR           ;indirect pointer to OR pattern in absolute memory
00004E  1  5C 02                .word   absOR+1
000050  1  5D 02                .word   absOR+2
000052  1  5E 02                .word   absOR+3
000054  1               ;add/subtract indirect pointers
000054  1  03 02        adi2:   .word   ada2            ;indirect pointer to operand 2 in absolute memory
000056  1  04 02        sbi2:   .word   sba2            ;indirect pointer to complemented operand 2 (SBC)
000058  1  04 01        adiy2:  .word   ada2-$ff        ;with offset for indirect indexed
00005A  1  05 01        sbiy2:  .word   sba2-$ff
00005C  1               zp_bss_end:
00005C  1               
00005C  1                       .DATA
00005C  1                       .org data_segment
000200  1               
000200  1  00           test_case:  .res    1,0         ;current test number
000201  1  00 00        ram_chksm:  .res    2,0         ;checksum for RAM integrity test
000203  1               ;add/subtract operand copy - abs tests write area
000203  1               abst:                           ;6 bytes store/modify test area
000203  1  00           ada2:   .res    1,0             ;operand 2
000204  1  00           sba2:   .res    1,0             ;operand 2 complemented for subtract
000205  1  00 00 00 00          .res    4,0             ;fill remaining bytes
000209  1               data_bss:
000209  1                   .if load_data_direct = 1
000209  1  29 00        ex_andi:and #0              ;execute immediate opcodes
00020B  1  60                   rts
00020C  1  49 00        ex_eori:eor #0              ;execute immediate opcodes
00020E  1  60                   rts
00020F  1  09 00        ex_orai:ora #0              ;execute immediate opcodes
000211  1  60                   rts
000212  1  69 00        ex_adci:adc #0              ;execute immediate opcodes
000214  1  60                   rts
000215  1  E9 00        ex_sbci:sbc #0              ;execute immediate opcodes
000217  1  60                   rts
000218  1                   .else
000218  1               ex_andi:.res    3
000218  1               ex_eori:.res    3
000218  1               ex_orai:.res    3
000218  1               ex_adci:.res    3
000218  1               ex_sbci:.res    3
000218  1                   .endif
000218  1               ;zps    .byte   $80,1           ;additional shift patterns test zero result & flag
000218  1  C3 82 41 00  abs1:   .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
00021C  1  7F           abs7f:  .byte   $7f             ;test pattern for compare
00021D  1               ;loads
00021D  1  80 80 00 02  fLDx:   .byte   fn,fn,0,fz              ;expected flags for load
000221  1               ;shifts
000221  1               rASL:                                   ;expected result ASL & ROL -carry
000221  1  00 02 86 04  rROL:   .byte   0,2,$86,$04,$82,0
000225  1  82 00        
000227  1  01 03 87 05  rROLc:  .byte   1,3,$87,$05,$83,1       ;expected result ROL +carry
00022B  1  83 01        
00022D  1               rLSR:                                   ;expected result LSR & ROR -carry
00022D  1  40 00 61 41  rROR:   .byte   $40,0,$61,$41,$20,0
000231  1  20 00        
000233  1  C0 80 E1 C1  rRORc:  .byte   $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
000237  1  A0 80        
000239  1               fASL:                                   ;expected flags for shifts
000239  1  03 00 81 01  fROL:   .byte   fzc,0,fnc,fc,fn,fz      ;no carry in
00023D  1  80 02        
00023F  1  01 00 81 01  fROLc:  .byte   fc,0,fnc,fc,fn,0        ;carry in
000243  1  80 00        
000245  1               fLSR:
000245  1  00 03 01 00  fROR:   .byte   0,fzc,fc,0,fc,fz        ;no carry in
000249  1  01 02        
00024B  1  80 81 81 80  fRORc:  .byte   fn,fnc,fnc,fn,fnc,fn    ;carry in
00024F  1  81 80        
000251  1               ;increments (decrements)
000251  1  7F 80 FF 00  rINC:   .byte   $7f,$80,$ff,0,1         ;expected result for INC/DEC
000255  1  01           
000256  1  00 80 80 02  fINC:   .byte   0,fn,fn,fz,0            ;expected flags for INC/DEC
00025A  1  00           
00025B  1               ;logical memory operand
00025B  1  00 1F 71 80  absOR:  .byte   0,$1f,$71,$80           ;test pattern for OR
00025F  1  0F FF 7F 80  absAN:  .byte   $0f,$ff,$7f,$80         ;test pattern for AND
000263  1  FF 0F 8F 8F  absEO:  .byte   $ff,$0f,$8f,$8f         ;test pattern for EOR
000267  1               ;logical accu operand
000267  1  00 F1 1F 00  absORa: .byte   0,$f1,$1f,0             ;test pattern for OR
00026B  1  F0 FF FF FF  absANa: .byte   $f0,$ff,$ff,$ff         ;test pattern for AND
00026F  1  FF F0 F0 0F  absEOa: .byte   $ff,$f0,$f0,$0f         ;test pattern for EOR
000273  1               ;logical results
000273  1  00 FF 7F 80  absrlo: .byte   0,$ff,$7f,$80
000277  1  02 80 00 80  absflo: .byte   fz,fn,0,fn
00027B  1               data_bss_end:
00027B  1               
00027B  1               
00027B  1                       .CODE
00027B  1                       .org code_segment
001000  1                       .P02            ; disable 65SC02, 65C02 and 65816 instructions
001000  1  D8           start:  cld
001001  1  A2 FF                ldx #$ff
001003  1  9A                   txs
001004  1  A9 00                lda #0          ;*** test 0 = initialize
001006  1  8D 00 02             sta test_case
001009  1               test_num .set 0
001009  1               
001009  1               ;stop interrupts before initializing BSS
001009  1                   .if I_flag = 1
001009  1                       sei
001009  1                   .endif
001009  1               
001009  1               ;initialize I/O for report channel
001009  1                   .if report = 1
001009  1                       jsr report_init
001009  1                   .endif
001009  1               
001009  1               ;pretest small branch offset
001009  1  A2 05                ldx #5
00100B  1  4C 33 10             jmp psb_test
00100E  1               psb_bwok:
00100E  1  A0 05                ldy #5
001010  1  D0 08                bne psb_forw
001012  1  4C 12 10             trap        ;branch should be taken
001015  1  88                   dey         ;forward landing zone
001016  1  88                   dey
001017  1  88                   dey
001018  1  88                   dey
001019  1  88                   dey
00101A  1               psb_forw:
00101A  1  88                   dey
00101B  1  88                   dey
00101C  1  88                   dey
00101D  1  88                   dey
00101E  1  88                   dey
00101F  1  F0 17                beq psb_fwok
001021  1  4C 21 10             trap        ;forward offset
001024  1               
001024  1  CA                   dex         ;backward landing zone
001025  1  CA                   dex
001026  1  CA                   dex
001027  1  CA                   dex
001028  1  CA                   dex
001029  1               psb_back:
001029  1  CA                   dex
00102A  1  CA                   dex
00102B  1  CA                   dex
00102C  1  CA                   dex
00102D  1  CA                   dex
00102E  1  F0 DE                beq psb_bwok
001030  1  4C 30 10             trap        ;backward offset
001033  1               psb_test:
001033  1  D0 F4                bne psb_back
001035  1  4C 35 10             trap        ;branch should be taken
001038  1               psb_fwok:
001038  1               
001038  1               ;initialize BSS segment
001038  1                   .if load_data_direct <> 1
001038  1                       ldx #zp_end-zp_init-1
001038  1               ld_zp:  lda zp_init,x
001038  1                       sta zp_bss,x
001038  1                       dex
001038  1                       bpl ld_zp
001038  1                       ldx #data_end-data_init-1
001038  1               ld_data:lda data_init,x
001038  1                       sta data_bss,x
001038  1                       dex
001038  1                       bpl ld_data
001038  1                     .if ROM_vectors = 1
001038  1                       ldx #5
001038  1               ld_vect:lda vec_init,x
001038  1                       sta vec_bss,x
001038  1                       dex
001038  1                       bpl ld_vect
001038  1                     .endif
001038  1                   .endif
001038  1               
001038  1               ;retain status of interrupt flag
001038  1                   .if I_flag = 2
001038  1                       php
001038  1                       pla
001038  1                       and #4          ;isolate flag
001038  1                       sta flag_I_on   ;or mask
001038  1                       eor #lo(~4)     ;reverse
001038  1                       sta flag_I_off  ;and mask
001038  1                   .endif
001038  1               
001038  1               ;generate checksum for RAM integrity test
001038  1                   .if ram_top > -1
001038  1                       lda #0
001038  1                       sta zpt         ;set low byte of indirect pointer
001038  1                       sta ram_chksm+1 ;checksum high byte
001038  1                     .if disable_selfmod = 0
001038  1                       sta range_adr   ;reset self modifying code
001038  1                     .endif
001038  1                       clc
001038  1                       ldx #zp_bss-zero_page ;zeropage - write test area
001038  1               gcs3:   adc zero_page,x
001038  1                       bcc gcs2
001038  1                       inc ram_chksm+1 ;carry to high byte
001038  1                       clc
001038  1               gcs2:   inx
001038  1                       bne gcs3
001038  1                       ldx #hi(abs1)   ;set high byte of indirect pointer
001038  1                       stx zpt+1
001038  1                       ldy #lo(abs1)   ;data after write & execute test area
001038  1               gcs5:   adc (zpt),y
001038  1                       bcc gcs4
001038  1                       inc ram_chksm+1 ;carry to high byte
001038  1                       clc
001038  1               gcs4:   iny
001038  1                       bne gcs5
001038  1                       inx             ;advance RAM high address
001038  1                       stx zpt+1
001038  1                       cpx #ram_top
001038  1                       bne gcs5
001038  1                       sta ram_chksm   ;checksum complete
001038  1                   .endif
001038  1  AD 00 02 C9          next_test
00103C  1  00 D0 FE A9  
001040  1  01 8D 00 02  
001044  1               
001044  1                   .if disable_selfmod = 0
001044  1               ;testing relative addressing with BEQ
001044  1  A0 FE                ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
001046  1               range_loop:
001046  1  88                   dey             ;next relative address
001047  1  98                   tya
001048  1  AA                   tax             ;precharge count to end of loop
001049  1  10 08                bpl range_fw    ;calculate relative address
00104B  1  18                   clc             ;avoid branch self or to relative address of branch
00104C  1  69 02                adc #2
00104E  1  EA                   nop             ;offset landing zone - tolerate +/-5 offset to branch
00104F  1  EA                   nop
001050  1  EA                   nop
001051  1  EA                   nop
001052  1  EA                   nop
001053  1               range_fw:
001053  1  EA                   nop
001054  1  EA                   nop
001055  1  EA                   nop
001056  1  EA                   nop
001057  1  EA                   nop
001058  1  49 7F                eor #$7f        ;complement except sign
00105A  1  8D E6 10             sta range_adr   ;load into test target
00105D  1  A9 00                lda #0          ;should set zero flag in status register
00105F  1  4C E5 10             jmp range_op
001062  1               
001062  1  CA                   dex             ; offset landing zone - backward branch too far
001063  1  CA                   dex
001064  1  CA                   dex
001065  1  CA                   dex
001066  1  CA                   dex
001067  1                       ;relative address target field with branch under test in the middle
001067  1  CA                   dex             ;-128 - max backward
001068  1  CA                   dex
001069  1  CA                   dex
00106A  1  CA                   dex
00106B  1  CA                   dex
00106C  1  CA                   dex
00106D  1  CA                   dex
00106E  1  CA                   dex
00106F  1  CA                   dex             ;-120
001070  1  CA                   dex
001071  1  CA                   dex
001072  1  CA                   dex
001073  1  CA                   dex
001074  1  CA                   dex
001075  1  CA                   dex
001076  1  CA                   dex
001077  1  CA                   dex
001078  1  CA                   dex
001079  1  CA                   dex             ;-110
00107A  1  CA                   dex
00107B  1  CA                   dex
00107C  1  CA                   dex
00107D  1  CA                   dex
00107E  1  CA                   dex
00107F  1  CA                   dex
001080  1  CA                   dex
001081  1  CA                   dex
001082  1  CA                   dex
001083  1  CA                   dex             ;-100
001084  1  CA                   dex
001085  1  CA                   dex
001086  1  CA                   dex
001087  1  CA                   dex
001088  1  CA                   dex
001089  1  CA                   dex
00108A  1  CA                   dex
00108B  1  CA                   dex
00108C  1  CA                   dex
00108D  1  CA                   dex             ;-90
00108E  1  CA                   dex
00108F  1  CA                   dex
001090  1  CA                   dex
001091  1  CA                   dex
001092  1  CA                   dex
001093  1  CA                   dex
001094  1  CA                   dex
001095  1  CA                   dex
001096  1  CA                   dex
001097  1  CA                   dex             ;-80
001098  1  CA                   dex
001099  1  CA                   dex
00109A  1  CA                   dex
00109B  1  CA                   dex
00109C  1  CA                   dex
00109D  1  CA                   dex
00109E  1  CA                   dex
00109F  1  CA                   dex
0010A0  1  CA                   dex
0010A1  1  CA                   dex             ;-70
0010A2  1  CA                   dex
0010A3  1  CA                   dex
0010A4  1  CA                   dex
0010A5  1  CA                   dex
0010A6  1  CA                   dex
0010A7  1  CA                   dex
0010A8  1  CA                   dex
0010A9  1  CA                   dex
0010AA  1  CA                   dex
0010AB  1  CA                   dex             ;-60
0010AC  1  CA                   dex
0010AD  1  CA                   dex
0010AE  1  CA                   dex
0010AF  1  CA                   dex
0010B0  1  CA                   dex
0010B1  1  CA                   dex
0010B2  1  CA                   dex
0010B3  1  CA                   dex
0010B4  1  CA                   dex
0010B5  1  CA                   dex             ;-50
0010B6  1  CA                   dex
0010B7  1  CA                   dex
0010B8  1  CA                   dex
0010B9  1  CA                   dex
0010BA  1  CA                   dex
0010BB  1  CA                   dex
0010BC  1  CA                   dex
0010BD  1  CA                   dex
0010BE  1  CA                   dex
0010BF  1  CA                   dex             ;-40
0010C0  1  CA                   dex
0010C1  1  CA                   dex
0010C2  1  CA                   dex
0010C3  1  CA                   dex
0010C4  1  CA                   dex
0010C5  1  CA                   dex
0010C6  1  CA                   dex
0010C7  1  CA                   dex
0010C8  1  CA                   dex
0010C9  1  CA                   dex             ;-30
0010CA  1  CA                   dex
0010CB  1  CA                   dex
0010CC  1  CA                   dex
0010CD  1  CA                   dex
0010CE  1  CA                   dex
0010CF  1  CA                   dex
0010D0  1  CA                   dex
0010D1  1  CA                   dex
0010D2  1  CA                   dex
0010D3  1  CA                   dex             ;-20
0010D4  1  CA                   dex
0010D5  1  CA                   dex
0010D6  1  CA                   dex
0010D7  1  CA                   dex
0010D8  1  CA                   dex
0010D9  1  CA                   dex
0010DA  1  CA                   dex
0010DB  1  CA                   dex
0010DC  1  CA                   dex
0010DD  1  CA                   dex             ;-10
0010DE  1  CA                   dex
0010DF  1  CA                   dex
0010E0  1  CA                   dex
0010E1  1  CA                   dex
0010E2  1  CA                   dex
0010E3  1  CA                   dex
0010E4  1  CA                   dex             ;-3
0010E5  1               range_op:               ;test target with zero flag=0, z=1 if previous dex
0010E5  1               range_adr   = *+1       ;modifiable relative address
0010E5  1  F0 3E                beq *+64        ;+64 if called without modification
0010E7  1  CA                   dex             ;+0
0010E8  1  CA                   dex
0010E9  1  CA                   dex
0010EA  1  CA                   dex
0010EB  1  CA                   dex
0010EC  1  CA                   dex
0010ED  1  CA                   dex
0010EE  1  CA                   dex
0010EF  1  CA                   dex
0010F0  1  CA                   dex
0010F1  1  CA                   dex             ;+10
0010F2  1  CA                   dex
0010F3  1  CA                   dex
0010F4  1  CA                   dex
0010F5  1  CA                   dex
0010F6  1  CA                   dex
0010F7  1  CA                   dex
0010F8  1  CA                   dex
0010F9  1  CA                   dex
0010FA  1  CA                   dex
0010FB  1  CA                   dex             ;+20
0010FC  1  CA                   dex
0010FD  1  CA                   dex
0010FE  1  CA                   dex
0010FF  1  CA                   dex
001100  1  CA                   dex
001101  1  CA                   dex
001102  1  CA                   dex
001103  1  CA                   dex
001104  1  CA                   dex
001105  1  CA                   dex             ;+30
001106  1  CA                   dex
001107  1  CA                   dex
001108  1  CA                   dex
001109  1  CA                   dex
00110A  1  CA                   dex
00110B  1  CA                   dex
00110C  1  CA                   dex
00110D  1  CA                   dex
00110E  1  CA                   dex
00110F  1  CA                   dex             ;+40
001110  1  CA                   dex
001111  1  CA                   dex
001112  1  CA                   dex
001113  1  CA                   dex
001114  1  CA                   dex
001115  1  CA                   dex
001116  1  CA                   dex
001117  1  CA                   dex
001118  1  CA                   dex
001119  1  CA                   dex             ;+50
00111A  1  CA                   dex
00111B  1  CA                   dex
00111C  1  CA                   dex
00111D  1  CA                   dex
00111E  1  CA                   dex
00111F  1  CA                   dex
001120  1  CA                   dex
001121  1  CA                   dex
001122  1  CA                   dex
001123  1  CA                   dex             ;+60
001124  1  CA                   dex
001125  1  CA                   dex
001126  1  CA                   dex
001127  1  CA                   dex
001128  1  CA                   dex
001129  1  CA                   dex
00112A  1  CA                   dex
00112B  1  CA                   dex
00112C  1  CA                   dex
00112D  1  CA                   dex             ;+70
00112E  1  CA                   dex
00112F  1  CA                   dex
001130  1  CA                   dex
001131  1  CA                   dex
001132  1  CA                   dex
001133  1  CA                   dex
001134  1  CA                   dex
001135  1  CA                   dex
001136  1  CA                   dex
001137  1  CA                   dex             ;+80
001138  1  CA                   dex
001139  1  CA                   dex
00113A  1  CA                   dex
00113B  1  CA                   dex
00113C  1  CA                   dex
00113D  1  CA                   dex
00113E  1  CA                   dex
00113F  1  CA                   dex
001140  1  CA                   dex
001141  1  CA                   dex             ;+90
001142  1  CA                   dex
001143  1  CA                   dex
001144  1  CA                   dex
001145  1  CA                   dex
001146  1  CA                   dex
001147  1  CA                   dex
001148  1  CA                   dex
001149  1  CA                   dex
00114A  1  CA                   dex
00114B  1  CA                   dex             ;+100
00114C  1  CA                   dex
00114D  1  CA                   dex
00114E  1  CA                   dex
00114F  1  CA                   dex
001150  1  CA                   dex
001151  1  CA                   dex
001152  1  CA                   dex
001153  1  CA                   dex
001154  1  CA                   dex
001155  1  CA                   dex             ;+110
001156  1  CA                   dex
001157  1  CA                   dex
001158  1  CA                   dex
001159  1  CA                   dex
00115A  1  CA                   dex
00115B  1  CA                   dex
00115C  1  CA                   dex
00115D  1  CA                   dex
00115E  1  CA                   dex
00115F  1  CA                   dex             ;+120
001160  1  CA                   dex
001161  1  CA                   dex
001162  1  CA                   dex
001163  1  CA                   dex
001164  1  CA                   dex
001165  1  CA                   dex
001166  1  EA                   nop             ;offset landing zone - forward branch too far
001167  1  EA                   nop
001168  1  EA                   nop
001169  1  EA                   nop
00116A  1  EA                   nop
00116B  1  F0 08                beq range_ok    ;+127 - max forward
00116D  1  4C 6D 11             trap            ; bad range
001170  1  EA                   nop             ;offset landing zone - tolerate +/-5 offset to branch
001171  1  EA                   nop
001172  1  EA                   nop
001173  1  EA                   nop
001174  1  EA                   nop
001175  1               range_ok:
001175  1  EA                   nop
001176  1  EA                   nop
001177  1  EA                   nop
001178  1  EA                   nop
001179  1  EA                   nop
00117A  1  C0 00                cpy #0
00117C  1  F0 03                beq range_end
00117E  1  4C 46 10             jmp range_loop
001181  1               range_end:              ;range test successful
001181  1                   .endif
001181  1  AD 00 02 C9          next_test
001185  1  01 D0 FE A9  
001189  1  02 8D 00 02  
00118D  1               
00118D  1               ;partial test BNE & CMP, CPX, CPY immediate
00118D  1  C0 01                cpy #1          ;testing BNE true
00118F  1  D0 03                bne test_bne
001191  1  4C 91 11             trap
001194  1               test_bne:
001194  1  A9 00                lda #0
001196  1  C9 00                cmp #0          ;test compare immediate
001198  1  D0 FE                trap_ne
00119A  1  90 FE                trap_cc
00119C  1  30 FE                trap_mi
00119E  1  C9 01                cmp #1
0011A0  1  F0 FE                trap_eq
0011A2  1  B0 FE                trap_cs
0011A4  1  10 FE                trap_pl
0011A6  1  AA                   tax
0011A7  1  E0 00                cpx #0          ;test compare x immediate
0011A9  1  D0 FE                trap_ne
0011AB  1  90 FE                trap_cc
0011AD  1  30 FE                trap_mi
0011AF  1  E0 01                cpx #1
0011B1  1  F0 FE                trap_eq
0011B3  1  B0 FE                trap_cs
0011B5  1  10 FE                trap_pl
0011B7  1  A8                   tay
0011B8  1  C0 00                cpy #0          ;test compare y immediate
0011BA  1  D0 FE                trap_ne
0011BC  1  90 FE                trap_cc
0011BE  1  30 FE                trap_mi
0011C0  1  C0 01                cpy #1
0011C2  1  F0 FE                trap_eq
0011C4  1  B0 FE                trap_cs
0011C6  1  10 FE                trap_pl
0011C8  1  AD 00 02 C9          next_test
0011CC  1  02 D0 FE A9  
0011D0  1  03 8D 00 02  
0011D4  1               ;testing stack operations PHA PHP PLA PLP
0011D4  1               
0011D4  1  A2 FF                ldx #$ff        ;initialize stack
0011D6  1  9A                   txs
0011D7  1  A9 55                lda #$55
0011D9  1  48                   pha
0011DA  1  A9 AA                lda #$aa
0011DC  1  48                   pha
0011DD  1  CD FE 01             cmp $1fe        ;on stack ?
0011E0  1  D0 FE                trap_ne
0011E2  1  BA                   tsx
0011E3  1  8A                   txa             ;overwrite accu
0011E4  1  C9 FD                cmp #$fd        ;sp decremented?
0011E6  1  D0 FE                trap_ne
0011E8  1  68                   pla
0011E9  1  C9 AA                cmp #$aa        ;successful retreived from stack?
0011EB  1  D0 FE                trap_ne
0011ED  1  68                   pla
0011EE  1  C9 55                cmp #$55
0011F0  1  D0 FE                trap_ne
0011F2  1  CD FF 01             cmp $1ff        ;remains on stack?
0011F5  1  D0 FE                trap_ne
0011F7  1  BA                   tsx
0011F8  1  E0 FF                cpx #$ff        ;sp incremented?
0011FA  1  D0 FE                trap_ne
0011FC  1  AD 00 02 C9          next_test
001200  1  03 D0 FE A9  
001204  1  04 8D 00 02  
001208  1               
001208  1               ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
001208  1  A9 FF 48 28          set_stat $ff    ;all on
00120C  1  10 1A                bpl nbr1        ;branches should not be taken
00120E  1  50 1B                bvc nbr2
001210  1  90 1C                bcc nbr3
001212  1  D0 1D                bne nbr4
001214  1  30 03                bmi br1         ;branches should be taken
001216  1  4C 16 12             trap
001219  1  70 03        br1:    bvs br2
00121B  1  4C 1B 12             trap
00121E  1  B0 03        br2:    bcs br3
001220  1  4C 20 12             trap
001223  1  F0 0F        br3:    beq br4
001225  1  4C 25 12             trap
001228  1               nbr1:
001228  1  4C 28 12             trap            ;previous bpl taken
00122B  1               nbr2:
00122B  1  4C 2B 12             trap            ;previous bvc taken
00122E  1               nbr3:
00122E  1  4C 2E 12             trap            ;previous bcc taken
001231  1               nbr4:
001231  1  4C 31 12             trap            ;previous bne taken
001234  1  08           br4:    php
001235  1  BA                   tsx
001236  1  E0 FE                cpx #$fe        ;sp after php?
001238  1  D0 FE                trap_ne
00123A  1  68                   pla
00123B  1  C9 FF                cmp_flag $ff    ;returned all flags on?
00123D  1  D0 FE                trap_ne
00123F  1  BA                   tsx
001240  1  E0 FF                cpx #$ff        ;sp after php?
001242  1  D0 FE                trap_ne
001244  1  A9 00 48 28          set_stat 0      ;all off
001248  1  30 1A                bmi nbr11       ;branches should not be taken
00124A  1  70 1B                bvs nbr12
00124C  1  B0 1C                bcs nbr13
00124E  1  F0 1D                beq nbr14
001250  1  10 03                bpl br11        ;branches should be taken
001252  1  4C 52 12             trap
001255  1  50 03        br11:   bvc br12
001257  1  4C 57 12             trap
00125A  1  90 03        br12:   bcc br13
00125C  1  4C 5C 12             trap
00125F  1  D0 0F        br13:   bne br14
001261  1  4C 61 12             trap
001264  1               nbr11:
001264  1  4C 64 12             trap            ;previous bmi taken
001267  1               nbr12:
001267  1  4C 67 12             trap            ;previous bvs taken
00126A  1               nbr13:
00126A  1  4C 6A 12             trap            ;previous bcs taken
00126D  1               nbr14:
00126D  1  4C 6D 12             trap            ;previous beq taken
001270  1  08           br14:   php
001271  1  68                   pla
001272  1  C9 30                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
001274  1  D0 FE                trap_ne
001276  1                       ;crosscheck flags
001276  1  A9 02 48 28          set_stat zero
00127A  1  D0 02                bne brzs1
00127C  1  F0 03                beq brzs2
00127E  1               brzs1:
00127E  1  4C 7E 12             trap            ;branch zero/non zero
001281  1  B0 02        brzs2:  bcs brzs3
001283  1  90 03                bcc brzs4
001285  1               brzs3:
001285  1  4C 85 12             trap            ;branch carry/no carry
001288  1  30 02        brzs4:  bmi brzs5
00128A  1  10 03                bpl brzs6
00128C  1               brzs5:
00128C  1  4C 8C 12             trap            ;branch minus/plus
00128F  1  70 02        brzs6:  bvs brzs7
001291  1  50 03                bvc brzs8
001293  1               brzs7:
001293  1  4C 93 12             trap            ;branch overflow/no overflow
001296  1               brzs8:
001296  1  A9 01 48 28          set_stat carry
00129A  1  F0 02                beq brcs1
00129C  1  D0 03                bne brcs2
00129E  1               brcs1:
00129E  1  4C 9E 12             trap            ;branch zero/non zero
0012A1  1  90 02        brcs2:  bcc brcs3
0012A3  1  B0 03                bcs brcs4
0012A5  1               brcs3:
0012A5  1  4C A5 12             trap            ;branch carry/no carry
0012A8  1  30 02        brcs4:  bmi brcs5
0012AA  1  10 03                bpl brcs6
0012AC  1               brcs5:
0012AC  1  4C AC 12             trap            ;branch minus/plus
0012AF  1  70 02        brcs6:  bvs brcs7
0012B1  1  50 03                bvc brcs8
0012B3  1               brcs7:
0012B3  1  4C B3 12             trap            ;branch overflow/no overflow
0012B6  1               
0012B6  1               brcs8:
0012B6  1  A9 80 48 28          set_stat minus
0012BA  1  F0 02                beq brmi1
0012BC  1  D0 03                bne brmi2
0012BE  1               brmi1:
0012BE  1  4C BE 12             trap            ;branch zero/non zero
0012C1  1  B0 02        brmi2:  bcs brmi3
0012C3  1  90 03                bcc brmi4
0012C5  1               brmi3:
0012C5  1  4C C5 12             trap            ;branch carry/no carry
0012C8  1  10 02        brmi4:  bpl brmi5
0012CA  1  30 03                bmi brmi6
0012CC  1               brmi5:
0012CC  1  4C CC 12             trap            ;branch minus/plus
0012CF  1  70 02        brmi6:  bvs brmi7
0012D1  1  50 03                bvc brmi8
0012D3  1               brmi7:
0012D3  1  4C D3 12             trap            ;branch overflow/no overflow
0012D6  1               brmi8:
0012D6  1  A9 40 48 28          set_stat overfl
0012DA  1  F0 02                beq brvs1
0012DC  1  D0 03                bne brvs2
0012DE  1               brvs1:
0012DE  1  4C DE 12             trap            ;branch zero/non zero
0012E1  1  B0 02        brvs2:  bcs brvs3
0012E3  1  90 03                bcc brvs4
0012E5  1               brvs3:
0012E5  1  4C E5 12             trap            ;branch carry/no carry
0012E8  1  30 02        brvs4:  bmi brvs5
0012EA  1  10 03                bpl brvs6
0012EC  1               brvs5:
0012EC  1  4C EC 12             trap            ;branch minus/plus
0012EF  1  50 02        brvs6:  bvc brvs7
0012F1  1  70 03                bvs brvs8
0012F3  1               brvs7:
0012F3  1  4C F3 12             trap            ;branch overflow/no overflow
0012F6  1               brvs8:
0012F6  1  A9 FD 48 28          set_stat $ff-zero
0012FA  1  F0 02                beq brzc1
0012FC  1  D0 03                bne brzc2
0012FE  1               brzc1:
0012FE  1  4C FE 12             trap            ;branch zero/non zero
001301  1  90 02        brzc2:  bcc brzc3
001303  1  B0 03                bcs brzc4
001305  1               brzc3:
001305  1  4C 05 13             trap            ;branch carry/no carry
001308  1  10 02        brzc4:  bpl brzc5
00130A  1  30 03                bmi brzc6
00130C  1               brzc5:
00130C  1  4C 0C 13             trap            ;branch minus/plus
00130F  1  50 02        brzc6:  bvc brzc7
001311  1  70 03                bvs brzc8
001313  1               brzc7:
001313  1  4C 13 13             trap            ;branch overflow/no overflow
001316  1               brzc8:
001316  1  A9 FE 48 28          set_stat $ff-carry
00131A  1  D0 02                bne brcc1
00131C  1  F0 03                beq brcc2
00131E  1               brcc1:
00131E  1  4C 1E 13             trap            ;branch zero/non zero
001321  1  B0 02        brcc2:  bcs brcc3
001323  1  90 03                bcc brcc4
001325  1               brcc3:
001325  1  4C 25 13             trap            ;branch carry/no carry
001328  1  10 02        brcc4:  bpl brcc5
00132A  1  30 03                bmi brcc6
00132C  1               brcc5:
00132C  1  4C 2C 13             trap            ;branch minus/plus
00132F  1  50 02        brcc6:  bvc brcc7
001331  1  70 03                bvs brcc8
001333  1               brcc7:
001333  1  4C 33 13             trap            ;branch overflow/no overflow
001336  1               brcc8:
001336  1  A9 7F 48 28          set_stat $ff-minus
00133A  1  D0 02                bne brpl1
00133C  1  F0 03                beq brpl2
00133E  1               brpl1:
00133E  1  4C 3E 13             trap            ;branch zero/non zero
001341  1  90 02        brpl2:  bcc brpl3
001343  1  B0 03                bcs brpl4
001345  1               brpl3:
001345  1  4C 45 13             trap            ;branch carry/no carry
001348  1  30 02        brpl4:  bmi brpl5
00134A  1  10 03                bpl brpl6
00134C  1               brpl5:
00134C  1  4C 4C 13             trap            ;branch minus/plus
00134F  1  50 02        brpl6:  bvc brpl7
001351  1  70 03                bvs brpl8
001353  1               brpl7:
001353  1  4C 53 13             trap            ;branch overflow/no overflow
001356  1               brpl8:
001356  1  A9 BF 48 28          set_stat $ff-overfl
00135A  1  D0 02                bne brvc1
00135C  1  F0 03                beq brvc2
00135E  1               brvc1:
00135E  1  4C 5E 13             trap            ;branch zero/non zero
001361  1  90 02        brvc2:  bcc brvc3
001363  1  B0 03                bcs brvc4
001365  1               brvc3:
001365  1  4C 65 13             trap            ;branch carry/no carry
001368  1  10 02        brvc4:  bpl brvc5
00136A  1  30 03                bmi brvc6
00136C  1               brvc5:
00136C  1  4C 6C 13             trap            ;branch minus/plus
00136F  1  70 02        brvc6:  bvs brvc7
001371  1  50 03                bvc brvc8
001373  1               brvc7:
001373  1  4C 73 13             trap            ;branch overflow/no overflow
001376  1               brvc8:
001376  1  AD 00 02 C9          next_test
00137A  1  04 D0 FE A9  
00137E  1  05 8D 00 02  
001382  1               
001382  1               ; test PHA does not alter flags or accumulator but PLA does
001382  1  A2 55                ldx #$55        ;x & y protected
001384  1  A0 AA                ldy #$aa
001386  1  A9 FF 48 A9          set_a 1,$ff     ;push
00138A  1  01 28        
00138C  1  48                   pha
00138D  1  08 C9 01 D0          tst_a 1,$ff
001391  1  FE 68 48 C9  
001395  1  FF D0 FE 28  
001399  1  A9 00 48 A9          set_a 0,0
00139D  1  00 28        
00139F  1  48                   pha
0013A0  1  08 C9 00 D0          tst_a 0,0
0013A4  1  FE 68 48 C9  
0013A8  1  30 D0 FE 28  
0013AC  1  A9 FF 48 A9          set_a $ff,$ff
0013B0  1  FF 28        
0013B2  1  48                   pha
0013B3  1  08 C9 FF D0          tst_a $ff,$ff
0013B7  1  FE 68 48 C9  
0013BB  1  FF D0 FE 28  
0013BF  1  A9 00 48 A9          set_a 1,0
0013C3  1  01 28        
0013C5  1  48                   pha
0013C6  1  08 C9 01 D0          tst_a 1,0
0013CA  1  FE 68 48 C9  
0013CE  1  30 D0 FE 28  
0013D2  1  A9 FF 48 A9          set_a 0,$ff
0013D6  1  00 28        
0013D8  1  48                   pha
0013D9  1  08 C9 00 D0          tst_a 0,$ff
0013DD  1  FE 68 48 C9  
0013E1  1  FF D0 FE 28  
0013E5  1  A9 00 48 A9          set_a $ff,0
0013E9  1  FF 28        
0013EB  1  48                   pha
0013EC  1  08 C9 FF D0          tst_a $ff,0
0013F0  1  FE 68 48 C9  
0013F4  1  30 D0 FE 28  
0013F8  1  A9 FF 48 A9          set_a 0,$ff     ;pull
0013FC  1  00 28        
0013FE  1  68                   pla
0013FF  1  08 C9 FF D0          tst_a $ff,$ff-zero
001403  1  FE 68 48 C9  
001407  1  FD D0 FE 28  
00140B  1  A9 00 48 A9          set_a $ff,0
00140F  1  FF 28        
001411  1  68                   pla
001412  1  08 C9 00 D0          tst_a 0,zero
001416  1  FE 68 48 C9  
00141A  1  32 D0 FE 28  
00141E  1  A9 FF 48 A9          set_a $fe,$ff
001422  1  FE 28        
001424  1  68                   pla
001425  1  08 C9 01 D0          tst_a 1,$ff-zero-minus
001429  1  FE 68 48 C9  
00142D  1  7D D0 FE 28  
001431  1  A9 00 48 A9          set_a 0,0
001435  1  00 28        
001437  1  68                   pla
001438  1  08 C9 FF D0          tst_a $ff,minus
00143C  1  FE 68 48 C9  
001440  1  B0 D0 FE 28  
001444  1  A9 FF 48 A9          set_a $ff,$ff
001448  1  FF 28        
00144A  1  68                   pla
00144B  1  08 C9 00 D0          tst_a 0,$ff-minus
00144F  1  FE 68 48 C9  
001453  1  7F D0 FE 28  
001457  1  A9 00 48 A9          set_a $fe,0
00145B  1  FE 28        
00145D  1  68                   pla
00145E  1  08 C9 01 D0          tst_a 1,0
001462  1  FE 68 48 C9  
001466  1  30 D0 FE 28  
00146A  1  E0 55                cpx #$55        ;x & y unchanged?
00146C  1  D0 FE                trap_ne
00146E  1  C0 AA                cpy #$aa
001470  1  D0 FE                trap_ne
001472  1  AD 00 02 C9          next_test
001476  1  05 D0 FE A9  
00147A  1  06 8D 00 02  
00147E  1               
00147E  1               ; partial pretest EOR #
00147E  1  A9 00 48 A9          set_a $3c,0
001482  1  3C 28        
001484  1  49 C3                eor #$c3
001486  1  08 C9 FF D0          tst_a $ff,fn
00148A  1  FE 68 48 C9  
00148E  1  B0 D0 FE 28  
001492  1  A9 00 48 A9          set_a $c3,0
001496  1  C3 28        
001498  1  49 C3                eor #$c3
00149A  1  08 C9 00 D0          tst_a 0,fz
00149E  1  FE 68 48 C9  
0014A2  1  32 D0 FE 28  
0014A6  1  AD 00 02 C9          next_test
0014AA  1  06 D0 FE A9  
0014AE  1  07 8D 00 02  
0014B2  1               
0014B2  1               ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
0014B2  1               ; testing NOP
0014B2  1  A2 24                ldx #$24
0014B4  1  A0 42                ldy #$42
0014B6  1  A9 00 48 A9          set_a $18,0
0014BA  1  18 28        
0014BC  1  EA                   nop
0014BD  1  08 C9 18 D0          tst_a $18,0
0014C1  1  FE 68 48 C9  
0014C5  1  30 D0 FE 28  
0014C9  1  E0 24                cpx #$24
0014CB  1  D0 FE                trap_ne
0014CD  1  C0 42                cpy #$42
0014CF  1  D0 FE                trap_ne
0014D1  1  A2 DB                ldx #$db
0014D3  1  A0 BD                ldy #$bd
0014D5  1  A9 FF 48 A9          set_a $e7,$ff
0014D9  1  E7 28        
0014DB  1  EA                   nop
0014DC  1  08 C9 E7 D0          tst_a $e7,$ff
0014E0  1  FE 68 48 C9  
0014E4  1  FF D0 FE 28  
0014E8  1  E0 DB                cpx #$db
0014EA  1  D0 FE                trap_ne
0014EC  1  C0 BD                cpy #$bd
0014EE  1  D0 FE                trap_ne
0014F0  1  AD 00 02 C9          next_test
0014F4  1  07 D0 FE A9  
0014F8  1  08 8D 00 02  
0014FC  1               
0014FC  1               ; jump absolute
0014FC  1  A9 00 48 28          set_stat $0
001500  1  A9 46                lda #'F'
001502  1  A2 41                ldx #'A'
001504  1  A0 52                ldy #'R'        ;N=0, V=0, Z=0, C=0
001506  1  4C 03 43             jmp test_far
001509  1  EA                   nop
00150A  1  EA                   nop
00150B  1  D0 FE                trap_ne         ;runover protection
00150D  1  E8                   inx
00150E  1  E8                   inx
00150F  1               far_ret:
00150F  1  F0 FE                trap_eq         ;returned flags OK?
001511  1  10 FE                trap_pl
001513  1  90 FE                trap_cc
001515  1  50 FE                trap_vc
001517  1  C9 EC                cmp #('F'^$aa)  ;returned registers OK?
001519  1  D0 FE                trap_ne
00151B  1  E0 42                cpx #('A'+1)
00151D  1  D0 FE                trap_ne
00151F  1  C0 4F                cpy #('R'-3)
001521  1  D0 FE                trap_ne
001523  1  CA                   dex
001524  1  C8                   iny
001525  1  C8                   iny
001526  1  C8                   iny
001527  1  49 AA                eor #$aa        ;N=0, V=1, Z=0, C=1
001529  1  4C 32 15             jmp test_near
00152C  1  EA                   nop
00152D  1  EA                   nop
00152E  1  D0 FE                trap_ne         ;runover protection
001530  1  E8                   inx
001531  1  E8                   inx
001532  1               test_near:
001532  1  F0 FE                trap_eq         ;passed flags OK?
001534  1  30 FE                trap_mi
001536  1  90 FE                trap_cc
001538  1  50 FE                trap_vc
00153A  1  C9 46                cmp #'F'        ;passed registers OK?
00153C  1  D0 FE                trap_ne
00153E  1  E0 41                cpx #'A'
001540  1  D0 FE                trap_ne
001542  1  C0 52                cpy #'R'
001544  1  D0 FE                trap_ne
001546  1  AD 00 02 C9          next_test
00154A  1  08 D0 FE A9  
00154E  1  09 8D 00 02  
001552  1               
001552  1               ; jump indirect
001552  1  A9 00 48 28          set_stat 0
001556  1  A9 49                lda #'I'
001558  1  A2 4E                ldx #'N'
00155A  1  A0 44                ldy #'D'        ;N=0, V=0, Z=0, C=0
00155C  1  6C 32 43             jmp (ptr_tst_ind)
00155F  1  EA                   nop
001560  1  D0 FE                trap_ne         ;runover protection
001562  1  88                   dey
001563  1  88                   dey
001564  1               ind_ret:
001564  1  08                   php             ;either SP or Y count will fail, if we do not hit
001565  1  88                   dey
001566  1  88                   dey
001567  1  88                   dey
001568  1  28                   plp
001569  1  F0 FE                trap_eq         ;returned flags OK?
00156B  1  10 FE                trap_pl
00156D  1  90 FE                trap_cc
00156F  1  50 FE                trap_vc
001571  1  C9 E3                cmp #('I'^$aa)  ;returned registers OK?
001573  1  D0 FE                trap_ne
001575  1  E0 4F                cpx #('N'+1)
001577  1  D0 FE                trap_ne
001579  1  C0 3E                cpy #('D'-6)
00157B  1  D0 FE                trap_ne
00157D  1  BA                   tsx             ;SP check
00157E  1  E0 FF                cpx #$ff
001580  1  D0 FE                trap_ne
001582  1  AD 00 02 C9          next_test
001586  1  09 D0 FE A9  
00158A  1  0A 8D 00 02  
00158E  1               
00158E  1               ; jump subroutine & return from subroutine
00158E  1  A9 00 48 28          set_stat 0
001592  1  A9 4A                lda #'J'
001594  1  A2 53                ldx #'S'
001596  1  A0 52                ldy #'R'        ;N=0, V=0, Z=0, C=0
001598  1  20 71 43             jsr test_jsr
00159B  1               jsr_ret = *-1           ;last address of jsr = return address
00159B  1  08                   php             ;either SP or Y count will fail, if we do not hit
00159C  1  88                   dey
00159D  1  88                   dey
00159E  1  88                   dey
00159F  1  28                   plp
0015A0  1  F0 FE                trap_eq         ;returned flags OK?
0015A2  1  10 FE                trap_pl
0015A4  1  90 FE                trap_cc
0015A6  1  50 FE                trap_vc
0015A8  1  C9 E0                cmp #('J'^$aa)  ;returned registers OK?
0015AA  1  D0 FE                trap_ne
0015AC  1  E0 54                cpx #('S'+1)
0015AE  1  D0 FE                trap_ne
0015B0  1  C0 4C                cpy #('R'-6)
0015B2  1  D0 FE                trap_ne
0015B4  1  BA                   tsx             ;sp?
0015B5  1  E0 FF                cpx #$ff
0015B7  1  D0 FE                trap_ne
0015B9  1  AD 00 02 C9          next_test
0015BD  1  0A D0 FE A9  
0015C1  1  0B 8D 00 02  
0015C5  1               
0015C5  1               ; break & return from interrupt
0015C5  1                   .if ROM_vectors = 1
0015C5  1                       load_flag 0     ;with interrupts enabled if allowed!
0015C5  1                       pha
0015C5  1                       lda #'B'
0015C5  1                       ldx #'R'
0015C5  1                       ldy #'K'
0015C5  1                       plp             ;N=0, V=0, Z=0, C=0
0015C5  1                       brk
0015C5  1                   .else
0015C5  1  A9 15                lda #>brk_ret0 ;emulated break
0015C7  1  48                   pha
0015C8  1  A9 DC                lda #<brk_ret0
0015CA  1  48                   pha
0015CB  1  A9 30                load_flag fao    ;set break & unused on stack
0015CD  1  48                   pha
0015CE  1  A9 04                load_flag intdis ;during interrupt
0015D0  1  48                   pha
0015D1  1  A9 42                lda #'B'
0015D3  1  A2 52                ldx #'R'
0015D5  1  A0 4B                ldy #'K'
0015D7  1  28                   plp             ;N=0, V=0, Z=0, C=0
0015D8  1  4C BF 43             jmp irq_trap
0015DB  1                   .endif
0015DB  1  88                   dey             ;should not be executed
0015DC  1               brk_ret0:               ;address of break return
0015DC  1  08                   php             ;either SP or Y count will fail, if we do not hit
0015DD  1  88                   dey
0015DE  1  88                   dey
0015DF  1  88                   dey
0015E0  1  C9 E8                cmp #'B'^$aa    ;returned registers OK?
0015E2  1                       ;the IRQ vector was never executed if A & X stay unmodified
0015E2  1  D0 FE                trap_ne
0015E4  1  E0 53                cpx #'R'+1
0015E6  1  D0 FE                trap_ne
0015E8  1  C0 45                cpy #'K'-6
0015EA  1  D0 FE                trap_ne
0015EC  1  68                   pla             ;returned flags OK (unchanged)?
0015ED  1  C9 30                cmp_flag 0
0015EF  1  D0 FE                trap_ne
0015F1  1  BA                   tsx             ;sp?
0015F2  1  E0 FF                cpx #$ff
0015F4  1  D0 FE                trap_ne
0015F6  1                   .if ROM_vectors = 1
0015F6  1                       load_flag $ff   ;with interrupts disabled if allowed!
0015F6  1                       pha
0015F6  1                       lda #$ff-'B'
0015F6  1                       ldx #$ff-'R'
0015F6  1                       ldy #$ff-'K'
0015F6  1                       plp             ;N=1, V=1, Z=1, C=1
0015F6  1                       brk
0015F6  1                   .else
0015F6  1  A9 16                lda #>brk_ret1 ;emulated break
0015F8  1  48                   pha
0015F9  1  A9 0B                lda #<brk_ret1
0015FB  1  48                   pha
0015FC  1  A9 FF                load_flag $ff
0015FE  1  48                   pha             ;set break & unused on stack
0015FF  1  48                   pha             ;actual flags
001600  1  A9 BD                lda #$ff-'B'
001602  1  A2 AD                ldx #$ff-'R'
001604  1  A0 B4                ldy #$ff-'K'
001606  1  28                   plp             ;N=1, V=1, Z=1, C=1
001607  1  4C BF 43             jmp irq_trap
00160A  1                   .endif
00160A  1  88                   dey             ;should not be executed
00160B  1               brk_ret1:               ;address of break return
00160B  1  08                   php             ;either SP or Y count will fail, if we do not hit
00160C  1  88                   dey
00160D  1  88                   dey
00160E  1  88                   dey
00160F  1  C9 17                cmp #($ff-'B')^$aa  ;returned registers OK?
001611  1                       ;the IRQ vector was never executed if A & X stay unmodified
001611  1  D0 FE                trap_ne
001613  1  E0 AE                cpx #$ff-'R'+1
001615  1  D0 FE                trap_ne
001617  1  C0 AE                cpy #$ff-'K'-6
001619  1  D0 FE                trap_ne
00161B  1  68                   pla             ;returned flags OK (unchanged)?
00161C  1  C9 FF                cmp_flag $ff
00161E  1  D0 FE                trap_ne
001620  1  BA                   tsx             ;sp?
001621  1  E0 FF                cpx #$ff
001623  1  D0 FE                trap_ne
001625  1  AD 00 02 C9          next_test
001629  1  0B D0 FE A9  
00162D  1  0C 8D 00 02  
001631  1               
001631  1               ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
001631  1  A9 FF 48 28          set_stat $ff
001635  1  18                   clc
001636  1  08 68 48 C9          tst_stat $ff-carry
00163A  1  FE D0 FE 28  
00163E  1  38                   sec
00163F  1  08 68 48 C9          tst_stat $ff
001643  1  FF D0 FE 28  
001647  1                   .if I_flag = 3
001647  1  58                   cli
001648  1  08 68 48 C9          tst_stat $ff-intdis
00164C  1  FB D0 FE 28  
001650  1  78                   sei
001651  1  08 68 48 C9          tst_stat $ff
001655  1  FF D0 FE 28  
001659  1                   .endif
001659  1  D8                   cld
00165A  1  08 68 48 C9          tst_stat $ff-decmode
00165E  1  F7 D0 FE 28  
001662  1  F8                   sed
001663  1  08 68 48 C9          tst_stat $ff
001667  1  FF D0 FE 28  
00166B  1  B8                   clv
00166C  1  08 68 48 C9          tst_stat $ff-overfl
001670  1  BF D0 FE 28  
001674  1  A9 00 48 28          set_stat 0
001678  1  08 68 48 C9          tst_stat 0
00167C  1  30 D0 FE 28  
001680  1  38                   sec
001681  1  08 68 48 C9          tst_stat carry
001685  1  31 D0 FE 28  
001689  1  18                   clc
00168A  1  08 68 48 C9          tst_stat 0
00168E  1  30 D0 FE 28  
001692  1                   .if I_flag = 3
001692  1  78                   sei
001693  1  08 68 48 C9          tst_stat intdis
001697  1  34 D0 FE 28  
00169B  1  58                   cli
00169C  1  08 68 48 C9          tst_stat 0
0016A0  1  30 D0 FE 28  
0016A4  1                   .endif
0016A4  1  F8                   sed
0016A5  1  08 68 48 C9          tst_stat decmode
0016A9  1  38 D0 FE 28  
0016AD  1  D8                   cld
0016AE  1  08 68 48 C9          tst_stat 0
0016B2  1  30 D0 FE 28  
0016B6  1  A9 40 48 28          set_stat overfl
0016BA  1  08 68 48 C9          tst_stat overfl
0016BE  1  70 D0 FE 28  
0016C2  1  B8                   clv
0016C3  1  08 68 48 C9          tst_stat 0
0016C7  1  30 D0 FE 28  
0016CB  1  AD 00 02 C9          next_test
0016CF  1  0C D0 FE A9  
0016D3  1  0D 8D 00 02  
0016D7  1               ; testing index register increment/decrement and transfer
0016D7  1               ; INX INY DEX DEY TAX TXA TAY TYA
0016D7  1  A2 FE                ldx #$fe
0016D9  1  A9 FF 48 28          set_stat $ff
0016DD  1  E8                   inx             ;ff
0016DE  1  08 E0 FF D0          tst_x $ff,$ff-zero
0016E2  1  FE 68 48 C9  
0016E6  1  FD D0 FE 28  
0016EA  1  E8                   inx             ;00
0016EB  1  08 E0 00 D0          tst_x 0,$ff-minus
0016EF  1  FE 68 48 C9  
0016F3  1  7F D0 FE 28  
0016F7  1  E8                   inx             ;01
0016F8  1  08 E0 01 D0          tst_x 1,$ff-minus-zero
0016FC  1  FE 68 48 C9  
001700  1  7D D0 FE 28  
001704  1  CA                   dex             ;00
001705  1  08 E0 00 D0          tst_x 0,$ff-minus
001709  1  FE 68 48 C9  
00170D  1  7F D0 FE 28  
001711  1  CA                   dex             ;ff
001712  1  08 E0 FF D0          tst_x $ff,$ff-zero
001716  1  FE 68 48 C9  
00171A  1  FD D0 FE 28  
00171E  1  CA                   dex             ;fe
00171F  1  A9 00 48 28          set_stat 0
001723  1  E8                   inx             ;ff
001724  1  08 E0 FF D0          tst_x $ff,minus
001728  1  FE 68 48 C9  
00172C  1  B0 D0 FE 28  
001730  1  E8                   inx             ;00
001731  1  08 E0 00 D0          tst_x 0,zero
001735  1  FE 68 48 C9  
001739  1  32 D0 FE 28  
00173D  1  E8                   inx             ;01
00173E  1  08 E0 01 D0          tst_x 1,0
001742  1  FE 68 48 C9  
001746  1  30 D0 FE 28  
00174A  1  CA                   dex             ;00
00174B  1  08 E0 00 D0          tst_x 0,zero
00174F  1  FE 68 48 C9  
001753  1  32 D0 FE 28  
001757  1  CA                   dex             ;ff
001758  1  08 E0 FF D0          tst_x $ff,minus
00175C  1  FE 68 48 C9  
001760  1  B0 D0 FE 28  
001764  1               
001764  1  A0 FE                ldy #$fe
001766  1  A9 FF 48 28          set_stat $ff
00176A  1  C8                   iny             ;ff
00176B  1  08 C0 FF D0          tst_y $ff,$ff-zero
00176F  1  FE 68 48 C9  
001773  1  FD D0 FE 28  
001777  1  C8                   iny             ;00
001778  1  08 C0 00 D0          tst_y 0,$ff-minus
00177C  1  FE 68 48 C9  
001780  1  7F D0 FE 28  
001784  1  C8                   iny             ;01
001785  1  08 C0 01 D0          tst_y 1,$ff-minus-zero
001789  1  FE 68 48 C9  
00178D  1  7D D0 FE 28  
001791  1  88                   dey             ;00
001792  1  08 C0 00 D0          tst_y 0,$ff-minus
001796  1  FE 68 48 C9  
00179A  1  7F D0 FE 28  
00179E  1  88                   dey             ;ff
00179F  1  08 C0 FF D0          tst_y $ff,$ff-zero
0017A3  1  FE 68 48 C9  
0017A7  1  FD D0 FE 28  
0017AB  1  88                   dey             ;fe
0017AC  1  A9 00 48 28          set_stat 0
0017B0  1  C8                   iny             ;ff
0017B1  1  08 C0 FF D0          tst_y $ff,0+minus
0017B5  1  FE 68 48 C9  
0017B9  1  B0 D0 FE 28  
0017BD  1  C8                   iny             ;00
0017BE  1  08 C0 00 D0          tst_y 0,zero
0017C2  1  FE 68 48 C9  
0017C6  1  32 D0 FE 28  
0017CA  1  C8                   iny             ;01
0017CB  1  08 C0 01 D0          tst_y 1,0
0017CF  1  FE 68 48 C9  
0017D3  1  30 D0 FE 28  
0017D7  1  88                   dey             ;00
0017D8  1  08 C0 00 D0          tst_y 0,zero
0017DC  1  FE 68 48 C9  
0017E0  1  32 D0 FE 28  
0017E4  1  88                   dey             ;ff
0017E5  1  08 C0 FF D0          tst_y $ff,minus
0017E9  1  FE 68 48 C9  
0017ED  1  B0 D0 FE 28  
0017F1  1               
0017F1  1  A2 FF                ldx #$ff
0017F3  1  A9 FF 48 28          set_stat $ff
0017F7  1  8A                   txa
0017F8  1  08 C9 FF D0          tst_a $ff,$ff-zero
0017FC  1  FE 68 48 C9  
001800  1  FD D0 FE 28  
001804  1  08                   php
001805  1  E8                   inx             ;00
001806  1  28                   plp
001807  1  8A                   txa
001808  1  08 C9 00 D0          tst_a 0,$ff-minus
00180C  1  FE 68 48 C9  
001810  1  7F D0 FE 28  
001814  1  08                   php
001815  1  E8                   inx             ;01
001816  1  28                   plp
001817  1  8A                   txa
001818  1  08 C9 01 D0          tst_a 1,$ff-minus-zero
00181C  1  FE 68 48 C9  
001820  1  7D D0 FE 28  
001824  1  A9 00 48 28          set_stat 0
001828  1  8A                   txa
001829  1  08 C9 01 D0          tst_a 1,0
00182D  1  FE 68 48 C9  
001831  1  30 D0 FE 28  
001835  1  08                   php
001836  1  CA                   dex             ;00
001837  1  28                   plp
001838  1  8A                   txa
001839  1  08 C9 00 D0          tst_a 0,zero
00183D  1  FE 68 48 C9  
001841  1  32 D0 FE 28  
001845  1  08                   php
001846  1  CA                   dex             ;ff
001847  1  28                   plp
001848  1  8A                   txa
001849  1  08 C9 FF D0          tst_a $ff,minus
00184D  1  FE 68 48 C9  
001851  1  B0 D0 FE 28  
001855  1               
001855  1  A0 FF                ldy #$ff
001857  1  A9 FF 48 28          set_stat $ff
00185B  1  98                   tya
00185C  1  08 C9 FF D0          tst_a $ff,$ff-zero
001860  1  FE 68 48 C9  
001864  1  FD D0 FE 28  
001868  1  08                   php
001869  1  C8                   iny             ;00
00186A  1  28                   plp
00186B  1  98                   tya
00186C  1  08 C9 00 D0          tst_a 0,$ff-minus
001870  1  FE 68 48 C9  
001874  1  7F D0 FE 28  
001878  1  08                   php
001879  1  C8                   iny             ;01
00187A  1  28                   plp
00187B  1  98                   tya
00187C  1  08 C9 01 D0          tst_a 1,$ff-minus-zero
001880  1  FE 68 48 C9  
001884  1  7D D0 FE 28  
001888  1  A9 00 48 28          set_stat 0
00188C  1  98                   tya
00188D  1  08 C9 01 D0          tst_a 1,0
001891  1  FE 68 48 C9  
001895  1  30 D0 FE 28  
001899  1  08                   php
00189A  1  88                   dey             ;00
00189B  1  28                   plp
00189C  1  98                   tya
00189D  1  08 C9 00 D0          tst_a 0,zero
0018A1  1  FE 68 48 C9  
0018A5  1  32 D0 FE 28  
0018A9  1  08                   php
0018AA  1  88                   dey             ;ff
0018AB  1  28                   plp
0018AC  1  98                   tya
0018AD  1  08 C9 FF D0          tst_a $ff,minus
0018B1  1  FE 68 48 C9  
0018B5  1  B0 D0 FE 28  
0018B9  1               
0018B9  1  A9 FF                load_flag $ff
0018BB  1  48                   pha
0018BC  1  A2 FF                ldx #$ff        ;ff
0018BE  1  8A                   txa
0018BF  1  28                   plp
0018C0  1  A8                   tay
0018C1  1  08 C0 FF D0          tst_y $ff,$ff-zero
0018C5  1  FE 68 48 C9  
0018C9  1  FD D0 FE 28  
0018CD  1  08                   php
0018CE  1  E8                   inx             ;00
0018CF  1  8A                   txa
0018D0  1  28                   plp
0018D1  1  A8                   tay
0018D2  1  08 C0 00 D0          tst_y 0,$ff-minus
0018D6  1  FE 68 48 C9  
0018DA  1  7F D0 FE 28  
0018DE  1  08                   php
0018DF  1  E8                   inx             ;01
0018E0  1  8A                   txa
0018E1  1  28                   plp
0018E2  1  A8                   tay
0018E3  1  08 C0 01 D0          tst_y 1,$ff-minus-zero
0018E7  1  FE 68 48 C9  
0018EB  1  7D D0 FE 28  
0018EF  1  A9 00                load_flag 0
0018F1  1  48                   pha
0018F2  1  A9 00                lda #0
0018F4  1  8A                   txa
0018F5  1  28                   plp
0018F6  1  A8                   tay
0018F7  1  08 C0 01 D0          tst_y 1,0
0018FB  1  FE 68 48 C9  
0018FF  1  30 D0 FE 28  
001903  1  08                   php
001904  1  CA                   dex             ;00
001905  1  8A                   txa
001906  1  28                   plp
001907  1  A8                   tay
001908  1  08 C0 00 D0          tst_y 0,zero
00190C  1  FE 68 48 C9  
001910  1  32 D0 FE 28  
001914  1  08                   php
001915  1  CA                   dex             ;ff
001916  1  8A                   txa
001917  1  28                   plp
001918  1  A8                   tay
001919  1  08 C0 FF D0          tst_y $ff,minus
00191D  1  FE 68 48 C9  
001921  1  B0 D0 FE 28  
001925  1               
001925  1               
001925  1  A9 FF                load_flag $ff
001927  1  48                   pha
001928  1  A0 FF                ldy #$ff        ;ff
00192A  1  98                   tya
00192B  1  28                   plp
00192C  1  AA                   tax
00192D  1  08 E0 FF D0          tst_x $ff,$ff-zero
001931  1  FE 68 48 C9  
001935  1  FD D0 FE 28  
001939  1  08                   php
00193A  1  C8                   iny             ;00
00193B  1  98                   tya
00193C  1  28                   plp
00193D  1  AA                   tax
00193E  1  08 E0 00 D0          tst_x 0,$ff-minus
001942  1  FE 68 48 C9  
001946  1  7F D0 FE 28  
00194A  1  08                   php
00194B  1  C8                   iny             ;01
00194C  1  98                   tya
00194D  1  28                   plp
00194E  1  AA                   tax
00194F  1  08 E0 01 D0          tst_x 1,$ff-minus-zero
001953  1  FE 68 48 C9  
001957  1  7D D0 FE 28  
00195B  1  A9 00                load_flag 0
00195D  1  48                   pha
00195E  1  A9 00                lda #0          ;preset status
001960  1  98                   tya
001961  1  28                   plp
001962  1  AA                   tax
001963  1  08 E0 01 D0          tst_x 1,0
001967  1  FE 68 48 C9  
00196B  1  30 D0 FE 28  
00196F  1  08                   php
001970  1  88                   dey             ;00
001971  1  98                   tya
001972  1  28                   plp
001973  1  AA                   tax
001974  1  08 E0 00 D0          tst_x 0,zero
001978  1  FE 68 48 C9  
00197C  1  32 D0 FE 28  
001980  1  08                   php
001981  1  88                   dey             ;ff
001982  1  98                   tya
001983  1  28                   plp
001984  1  AA                   tax
001985  1  08 E0 FF D0          tst_x $ff,minus
001989  1  FE 68 48 C9  
00198D  1  B0 D0 FE 28  
001991  1  AD 00 02 C9          next_test
001995  1  0D D0 FE A9  
001999  1  0E 8D 00 02  
00199D  1               
00199D  1               ;TSX sets NZ - TXS does not
00199D  1               ;  This section also tests for proper stack wrap around.
00199D  1  A2 01                ldx #1          ;01
00199F  1  A9 FF 48 28          set_stat $ff
0019A3  1  9A                   txs
0019A4  1  08                   php
0019A5  1  AD 01 01             lda $101
0019A8  1  C9 FF                cmp_flag $ff
0019AA  1  D0 FE                trap_ne
0019AC  1  A9 00 48 28          set_stat 0
0019B0  1  9A                   txs
0019B1  1  08                   php
0019B2  1  AD 01 01             lda $101
0019B5  1  C9 30                cmp_flag 0
0019B7  1  D0 FE                trap_ne
0019B9  1  CA                   dex             ;00
0019BA  1  A9 FF 48 28          set_stat $ff
0019BE  1  9A                   txs
0019BF  1  08                   php
0019C0  1  AD 00 01             lda $100
0019C3  1  C9 FF                cmp_flag $ff
0019C5  1  D0 FE                trap_ne
0019C7  1  A9 00 48 28          set_stat 0
0019CB  1  9A                   txs
0019CC  1  08                   php
0019CD  1  AD 00 01             lda $100
0019D0  1  C9 30                cmp_flag 0
0019D2  1  D0 FE                trap_ne
0019D4  1  CA                   dex             ;ff
0019D5  1  A9 FF 48 28          set_stat $ff
0019D9  1  9A                   txs
0019DA  1  08                   php
0019DB  1  AD FF 01             lda $1ff
0019DE  1  C9 FF                cmp_flag $ff
0019E0  1  D0 FE                trap_ne
0019E2  1  A9 00 48 28          set_stat 0
0019E6  1  9A                   txs
0019E7  1  08                   php
0019E8  1  AD FF 01             lda $1ff
0019EB  1  C9 30                cmp_flag 0
0019ED  1               
0019ED  1  A2 01                ldx #1
0019EF  1  9A                   txs             ;sp=01
0019F0  1  A9 FF 48 28          set_stat $ff
0019F4  1  BA                   tsx             ;clears Z, N
0019F5  1  08                   php             ;sp=00
0019F6  1  E0 01                cpx #1
0019F8  1  D0 FE                trap_ne
0019FA  1  AD 01 01             lda $101
0019FD  1  C9 7D                cmp_flag $ff-minus-zero
0019FF  1  D0 FE                trap_ne
001A01  1  A9 FF 48 28          set_stat $ff
001A05  1  BA                   tsx             ;clears N, sets Z
001A06  1  08                   php             ;sp=ff
001A07  1  E0 00                cpx #0
001A09  1  D0 FE                trap_ne
001A0B  1  AD 00 01             lda $100
001A0E  1  C9 7F                cmp_flag $ff-minus
001A10  1  D0 FE                trap_ne
001A12  1  A9 FF 48 28          set_stat $ff
001A16  1  BA                   tsx             ;clears N, sets Z
001A17  1  08                   php             ;sp=fe
001A18  1  E0 FF                cpx #$ff
001A1A  1  D0 FE                trap_ne
001A1C  1  AD FF 01             lda $1ff
001A1F  1  C9 FD                cmp_flag $ff-zero
001A21  1  D0 FE                trap_ne
001A23  1               
001A23  1  A2 01                ldx #1
001A25  1  9A                   txs             ;sp=01
001A26  1  A9 00 48 28          set_stat 0
001A2A  1  BA                   tsx             ;clears Z, N
001A2B  1  08                   php             ;sp=00
001A2C  1  E0 01                cpx #1
001A2E  1  D0 FE                trap_ne
001A30  1  AD 01 01             lda $101
001A33  1  C9 30                cmp_flag 0
001A35  1  D0 FE                trap_ne
001A37  1  A9 00 48 28          set_stat 0
001A3B  1  BA                   tsx             ;clears N, sets Z
001A3C  1  08                   php             ;sp=ff
001A3D  1  E0 00                cpx #0
001A3F  1  D0 FE                trap_ne
001A41  1  AD 00 01             lda $100
001A44  1  C9 32                cmp_flag zero
001A46  1  D0 FE                trap_ne
001A48  1  A9 00 48 28          set_stat 0
001A4C  1  BA                   tsx             ;clears N, sets Z
001A4D  1  08                   php             ;sp=fe
001A4E  1  E0 FF                cpx #$ff
001A50  1  D0 FE                trap_ne
001A52  1  AD FF 01             lda $1ff
001A55  1  C9 B0                cmp_flag minus
001A57  1  D0 FE                trap_ne
001A59  1  68                   pla             ;sp=ff
001A5A  1  AD 00 02 C9          next_test
001A5E  1  0E D0 FE A9  
001A62  1  0F 8D 00 02  
001A66  1               
001A66  1               ; testing index register load & store LDY LDX STY STX all addressing modes
001A66  1               ; LDX / STX - zp,y / abs,y
001A66  1  A0 03                ldy #3
001A68  1               tldx:
001A68  1  A9 00 48 28          set_stat 0
001A6C  1  B6 15                ldx zp1,y
001A6E  1  08                   php         ;test stores do not alter flags
001A6F  1  8A                   txa
001A70  1  49 C3                eor #$c3
001A72  1  28                   plp
001A73  1  99 03 02             sta abst,y
001A76  1  08                   php         ;flags after load/store sequence
001A77  1  49 C3                eor #$c3
001A79  1  D9 18 02             cmp abs1,y  ;test result
001A7C  1  D0 FE                trap_ne
001A7E  1  68                   pla         ;load status
001A7F  1  49 30                eor_flag 0
001A81  1  D9 1D 02             cmp fLDx,y  ;test flags
001A84  1  D0 FE                trap_ne
001A86  1  88                   dey
001A87  1  10 DF                bpl tldx
001A89  1               
001A89  1  A0 03                ldy #3
001A8B  1               tldx1:
001A8B  1  A9 FF 48 28          set_stat $ff
001A8F  1  B6 15                ldx zp1,y
001A91  1  08                   php         ;test stores do not alter flags
001A92  1  8A                   txa
001A93  1  49 C3                eor #$c3
001A95  1  28                   plp
001A96  1  99 03 02             sta abst,y
001A99  1  08                   php         ;flags after load/store sequence
001A9A  1  49 C3                eor #$c3
001A9C  1  D9 18 02             cmp abs1,y  ;test result
001A9F  1  D0 FE                trap_ne
001AA1  1  68                   pla         ;load status
001AA2  1  49 7D                eor_flag <~fnz ;mask bits not altered
001AA4  1  D9 1D 02             cmp fLDx,y  ;test flags
001AA7  1  D0 FE                trap_ne
001AA9  1  88                   dey
001AAA  1  10 DF                bpl tldx1
001AAC  1               
001AAC  1  A0 03                ldy #3
001AAE  1               tldx2:
001AAE  1  A9 00 48 28          set_stat 0
001AB2  1  BE 18 02             ldx abs1,y
001AB5  1  08                   php         ;test stores do not alter flags
001AB6  1  8A                   txa
001AB7  1  49 C3                eor #$c3
001AB9  1  AA                   tax
001ABA  1  28                   plp
001ABB  1  96 0C                stx zpt,y
001ABD  1  08                   php         ;flags after load/store sequence
001ABE  1  49 C3                eor #$c3
001AC0  1  D9 15 00             cmp zp1,y   ;test result
001AC3  1  D0 FE                trap_ne
001AC5  1  68                   pla         ;load status
001AC6  1  49 30                eor_flag 0
001AC8  1  D9 1D 02             cmp fLDx,y  ;test flags
001ACB  1  D0 FE                trap_ne
001ACD  1  88                   dey
001ACE  1  10 DE                bpl tldx2
001AD0  1               
001AD0  1  A0 03                ldy #3
001AD2  1               tldx3:
001AD2  1  A9 FF 48 28          set_stat $ff
001AD6  1  BE 18 02             ldx abs1,y
001AD9  1  08                   php         ;test stores do not alter flags
001ADA  1  8A                   txa
001ADB  1  49 C3                eor #$c3
001ADD  1  AA                   tax
001ADE  1  28                   plp
001ADF  1  96 0C                stx zpt,y
001AE1  1  08                   php         ;flags after load/store sequence
001AE2  1  49 C3                eor #$c3
001AE4  1  D9 15 00             cmp zp1,y   ;test result
001AE7  1  D0 FE                trap_ne
001AE9  1  68                   pla         ;load status
001AEA  1  49 7D                eor_flag <~fnz ;mask bits not altered
001AEC  1  D9 1D 02             cmp fLDx,y  ;test flags
001AEF  1  D0 FE                trap_ne
001AF1  1  88                   dey
001AF2  1  10 DE                bpl tldx3
001AF4  1               
001AF4  1  A0 03                ldy #3      ;testing store result
001AF6  1  A2 00                ldx #0
001AF8  1  B9 0C 00     tstx:   lda zpt,y
001AFB  1  49 C3                eor #$c3
001AFD  1  D9 15 00             cmp zp1,y
001B00  1  D0 FE                trap_ne     ;store to zp data
001B02  1  96 0C                stx zpt,y   ;clear
001B04  1  B9 03 02             lda abst,y
001B07  1  49 C3                eor #$c3
001B09  1  D9 18 02             cmp abs1,y
001B0C  1  D0 FE                trap_ne     ;store to abs data
001B0E  1  8A                   txa
001B0F  1  99 03 02             sta abst,y  ;clear
001B12  1  88                   dey
001B13  1  10 E3                bpl tstx
001B15  1  AD 00 02 C9          next_test
001B19  1  0F D0 FE A9  
001B1D  1  10 8D 00 02  
001B21  1               
001B21  1               ; indexed wraparound test (only zp should wrap)
001B21  1  A0 FD                ldy #3+$fa
001B23  1  B6 1B        tldx4:  ldx <(zp1-$fa),y   ;wrap on indexed zp
001B25  1  8A                   txa
001B26  1  99 09 01             sta abst-$fa,y      ;no STX abs,y!
001B29  1  88                   dey
001B2A  1  C0 FA                cpy #$fa
001B2C  1  B0 F5                bcs tldx4
001B2E  1  A0 FD                ldy #3+$fa
001B30  1  BE 1E 01     tldx5:  ldx abs1-$fa,y      ;no wrap on indexed abs
001B33  1  96 12                stx <(zpt-$fa),y
001B35  1  88                   dey
001B36  1  C0 FA                cpy #$fa
001B38  1  B0 F6                bcs tldx5
001B3A  1  A0 03                ldy #3      ;testing wraparound result
001B3C  1  A2 00                ldx #0
001B3E  1  B9 0C 00     tstx1:  lda zpt,y
001B41  1  D9 15 00             cmp zp1,y
001B44  1  D0 FE                trap_ne     ;store to zp data
001B46  1  96 0C                stx zpt,y   ;clear
001B48  1  B9 03 02             lda abst,y
001B4B  1  D9 18 02             cmp abs1,y
001B4E  1  D0 FE                trap_ne     ;store to abs data
001B50  1  8A                   txa
001B51  1  99 03 02             sta abst,y  ;clear
001B54  1  88                   dey
001B55  1  10 E7                bpl tstx1
001B57  1  AD 00 02 C9          next_test
001B5B  1  10 D0 FE A9  
001B5F  1  11 8D 00 02  
001B63  1               
001B63  1               ; LDY / STY - zp,x / abs,x
001B63  1  A2 03                ldx #3
001B65  1               tldy:
001B65  1  A9 00 48 28          set_stat 0
001B69  1  B4 15                ldy zp1,x
001B6B  1  08                   php         ;test stores do not alter flags
001B6C  1  98                   tya
001B6D  1  49 C3                eor #$c3
001B6F  1  28                   plp
001B70  1  9D 03 02             sta abst,x
001B73  1  08                   php         ;flags after load/store sequence
001B74  1  49 C3                eor #$c3
001B76  1  DD 18 02             cmp abs1,x  ;test result
001B79  1  D0 FE                trap_ne
001B7B  1  68                   pla         ;load status
001B7C  1  49 30                eor_flag 0
001B7E  1  DD 1D 02             cmp fLDx,x  ;test flags
001B81  1  D0 FE                trap_ne
001B83  1  CA                   dex
001B84  1  10 DF                bpl tldy
001B86  1               
001B86  1  A2 03                ldx #3
001B88  1               tldy1:
001B88  1  A9 FF 48 28          set_stat $ff
001B8C  1  B4 15                ldy zp1,x
001B8E  1  08                   php         ;test stores do not alter flags
001B8F  1  98                   tya
001B90  1  49 C3                eor #$c3
001B92  1  28                   plp
001B93  1  9D 03 02             sta abst,x
001B96  1  08                   php         ;flags after load/store sequence
001B97  1  49 C3                eor #$c3
001B99  1  DD 18 02             cmp abs1,x  ;test result
001B9C  1  D0 FE                trap_ne
001B9E  1  68                   pla         ;load status
001B9F  1  49 7D                eor_flag <~fnz ;mask bits not altered
001BA1  1  DD 1D 02             cmp fLDx,x  ;test flags
001BA4  1  D0 FE                trap_ne
001BA6  1  CA                   dex
001BA7  1  10 DF                bpl tldy1
001BA9  1               
001BA9  1  A2 03                ldx #3
001BAB  1               tldy2:
001BAB  1  A9 00 48 28          set_stat 0
001BAF  1  BC 18 02             ldy abs1,x
001BB2  1  08                   php         ;test stores do not alter flags
001BB3  1  98                   tya
001BB4  1  49 C3                eor #$c3
001BB6  1  A8                   tay
001BB7  1  28                   plp
001BB8  1  94 0C                sty zpt,x
001BBA  1  08                   php         ;flags after load/store sequence
001BBB  1  49 C3                eor #$c3
001BBD  1  D5 15                cmp zp1,x   ;test result
001BBF  1  D0 FE                trap_ne
001BC1  1  68                   pla         ;load status
001BC2  1  49 30                eor_flag 0
001BC4  1  DD 1D 02             cmp fLDx,x  ;test flags
001BC7  1  D0 FE                trap_ne
001BC9  1  CA                   dex
001BCA  1  10 DF                bpl tldy2
001BCC  1               
001BCC  1  A2 03                ldx #3
001BCE  1               tldy3:
001BCE  1  A9 FF 48 28          set_stat $ff
001BD2  1  BC 18 02             ldy abs1,x
001BD5  1  08                   php         ;test stores do not alter flags
001BD6  1  98                   tya
001BD7  1  49 C3                eor #$c3
001BD9  1  A8                   tay
001BDA  1  28                   plp
001BDB  1  94 0C                sty zpt,x
001BDD  1  08                   php         ;flags after load/store sequence
001BDE  1  49 C3                eor #$c3
001BE0  1  D5 15                cmp zp1,x   ;test result
001BE2  1  D0 FE                trap_ne
001BE4  1  68                   pla         ;load status
001BE5  1  49 7D                eor_flag <~fnz ;mask bits not altered
001BE7  1  DD 1D 02             cmp fLDx,x  ;test flags
001BEA  1  D0 FE                trap_ne
001BEC  1  CA                   dex
001BED  1  10 DF                bpl tldy3
001BEF  1               
001BEF  1  A2 03                ldx #3      ;testing store result
001BF1  1  A0 00                ldy #0
001BF3  1  B5 0C        tsty:   lda zpt,x
001BF5  1  49 C3                eor #$c3
001BF7  1  D5 15                cmp zp1,x
001BF9  1  D0 FE                trap_ne     ;store to zp,x data
001BFB  1  94 0C                sty zpt,x   ;clear
001BFD  1  BD 03 02             lda abst,x
001C00  1  49 C3                eor #$c3
001C02  1  DD 18 02             cmp abs1,x
001C05  1  D0 FE                trap_ne     ;store to abs,x data
001C07  1  8A                   txa
001C08  1  9D 03 02             sta abst,x  ;clear
001C0B  1  CA                   dex
001C0C  1  10 E5                bpl tsty
001C0E  1  AD 00 02 C9          next_test
001C12  1  11 D0 FE A9  
001C16  1  12 8D 00 02  
001C1A  1               
001C1A  1               ; indexed wraparound test (only zp should wrap)
001C1A  1  A2 FD                ldx #3+$fa
001C1C  1  B4 1B        tldy4:  ldy <(zp1-$fa),x   ;wrap on indexed zp
001C1E  1  98                   tya
001C1F  1  9D 09 01             sta abst-$fa,x      ;no STX abs,x!
001C22  1  CA                   dex
001C23  1  E0 FA                cpx #$fa
001C25  1  B0 F5                bcs tldy4
001C27  1  A2 FD                ldx #3+$fa
001C29  1  BC 1E 01     tldy5:  ldy abs1-$fa,x      ;no wrap on indexed abs
001C2C  1  94 12                sty <(zpt-$fa),x
001C2E  1  CA                   dex
001C2F  1  E0 FA                cpx #$fa
001C31  1  B0 F6                bcs tldy5
001C33  1  A2 03                ldx #3      ;testing wraparound result
001C35  1  A0 00                ldy #0
001C37  1  B5 0C        tsty1:  lda zpt,x
001C39  1  D5 15                cmp zp1,x
001C3B  1  D0 FE                trap_ne     ;store to zp,x data
001C3D  1  94 0C                sty zpt,x   ;clear
001C3F  1  BD 03 02             lda abst,x
001C42  1  DD 18 02             cmp abs1,x
001C45  1  D0 FE                trap_ne     ;store to abs,x data
001C47  1  8A                   txa
001C48  1  9D 03 02             sta abst,x  ;clear
001C4B  1  CA                   dex
001C4C  1  10 E9                bpl tsty1
001C4E  1  AD 00 02 C9          next_test
001C52  1  12 D0 FE A9  
001C56  1  13 8D 00 02  
001C5A  1               
001C5A  1               ; LDX / STX - zp / abs / #
001C5A  1  A9 00 48 28          set_stat 0
001C5E  1  A6 15                ldx zp1
001C60  1  08                   php         ;test stores do not alter flags
001C61  1  8A                   txa
001C62  1  49 C3                eor #$c3
001C64  1  AA                   tax
001C65  1  28                   plp
001C66  1  8E 03 02             stx abst
001C69  1  08                   php         ;flags after load/store sequence
001C6A  1  49 C3                eor #$c3
001C6C  1  AA                   tax
001C6D  1  E0 C3                cpx #$c3    ;test result
001C6F  1  D0 FE                trap_ne
001C71  1  68                   pla         ;load status
001C72  1  49 30                eor_flag 0
001C74  1  CD 1D 02             cmp fLDx    ;test flags
001C77  1  D0 FE                trap_ne
001C79  1  A9 00 48 28          set_stat 0
001C7D  1  A6 16                ldx zp1+1
001C7F  1  08                   php         ;test stores do not alter flags
001C80  1  8A                   txa
001C81  1  49 C3                eor #$c3
001C83  1  AA                   tax
001C84  1  28                   plp
001C85  1  8E 04 02             stx abst+1
001C88  1  08                   php         ;flags after load/store sequence
001C89  1  49 C3                eor #$c3
001C8B  1  AA                   tax
001C8C  1  E0 82                cpx #$82    ;test result
001C8E  1  D0 FE                trap_ne
001C90  1  68                   pla         ;load status
001C91  1  49 30                eor_flag 0
001C93  1  CD 1E 02             cmp fLDx+1  ;test flags
001C96  1  D0 FE                trap_ne
001C98  1  A9 00 48 28          set_stat 0
001C9C  1  A6 17                ldx zp1+2
001C9E  1  08                   php         ;test stores do not alter flags
001C9F  1  8A                   txa
001CA0  1  49 C3                eor #$c3
001CA2  1  AA                   tax
001CA3  1  28                   plp
001CA4  1  8E 05 02             stx abst+2
001CA7  1  08                   php         ;flags after load/store sequence
001CA8  1  49 C3                eor #$c3
001CAA  1  AA                   tax
001CAB  1  E0 41                cpx #$41    ;test result
001CAD  1  D0 FE                trap_ne
001CAF  1  68                   pla         ;load status
001CB0  1  49 30                eor_flag 0
001CB2  1  CD 1F 02             cmp fLDx+2  ;test flags
001CB5  1  D0 FE                trap_ne
001CB7  1  A9 00 48 28          set_stat 0
001CBB  1  A6 18                ldx zp1+3
001CBD  1  08                   php         ;test stores do not alter flags
001CBE  1  8A                   txa
001CBF  1  49 C3                eor #$c3
001CC1  1  AA                   tax
001CC2  1  28                   plp
001CC3  1  8E 06 02             stx abst+3
001CC6  1  08                   php         ;flags after load/store sequence
001CC7  1  49 C3                eor #$c3
001CC9  1  AA                   tax
001CCA  1  E0 00                cpx #0      ;test result
001CCC  1  D0 FE                trap_ne
001CCE  1  68                   pla         ;load status
001CCF  1  49 30                eor_flag 0
001CD1  1  CD 20 02             cmp fLDx+3  ;test flags
001CD4  1  D0 FE                trap_ne
001CD6  1               
001CD6  1  A9 FF 48 28          set_stat $ff
001CDA  1  A6 15                ldx zp1
001CDC  1  08                   php         ;test stores do not alter flags
001CDD  1  8A                   txa
001CDE  1  49 C3                eor #$c3
001CE0  1  AA                   tax
001CE1  1  28                   plp
001CE2  1  8E 03 02             stx abst
001CE5  1  08                   php         ;flags after load/store sequence
001CE6  1  49 C3                eor #$c3
001CE8  1  AA                   tax
001CE9  1  E0 C3                cpx #$c3    ;test result
001CEB  1  D0 FE                trap_ne     ;
001CED  1  68                   pla         ;load status
001CEE  1  49 7D                eor_flag <~fnz ;mask bits not altered
001CF0  1  CD 1D 02             cmp fLDx    ;test flags
001CF3  1  D0 FE                trap_ne
001CF5  1  A9 FF 48 28          set_stat $ff
001CF9  1  A6 16                ldx zp1+1
001CFB  1  08                   php         ;test stores do not alter flags
001CFC  1  8A                   txa
001CFD  1  49 C3                eor #$c3
001CFF  1  AA                   tax
001D00  1  28                   plp
001D01  1  8E 04 02             stx abst+1
001D04  1  08                   php         ;flags after load/store sequence
001D05  1  49 C3                eor #$c3
001D07  1  AA                   tax
001D08  1  E0 82                cpx #$82    ;test result
001D0A  1  D0 FE                trap_ne
001D0C  1  68                   pla         ;load status
001D0D  1  49 7D                eor_flag <~fnz ;mask bits not altered
001D0F  1  CD 1E 02             cmp fLDx+1  ;test flags
001D12  1  D0 FE                trap_ne
001D14  1  A9 FF 48 28          set_stat $ff
001D18  1  A6 17                ldx zp1+2
001D1A  1  08                   php         ;test stores do not alter flags
001D1B  1  8A                   txa
001D1C  1  49 C3                eor #$c3
001D1E  1  AA                   tax
001D1F  1  28                   plp
001D20  1  8E 05 02             stx abst+2
001D23  1  08                   php         ;flags after load/store sequence
001D24  1  49 C3                eor #$c3
001D26  1  AA                   tax
001D27  1  E0 41                cpx #$41    ;test result
001D29  1  D0 FE                trap_ne     ;
001D2B  1  68                   pla         ;load status
001D2C  1  49 7D                eor_flag <~fnz ;mask bits not altered
001D2E  1  CD 1F 02             cmp fLDx+2  ;test flags
001D31  1  D0 FE                trap_ne
001D33  1  A9 FF 48 28          set_stat $ff
001D37  1  A6 18                ldx zp1+3
001D39  1  08                   php         ;test stores do not alter flags
001D3A  1  8A                   txa
001D3B  1  49 C3                eor #$c3
001D3D  1  AA                   tax
001D3E  1  28                   plp
001D3F  1  8E 06 02             stx abst+3
001D42  1  08                   php         ;flags after load/store sequence
001D43  1  49 C3                eor #$c3
001D45  1  AA                   tax
001D46  1  E0 00                cpx #0      ;test result
001D48  1  D0 FE                trap_ne
001D4A  1  68                   pla         ;load status
001D4B  1  49 7D                eor_flag <~fnz ;mask bits not altered
001D4D  1  CD 20 02             cmp fLDx+3  ;test flags
001D50  1  D0 FE                trap_ne
001D52  1               
001D52  1  A9 00 48 28          set_stat 0
001D56  1  AE 18 02             ldx abs1
001D59  1  08                   php         ;test stores do not alter flags
001D5A  1  8A                   txa
001D5B  1  49 C3                eor #$c3
001D5D  1  AA                   tax
001D5E  1  28                   plp
001D5F  1  86 0C                stx zpt
001D61  1  08                   php         ;flags after load/store sequence
001D62  1  49 C3                eor #$c3
001D64  1  C5 15                cmp zp1     ;test result
001D66  1  D0 FE                trap_ne
001D68  1  68                   pla         ;load status
001D69  1  49 30                eor_flag 0
001D6B  1  CD 1D 02             cmp fLDx    ;test flags
001D6E  1  D0 FE                trap_ne
001D70  1  A9 00 48 28          set_stat 0
001D74  1  AE 19 02             ldx abs1+1
001D77  1  08                   php         ;test stores do not alter flags
001D78  1  8A                   txa
001D79  1  49 C3                eor #$c3
001D7B  1  AA                   tax
001D7C  1  28                   plp
001D7D  1  86 0D                stx zpt+1
001D7F  1  08                   php         ;flags after load/store sequence
001D80  1  49 C3                eor #$c3
001D82  1  C5 16                cmp zp1+1   ;test result
001D84  1  D0 FE                trap_ne
001D86  1  68                   pla         ;load status
001D87  1  49 30                eor_flag 0
001D89  1  CD 1E 02             cmp fLDx+1  ;test flags
001D8C  1  D0 FE                trap_ne
001D8E  1  A9 00 48 28          set_stat 0
001D92  1  AE 1A 02             ldx abs1+2
001D95  1  08                   php         ;test stores do not alter flags
001D96  1  8A                   txa
001D97  1  49 C3                eor #$c3
001D99  1  AA                   tax
001D9A  1  28                   plp
001D9B  1  86 0E                stx zpt+2
001D9D  1  08                   php         ;flags after load/store sequence
001D9E  1  49 C3                eor #$c3
001DA0  1  C5 17                cmp zp1+2   ;test result
001DA2  1  D0 FE                trap_ne
001DA4  1  68                   pla         ;load status
001DA5  1  49 30                eor_flag 0
001DA7  1  CD 1F 02             cmp fLDx+2  ;test flags
001DAA  1  D0 FE                trap_ne
001DAC  1  A9 00 48 28          set_stat 0
001DB0  1  AE 1B 02             ldx abs1+3
001DB3  1  08                   php         ;test stores do not alter flags
001DB4  1  8A                   txa
001DB5  1  49 C3                eor #$c3
001DB7  1  AA                   tax
001DB8  1  28                   plp
001DB9  1  86 0F                stx zpt+3
001DBB  1  08                   php         ;flags after load/store sequence
001DBC  1  49 C3                eor #$c3
001DBE  1  C5 18                cmp zp1+3   ;test result
001DC0  1  D0 FE                trap_ne
001DC2  1  68                   pla         ;load status
001DC3  1  49 30                eor_flag 0
001DC5  1  CD 20 02             cmp fLDx+3  ;test flags
001DC8  1  D0 FE                trap_ne
001DCA  1               
001DCA  1  A9 FF 48 28          set_stat $ff
001DCE  1  AE 18 02             ldx abs1
001DD1  1  08                   php         ;test stores do not alter flags
001DD2  1  8A                   txa
001DD3  1  49 C3                eor #$c3
001DD5  1  AA                   tax
001DD6  1  28                   plp
001DD7  1  86 0C                stx zpt
001DD9  1  08                   php         ;flags after load/store sequence
001DDA  1  49 C3                eor #$c3
001DDC  1  AA                   tax
001DDD  1  E4 15                cpx zp1     ;test result
001DDF  1  D0 FE                trap_ne
001DE1  1  68                   pla         ;load status
001DE2  1  49 7D                eor_flag <~fnz ;mask bits not altered
001DE4  1  CD 1D 02             cmp fLDx    ;test flags
001DE7  1  D0 FE                trap_ne
001DE9  1  A9 FF 48 28          set_stat $ff
001DED  1  AE 19 02             ldx abs1+1
001DF0  1  08                   php         ;test stores do not alter flags
001DF1  1  8A                   txa
001DF2  1  49 C3                eor #$c3
001DF4  1  AA                   tax
001DF5  1  28                   plp
001DF6  1  86 0D                stx zpt+1
001DF8  1  08                   php         ;flags after load/store sequence
001DF9  1  49 C3                eor #$c3
001DFB  1  AA                   tax
001DFC  1  E4 16                cpx zp1+1   ;test result
001DFE  1  D0 FE                trap_ne
001E00  1  68                   pla         ;load status
001E01  1  49 7D                eor_flag <~fnz ;mask bits not altered
001E03  1  CD 1E 02             cmp fLDx+1  ;test flags
001E06  1  D0 FE                trap_ne
001E08  1  A9 FF 48 28          set_stat $ff
001E0C  1  AE 1A 02             ldx abs1+2
001E0F  1  08                   php         ;test stores do not alter flags
001E10  1  8A                   txa
001E11  1  49 C3                eor #$c3
001E13  1  AA                   tax
001E14  1  28                   plp
001E15  1  86 0E                stx zpt+2
001E17  1  08                   php         ;flags after load/store sequence
001E18  1  49 C3                eor #$c3
001E1A  1  AA                   tax
001E1B  1  E4 17                cpx zp1+2   ;test result
001E1D  1  D0 FE                trap_ne
001E1F  1  68                   pla         ;load status
001E20  1  49 7D                eor_flag <~fnz ;mask bits not altered
001E22  1  CD 1F 02             cmp fLDx+2  ;test flags
001E25  1  D0 FE                trap_ne
001E27  1  A9 FF 48 28          set_stat $ff
001E2B  1  AE 1B 02             ldx abs1+3
001E2E  1  08                   php         ;test stores do not alter flags
001E2F  1  8A                   txa
001E30  1  49 C3                eor #$c3
001E32  1  AA                   tax
001E33  1  28                   plp
001E34  1  86 0F                stx zpt+3
001E36  1  08                   php         ;flags after load/store sequence
001E37  1  49 C3                eor #$c3
001E39  1  AA                   tax
001E3A  1  E4 18                cpx zp1+3   ;test result
001E3C  1  D0 FE                trap_ne
001E3E  1  68                   pla         ;load status
001E3F  1  49 7D                eor_flag <~fnz ;mask bits not altered
001E41  1  CD 20 02             cmp fLDx+3  ;test flags
001E44  1  D0 FE                trap_ne
001E46  1               
001E46  1  A9 00 48 28          set_stat 0
001E4A  1  A2 C3                ldx #$c3
001E4C  1  08                   php
001E4D  1  EC 18 02             cpx abs1    ;test result
001E50  1  D0 FE                trap_ne
001E52  1  68                   pla         ;load status
001E53  1  49 30                eor_flag 0
001E55  1  CD 1D 02             cmp fLDx    ;test flags
001E58  1  D0 FE                trap_ne
001E5A  1  A9 00 48 28          set_stat 0
001E5E  1  A2 82                ldx #$82
001E60  1  08                   php
001E61  1  EC 19 02             cpx abs1+1  ;test result
001E64  1  D0 FE                trap_ne
001E66  1  68                   pla         ;load status
001E67  1  49 30                eor_flag 0
001E69  1  CD 1E 02             cmp fLDx+1  ;test flags
001E6C  1  D0 FE                trap_ne
001E6E  1  A9 00 48 28          set_stat 0
001E72  1  A2 41                ldx #$41
001E74  1  08                   php
001E75  1  EC 1A 02             cpx abs1+2  ;test result
001E78  1  D0 FE                trap_ne
001E7A  1  68                   pla         ;load status
001E7B  1  49 30                eor_flag 0
001E7D  1  CD 1F 02             cmp fLDx+2  ;test flags
001E80  1  D0 FE                trap_ne
001E82  1  A9 00 48 28          set_stat 0
001E86  1  A2 00                ldx #0
001E88  1  08                   php
001E89  1  EC 1B 02             cpx abs1+3  ;test result
001E8C  1  D0 FE                trap_ne
001E8E  1  68                   pla         ;load status
001E8F  1  49 30                eor_flag 0
001E91  1  CD 20 02             cmp fLDx+3  ;test flags
001E94  1  D0 FE                trap_ne
001E96  1               
001E96  1  A9 FF 48 28          set_stat $ff
001E9A  1  A2 C3                ldx #$c3
001E9C  1  08                   php
001E9D  1  EC 18 02             cpx abs1    ;test result
001EA0  1  D0 FE                trap_ne
001EA2  1  68                   pla         ;load status
001EA3  1  49 7D                eor_flag <~fnz ;mask bits not altered
001EA5  1  CD 1D 02             cmp fLDx    ;test flags
001EA8  1  D0 FE                trap_ne
001EAA  1  A9 FF 48 28          set_stat $ff
001EAE  1  A2 82                ldx #$82
001EB0  1  08                   php
001EB1  1  EC 19 02             cpx abs1+1  ;test result
001EB4  1  D0 FE                trap_ne
001EB6  1  68                   pla         ;load status
001EB7  1  49 7D                eor_flag <~fnz ;mask bits not altered
001EB9  1  CD 1E 02             cmp fLDx+1  ;test flags
001EBC  1  D0 FE                trap_ne
001EBE  1  A9 FF 48 28          set_stat $ff
001EC2  1  A2 41                ldx #$41
001EC4  1  08                   php
001EC5  1  EC 1A 02             cpx abs1+2  ;test result
001EC8  1  D0 FE                trap_ne
001ECA  1  68                   pla         ;load status
001ECB  1  49 7D                eor_flag <~fnz ;mask bits not altered
001ECD  1  CD 1F 02             cmp fLDx+2  ;test flags
001ED0  1  D0 FE                trap_ne
001ED2  1  A9 FF 48 28          set_stat $ff
001ED6  1  A2 00                ldx #0
001ED8  1  08                   php
001ED9  1  EC 1B 02             cpx abs1+3  ;test result
001EDC  1  D0 FE                trap_ne
001EDE  1  68                   pla         ;load status
001EDF  1  49 7D                eor_flag <~fnz ;mask bits not altered
001EE1  1  CD 20 02             cmp fLDx+3  ;test flags
001EE4  1  D0 FE                trap_ne
001EE6  1               
001EE6  1  A2 00                ldx #0
001EE8  1  A5 0C                lda zpt
001EEA  1  49 C3                eor #$c3
001EEC  1  C5 15                cmp zp1
001EEE  1  D0 FE                trap_ne     ;store to zp data
001EF0  1  86 0C                stx zpt     ;clear
001EF2  1  AD 03 02             lda abst
001EF5  1  49 C3                eor #$c3
001EF7  1  CD 18 02             cmp abs1
001EFA  1  D0 FE                trap_ne     ;store to abs data
001EFC  1  8E 03 02             stx abst    ;clear
001EFF  1  A5 0D                lda zpt+1
001F01  1  49 C3                eor #$c3
001F03  1  C5 16                cmp zp1+1
001F05  1  D0 FE                trap_ne     ;store to zp data
001F07  1  86 0D                stx zpt+1   ;clear
001F09  1  AD 04 02             lda abst+1
001F0C  1  49 C3                eor #$c3
001F0E  1  CD 19 02             cmp abs1+1
001F11  1  D0 FE                trap_ne     ;store to abs data
001F13  1  8E 04 02             stx abst+1  ;clear
001F16  1  A5 0E                lda zpt+2
001F18  1  49 C3                eor #$c3
001F1A  1  C5 17                cmp zp1+2
001F1C  1  D0 FE                trap_ne     ;store to zp data
001F1E  1  86 0E                stx zpt+2   ;clear
001F20  1  AD 05 02             lda abst+2
001F23  1  49 C3                eor #$c3
001F25  1  CD 1A 02             cmp abs1+2
001F28  1  D0 FE                trap_ne     ;store to abs data
001F2A  1  8E 05 02             stx abst+2  ;clear
001F2D  1  A5 0F                lda zpt+3
001F2F  1  49 C3                eor #$c3
001F31  1  C5 18                cmp zp1+3
001F33  1  D0 FE                trap_ne     ;store to zp data
001F35  1  86 0F                stx zpt+3   ;clear
001F37  1  AD 06 02             lda abst+3
001F3A  1  49 C3                eor #$c3
001F3C  1  CD 1B 02             cmp abs1+3
001F3F  1  D0 FE                trap_ne     ;store to abs data
001F41  1  8E 06 02             stx abst+3  ;clear
001F44  1  AD 00 02 C9          next_test
001F48  1  13 D0 FE A9  
001F4C  1  14 8D 00 02  
001F50  1               
001F50  1               ; LDY / STY - zp / abs / #
001F50  1  A9 00 48 28          set_stat 0
001F54  1  A4 15                ldy zp1
001F56  1  08                   php         ;test stores do not alter flags
001F57  1  98                   tya
001F58  1  49 C3                eor #$c3
001F5A  1  A8                   tay
001F5B  1  28                   plp
001F5C  1  8C 03 02             sty abst
001F5F  1  08                   php         ;flags after load/store sequence
001F60  1  49 C3                eor #$c3
001F62  1  A8                   tay
001F63  1  C0 C3                cpy #$c3    ;test result
001F65  1  D0 FE                trap_ne
001F67  1  68                   pla         ;load status
001F68  1  49 30                eor_flag 0
001F6A  1  CD 1D 02             cmp fLDx    ;test flags
001F6D  1  D0 FE                trap_ne
001F6F  1  A9 00 48 28          set_stat 0
001F73  1  A4 16                ldy zp1+1
001F75  1  08                   php         ;test stores do not alter flags
001F76  1  98                   tya
001F77  1  49 C3                eor #$c3
001F79  1  A8                   tay
001F7A  1  28                   plp
001F7B  1  8C 04 02             sty abst+1
001F7E  1  08                   php         ;flags after load/store sequence
001F7F  1  49 C3                eor #$c3
001F81  1  A8                   tay
001F82  1  C0 82                cpy #$82    ;test result
001F84  1  D0 FE                trap_ne
001F86  1  68                   pla         ;load status
001F87  1  49 30                eor_flag 0
001F89  1  CD 1E 02             cmp fLDx+1  ;test flags
001F8C  1  D0 FE                trap_ne
001F8E  1  A9 00 48 28          set_stat 0
001F92  1  A4 17                ldy zp1+2
001F94  1  08                   php         ;test stores do not alter flags
001F95  1  98                   tya
001F96  1  49 C3                eor #$c3
001F98  1  A8                   tay
001F99  1  28                   plp
001F9A  1  8C 05 02             sty abst+2
001F9D  1  08                   php         ;flags after load/store sequence
001F9E  1  49 C3                eor #$c3
001FA0  1  A8                   tay
001FA1  1  C0 41                cpy #$41    ;test result
001FA3  1  D0 FE                trap_ne
001FA5  1  68                   pla         ;load status
001FA6  1  49 30                eor_flag 0
001FA8  1  CD 1F 02             cmp fLDx+2  ;test flags
001FAB  1  D0 FE                trap_ne
001FAD  1  A9 00 48 28          set_stat 0
001FB1  1  A4 18                ldy zp1+3
001FB3  1  08                   php         ;test stores do not alter flags
001FB4  1  98                   tya
001FB5  1  49 C3                eor #$c3
001FB7  1  A8                   tay
001FB8  1  28                   plp
001FB9  1  8C 06 02             sty abst+3
001FBC  1  08                   php         ;flags after load/store sequence
001FBD  1  49 C3                eor #$c3
001FBF  1  A8                   tay
001FC0  1  C0 00                cpy #0      ;test result
001FC2  1  D0 FE                trap_ne
001FC4  1  68                   pla         ;load status
001FC5  1  49 30                eor_flag 0
001FC7  1  CD 20 02             cmp fLDx+3  ;test flags
001FCA  1  D0 FE                trap_ne
001FCC  1               
001FCC  1  A9 FF 48 28          set_stat $ff
001FD0  1  A4 15                ldy zp1
001FD2  1  08                   php         ;test stores do not alter flags
001FD3  1  98                   tya
001FD4  1  49 C3                eor #$c3
001FD6  1  A8                   tay
001FD7  1  28                   plp
001FD8  1  8C 03 02             sty abst
001FDB  1  08                   php         ;flags after load/store sequence
001FDC  1  49 C3                eor #$c3
001FDE  1  A8                   tay
001FDF  1  C0 C3                cpy #$c3    ;test result
001FE1  1  D0 FE                trap_ne
001FE3  1  68                   pla         ;load status
001FE4  1  49 7D                eor_flag <~fnz ;mask bits not altered
001FE6  1  CD 1D 02             cmp fLDx    ;test flags
001FE9  1  D0 FE                trap_ne
001FEB  1  A9 FF 48 28          set_stat $ff
001FEF  1  A4 16                ldy zp1+1
001FF1  1  08                   php         ;test stores do not alter flags
001FF2  1  98                   tya
001FF3  1  49 C3                eor #$c3
001FF5  1  A8                   tay
001FF6  1  28                   plp
001FF7  1  8C 04 02             sty abst+1
001FFA  1  08                   php         ;flags after load/store sequence
001FFB  1  49 C3                eor #$c3
001FFD  1  A8                   tay
001FFE  1  C0 82                cpy #$82   ;test result
002000  1  D0 FE                trap_ne
002002  1  68                   pla         ;load status
002003  1  49 7D                eor_flag <~fnz ;mask bits not altered
002005  1  CD 1E 02             cmp fLDx+1  ;test flags
002008  1  D0 FE                trap_ne
00200A  1  A9 FF 48 28          set_stat $ff
00200E  1  A4 17                ldy zp1+2
002010  1  08                   php         ;test stores do not alter flags
002011  1  98                   tya
002012  1  49 C3                eor #$c3
002014  1  A8                   tay
002015  1  28                   plp
002016  1  8C 05 02             sty abst+2
002019  1  08                   php         ;flags after load/store sequence
00201A  1  49 C3                eor #$c3
00201C  1  A8                   tay
00201D  1  C0 41                cpy #$41    ;test result
00201F  1  D0 FE                trap_ne
002021  1  68                   pla         ;load status
002022  1  49 7D                eor_flag <~fnz ;mask bits not altered
002024  1  CD 1F 02             cmp fLDx+2  ;test flags
002027  1  D0 FE                trap_ne
002029  1  A9 FF 48 28          set_stat $ff
00202D  1  A4 18                ldy zp1+3
00202F  1  08                   php         ;test stores do not alter flags
002030  1  98                   tya
002031  1  49 C3                eor #$c3
002033  1  A8                   tay
002034  1  28                   plp
002035  1  8C 06 02             sty abst+3
002038  1  08                   php         ;flags after load/store sequence
002039  1  49 C3                eor #$c3
00203B  1  A8                   tay
00203C  1  C0 00                cpy #0      ;test result
00203E  1  D0 FE                trap_ne
002040  1  68                   pla         ;load status
002041  1  49 7D                eor_flag <~fnz ;mask bits not altered
002043  1  CD 20 02             cmp fLDx+3  ;test flags
002046  1  D0 FE                trap_ne
002048  1               
002048  1  A9 00 48 28          set_stat 0
00204C  1  AC 18 02             ldy abs1
00204F  1  08                   php         ;test stores do not alter flags
002050  1  98                   tya
002051  1  49 C3                eor #$c3
002053  1  A8                   tay
002054  1  28                   plp
002055  1  84 0C                sty zpt
002057  1  08                   php         ;flags after load/store sequence
002058  1  49 C3                eor #$c3
00205A  1  A8                   tay
00205B  1  C4 15                cpy zp1     ;test result
00205D  1  D0 FE                trap_ne
00205F  1  68                   pla         ;load status
002060  1  49 30                eor_flag 0
002062  1  CD 1D 02             cmp fLDx    ;test flags
002065  1  D0 FE                trap_ne
002067  1  A9 00 48 28          set_stat 0
00206B  1  AC 19 02             ldy abs1+1
00206E  1  08                   php         ;test stores do not alter flags
00206F  1  98                   tya
002070  1  49 C3                eor #$c3
002072  1  A8                   tay
002073  1  28                   plp
002074  1  84 0D                sty zpt+1
002076  1  08                   php         ;flags after load/store sequence
002077  1  49 C3                eor #$c3
002079  1  A8                   tay
00207A  1  C4 16                cpy zp1+1   ;test result
00207C  1  D0 FE                trap_ne
00207E  1  68                   pla         ;load status
00207F  1  49 30                eor_flag 0
002081  1  CD 1E 02             cmp fLDx+1  ;test flags
002084  1  D0 FE                trap_ne
002086  1  A9 00 48 28          set_stat 0
00208A  1  AC 1A 02             ldy abs1+2
00208D  1  08                   php         ;test stores do not alter flags
00208E  1  98                   tya
00208F  1  49 C3                eor #$c3
002091  1  A8                   tay
002092  1  28                   plp
002093  1  84 0E                sty zpt+2
002095  1  08                   php         ;flags after load/store sequence
002096  1  49 C3                eor #$c3
002098  1  A8                   tay
002099  1  C4 17                cpy zp1+2   ;test result
00209B  1  D0 FE                trap_ne
00209D  1  68                   pla         ;load status
00209E  1  49 30                eor_flag 0
0020A0  1  CD 1F 02             cmp fLDx+2  ;test flags
0020A3  1  D0 FE                trap_ne
0020A5  1  A9 00 48 28          set_stat 0
0020A9  1  AC 1B 02             ldy abs1+3
0020AC  1  08                   php         ;test stores do not alter flags
0020AD  1  98                   tya
0020AE  1  49 C3                eor #$c3
0020B0  1  A8                   tay
0020B1  1  28                   plp
0020B2  1  84 0F                sty zpt+3
0020B4  1  08                   php         ;flags after load/store sequence
0020B5  1  49 C3                eor #$c3
0020B7  1  A8                   tay
0020B8  1  C4 18                cpy zp1+3   ;test result
0020BA  1  D0 FE                trap_ne
0020BC  1  68                   pla         ;load status
0020BD  1  49 30                eor_flag 0
0020BF  1  CD 20 02             cmp fLDx+3  ;test flags
0020C2  1  D0 FE                trap_ne
0020C4  1               
0020C4  1  A9 FF 48 28          set_stat $ff
0020C8  1  AC 18 02             ldy abs1
0020CB  1  08                   php         ;test stores do not alter flags
0020CC  1  98                   tya
0020CD  1  49 C3                eor #$c3
0020CF  1  A8                   tay
0020D0  1  28                   plp
0020D1  1  84 0C                sty zpt
0020D3  1  08                   php         ;flags after load/store sequence
0020D4  1  49 C3                eor #$c3
0020D6  1  A8                   tay
0020D7  1  C5 15                cmp zp1     ;test result
0020D9  1  D0 FE                trap_ne
0020DB  1  68                   pla         ;load status
0020DC  1  49 7D                eor_flag <~fnz ;mask bits not altered
0020DE  1  CD 1D 02             cmp fLDx    ;test flags
0020E1  1  D0 FE                trap_ne
0020E3  1  A9 FF 48 28          set_stat $ff
0020E7  1  AC 19 02             ldy abs1+1
0020EA  1  08                   php         ;test stores do not alter flags
0020EB  1  98                   tya
0020EC  1  49 C3                eor #$c3
0020EE  1  A8                   tay
0020EF  1  28                   plp
0020F0  1  84 0D                sty zpt+1
0020F2  1  08                   php         ;flags after load/store sequence
0020F3  1  49 C3                eor #$c3
0020F5  1  A8                   tay
0020F6  1  C5 16                cmp zp1+1   ;test result
0020F8  1  D0 FE                trap_ne
0020FA  1  68                   pla         ;load status
0020FB  1  49 7D                eor_flag <~fnz ;mask bits not altered
0020FD  1  CD 1E 02             cmp fLDx+1  ;test flags
002100  1  D0 FE                trap_ne
002102  1  A9 FF 48 28          set_stat $ff
002106  1  AC 1A 02             ldy abs1+2
002109  1  08                   php         ;test stores do not alter flags
00210A  1  98                   tya
00210B  1  49 C3                eor #$c3
00210D  1  A8                   tay
00210E  1  28                   plp
00210F  1  84 0E                sty zpt+2
002111  1  08                   php         ;flags after load/store sequence
002112  1  49 C3                eor #$c3
002114  1  A8                   tay
002115  1  C5 17                cmp zp1+2   ;test result
002117  1  D0 FE                trap_ne
002119  1  68                   pla         ;load status
00211A  1  49 7D                eor_flag <~fnz ;mask bits not altered
00211C  1  CD 1F 02             cmp fLDx+2  ;test flags
00211F  1  D0 FE                trap_ne
002121  1  A9 FF 48 28          set_stat $ff
002125  1  AC 1B 02             ldy abs1+3
002128  1  08                   php         ;test stores do not alter flags
002129  1  98                   tya
00212A  1  49 C3                eor #$c3
00212C  1  A8                   tay
00212D  1  28                   plp
00212E  1  84 0F                sty zpt+3
002130  1  08                   php         ;flags after load/store sequence
002131  1  49 C3                eor #$c3
002133  1  A8                   tay
002134  1  C5 18                cmp zp1+3   ;test result
002136  1  D0 FE                trap_ne
002138  1  68                   pla         ;load status
002139  1  49 7D                eor_flag <~fnz ;mask bits not altered
00213B  1  CD 20 02             cmp fLDx+3  ;test flags
00213E  1  D0 FE                trap_ne
002140  1               
002140  1               
002140  1  A9 00 48 28          set_stat 0
002144  1  A0 C3                ldy #$c3
002146  1  08                   php
002147  1  CC 18 02             cpy abs1    ;test result
00214A  1  D0 FE                trap_ne
00214C  1  68                   pla         ;load status
00214D  1  49 30                eor_flag 0
00214F  1  CD 1D 02             cmp fLDx    ;test flags
002152  1  D0 FE                trap_ne
002154  1  A9 00 48 28          set_stat 0
002158  1  A0 82                ldy #$82
00215A  1  08                   php
00215B  1  CC 19 02             cpy abs1+1  ;test result
00215E  1  D0 FE                trap_ne
002160  1  68                   pla         ;load status
002161  1  49 30                eor_flag 0
002163  1  CD 1E 02             cmp fLDx+1  ;test flags
002166  1  D0 FE                trap_ne
002168  1  A9 00 48 28          set_stat 0
00216C  1  A0 41                ldy #$41
00216E  1  08                   php
00216F  1  CC 1A 02             cpy abs1+2  ;test result
002172  1  D0 FE                trap_ne
002174  1  68                   pla         ;load status
002175  1  49 30                eor_flag 0
002177  1  CD 1F 02             cmp fLDx+2  ;test flags
00217A  1  D0 FE                trap_ne
00217C  1  A9 00 48 28          set_stat 0
002180  1  A0 00                ldy #0
002182  1  08                   php
002183  1  CC 1B 02             cpy abs1+3  ;test result
002186  1  D0 FE                trap_ne
002188  1  68                   pla         ;load status
002189  1  49 30                eor_flag 0
00218B  1  CD 20 02             cmp fLDx+3  ;test flags
00218E  1  D0 FE                trap_ne
002190  1               
002190  1  A9 FF 48 28          set_stat $ff
002194  1  A0 C3                ldy #$c3
002196  1  08                   php
002197  1  CC 18 02             cpy abs1    ;test result
00219A  1  D0 FE                trap_ne
00219C  1  68                   pla         ;load status
00219D  1  49 7D                eor_flag <~fnz ;mask bits not altered
00219F  1  CD 1D 02             cmp fLDx    ;test flags
0021A2  1  D0 FE                trap_ne
0021A4  1  A9 FF 48 28          set_stat $ff
0021A8  1  A0 82                ldy #$82
0021AA  1  08                   php
0021AB  1  CC 19 02             cpy abs1+1  ;test result
0021AE  1  D0 FE                trap_ne
0021B0  1  68                   pla         ;load status
0021B1  1  49 7D                eor_flag <~fnz ;mask bits not altered
0021B3  1  CD 1E 02             cmp fLDx+1  ;test flags
0021B6  1  D0 FE                trap_ne
0021B8  1  A9 FF 48 28          set_stat $ff
0021BC  1  A0 41                ldy #$41
0021BE  1  08                   php
0021BF  1  CC 1A 02             cpy abs1+2   ;test result
0021C2  1  D0 FE                trap_ne
0021C4  1  68                   pla         ;load status
0021C5  1  49 7D                eor_flag <~fnz ;mask bits not altered
0021C7  1  CD 1F 02             cmp fLDx+2  ;test flags
0021CA  1  D0 FE                trap_ne
0021CC  1  A9 FF 48 28          set_stat $ff
0021D0  1  A0 00                ldy #0
0021D2  1  08                   php
0021D3  1  CC 1B 02             cpy abs1+3  ;test result
0021D6  1  D0 FE                trap_ne
0021D8  1  68                   pla         ;load status
0021D9  1  49 7D                eor_flag <~fnz ;mask bits not altered
0021DB  1  CD 20 02             cmp fLDx+3  ;test flags
0021DE  1  D0 FE                trap_ne
0021E0  1               
0021E0  1  A0 00                ldy #0
0021E2  1  A5 0C                lda zpt
0021E4  1  49 C3                eor #$c3
0021E6  1  C5 15                cmp zp1
0021E8  1  D0 FE                trap_ne     ;store to zp   data
0021EA  1  84 0C                sty zpt     ;clear
0021EC  1  AD 03 02             lda abst
0021EF  1  49 C3                eor #$c3
0021F1  1  CD 18 02             cmp abs1
0021F4  1  D0 FE                trap_ne     ;store to abs   data
0021F6  1  8C 03 02             sty abst    ;clear
0021F9  1  A5 0D                lda zpt+1
0021FB  1  49 C3                eor #$c3
0021FD  1  C5 16                cmp zp1+1
0021FF  1  D0 FE                trap_ne     ;store to zp+1 data
002201  1  84 0D                sty zpt+1   ;clear
002203  1  AD 04 02             lda abst+1
002206  1  49 C3                eor #$c3
002208  1  CD 19 02             cmp abs1+1
00220B  1  D0 FE                trap_ne     ;store to abs+1 data
00220D  1  8C 04 02             sty abst+1  ;clear
002210  1  A5 0E                lda zpt+2
002212  1  49 C3                eor #$c3
002214  1  C5 17                cmp zp1+2
002216  1  D0 FE                trap_ne     ;store to zp+2 data
002218  1  84 0E                sty zpt+2   ;clear
00221A  1  AD 05 02             lda abst+2
00221D  1  49 C3                eor #$c3
00221F  1  CD 1A 02             cmp abs1+2
002222  1  D0 FE                trap_ne     ;store to abs+2 data
002224  1  8C 05 02             sty abst+2  ;clear
002227  1  A5 0F                lda zpt+3
002229  1  49 C3                eor #$c3
00222B  1  C5 18                cmp zp1+3
00222D  1  D0 FE                trap_ne     ;store to zp+3 data
00222F  1  84 0F                sty zpt+3   ;clear
002231  1  AD 06 02             lda abst+3
002234  1  49 C3                eor #$c3
002236  1  CD 1B 02             cmp abs1+3
002239  1  D0 FE                trap_ne     ;store to abs+3 data
00223B  1  8C 06 02             sty abst+3  ;clear
00223E  1  AD 00 02 C9          next_test
002242  1  14 D0 FE A9  
002246  1  15 8D 00 02  
00224A  1               
00224A  1               ; testing load / store accumulator LDA / STA all addressing modes
00224A  1               ; LDA / STA - zp,x / abs,x
00224A  1  A2 03                ldx #3
00224C  1               tldax:
00224C  1  A9 00 48 28          set_stat 0
002250  1  B5 15                lda zp1,x
002252  1  08                   php         ;test stores do not alter flags
002253  1  49 C3                eor #$c3
002255  1  28                   plp
002256  1  9D 03 02             sta abst,x
002259  1  08                   php         ;flags after load/store sequence
00225A  1  49 C3                eor #$c3
00225C  1  DD 18 02             cmp abs1,x  ;test result
00225F  1  D0 FE                trap_ne
002261  1  68                   pla         ;load status
002262  1  49 30                eor_flag 0
002264  1  DD 1D 02             cmp fLDx,x  ;test flags
002267  1  D0 FE                trap_ne
002269  1  CA                   dex
00226A  1  10 E0                bpl tldax
00226C  1               
00226C  1  A2 03                ldx #3
00226E  1               tldax1:
00226E  1  A9 FF 48 28          set_stat $ff
002272  1  B5 15                lda zp1,x
002274  1  08                   php         ;test stores do not alter flags
002275  1  49 C3                eor #$c3
002277  1  28                   plp
002278  1  9D 03 02             sta abst,x
00227B  1  08                   php         ;flags after load/store sequence
00227C  1  49 C3                eor #$c3
00227E  1  DD 18 02             cmp abs1,x   ;test result
002281  1  D0 FE                trap_ne
002283  1  68                   pla         ;load status
002284  1  49 7D                eor_flag <~fnz ;mask bits not altered
002286  1  DD 1D 02             cmp fLDx,x  ;test flags
002289  1  D0 FE                trap_ne
00228B  1  CA                   dex
00228C  1  10 E0                bpl tldax1
00228E  1               
00228E  1  A2 03                ldx #3
002290  1               tldax2:
002290  1  A9 00 48 28          set_stat 0
002294  1  BD 18 02             lda abs1,x
002297  1  08                   php         ;test stores do not alter flags
002298  1  49 C3                eor #$c3
00229A  1  28                   plp
00229B  1  95 0C                sta zpt,x
00229D  1  08                   php         ;flags after load/store sequence
00229E  1  49 C3                eor #$c3
0022A0  1  D5 15                cmp zp1,x   ;test result
0022A2  1  D0 FE                trap_ne
0022A4  1  68                   pla         ;load status
0022A5  1  49 30                eor_flag 0
0022A7  1  DD 1D 02             cmp fLDx,x  ;test flags
0022AA  1  D0 FE                trap_ne
0022AC  1  CA                   dex
0022AD  1  10 E1                bpl tldax2
0022AF  1               
0022AF  1  A2 03                ldx #3
0022B1  1               tldax3:
0022B1  1  A9 FF 48 28          set_stat $ff
0022B5  1  BD 18 02             lda abs1,x
0022B8  1  08                   php         ;test stores do not alter flags
0022B9  1  49 C3                eor #$c3
0022BB  1  28                   plp
0022BC  1  95 0C                sta zpt,x
0022BE  1  08                   php         ;flags after load/store sequence
0022BF  1  49 C3                eor #$c3
0022C1  1  D5 15                cmp zp1,x   ;test result
0022C3  1  D0 FE                trap_ne
0022C5  1  68                   pla         ;load status
0022C6  1  49 7D                eor_flag <~fnz ;mask bits not altered
0022C8  1  DD 1D 02             cmp fLDx,x  ;test flags
0022CB  1  D0 FE                trap_ne
0022CD  1  CA                   dex
0022CE  1  10 E1                bpl tldax3
0022D0  1               
0022D0  1  A2 03                ldx #3      ;testing store result
0022D2  1  A0 00                ldy #0
0022D4  1  B5 0C        tstax:  lda zpt,x
0022D6  1  49 C3                eor #$c3
0022D8  1  D5 15                cmp zp1,x
0022DA  1  D0 FE                trap_ne     ;store to zp,x data
0022DC  1  94 0C                sty zpt,x   ;clear
0022DE  1  BD 03 02             lda abst,x
0022E1  1  49 C3                eor #$c3
0022E3  1  DD 18 02             cmp abs1,x
0022E6  1  D0 FE                trap_ne     ;store to abs,x data
0022E8  1  8A                   txa
0022E9  1  9D 03 02             sta abst,x  ;clear
0022EC  1  CA                   dex
0022ED  1  10 E5                bpl tstax
0022EF  1  AD 00 02 C9          next_test
0022F3  1  15 D0 FE A9  
0022F7  1  16 8D 00 02  
0022FB  1               
0022FB  1               ; LDA / STA - (zp),y / abs,y / (zp,x)
0022FB  1  A0 03                ldy #3
0022FD  1               tlday:
0022FD  1  A9 00 48 28          set_stat 0
002301  1  B1 26                lda (ind1),y
002303  1  08                   php         ;test stores do not alter flags
002304  1  49 C3                eor #$c3
002306  1  28                   plp
002307  1  99 03 02             sta abst,y
00230A  1  08                   php         ;flags after load/store sequence
00230B  1  49 C3                eor #$c3
00230D  1  D9 18 02             cmp abs1,y  ;test result
002310  1  D0 FE                trap_ne
002312  1  68                   pla         ;load status
002313  1  49 30                eor_flag 0
002315  1  D9 1D 02             cmp fLDx,y  ;test flags
002318  1  D0 FE                trap_ne
00231A  1  88                   dey
00231B  1  10 E0                bpl tlday
00231D  1               
00231D  1  A0 03                ldy #3
00231F  1               tlday1:
00231F  1  A9 FF 48 28          set_stat $ff
002323  1  B1 26                lda (ind1),y
002325  1  08                   php         ;test stores do not alter flags
002326  1  49 C3                eor #$c3
002328  1  28                   plp
002329  1  99 03 02             sta abst,y
00232C  1  08                   php         ;flags after load/store sequence
00232D  1  49 C3                eor #$c3
00232F  1  D9 18 02             cmp abs1,y  ;test result
002332  1  D0 FE                trap_ne
002334  1  68                   pla         ;load status
002335  1  49 7D                eor_flag <~fnz ;mask bits not altered
002337  1  D9 1D 02             cmp fLDx,y  ;test flags
00233A  1  D0 FE                trap_ne
00233C  1  88                   dey
00233D  1  10 E0                bpl tlday1
00233F  1               
00233F  1  A0 03                ldy #3      ;testing store result
002341  1  A2 00                ldx #0
002343  1  B9 03 02     tstay:  lda abst,y
002346  1  49 C3                eor #$c3
002348  1  D9 18 02             cmp abs1,y
00234B  1  D0 FE                trap_ne     ;store to abs data
00234D  1  8A                   txa
00234E  1  99 03 02             sta abst,y  ;clear
002351  1  88                   dey
002352  1  10 EF                bpl tstay
002354  1               
002354  1  A0 03                ldy #3
002356  1               tlday2:
002356  1  A9 00 48 28          set_stat 0
00235A  1  B9 18 02             lda abs1,y
00235D  1  08                   php         ;test stores do not alter flags
00235E  1  49 C3                eor #$c3
002360  1  28                   plp
002361  1  91 32                sta (indt),y
002363  1  08                   php         ;flags after load/store sequence
002364  1  49 C3                eor #$c3
002366  1  D1 26                cmp (ind1),y    ;test result
002368  1  D0 FE                trap_ne
00236A  1  68                   pla         ;load status
00236B  1  49 30                eor_flag 0
00236D  1  D9 1D 02             cmp fLDx,y  ;test flags
002370  1  D0 FE                trap_ne
002372  1  88                   dey
002373  1  10 E1                bpl tlday2
002375  1               
002375  1  A0 03                ldy #3
002377  1               tlday3:
002377  1  A9 FF 48 28          set_stat $ff
00237B  1  B9 18 02             lda abs1,y
00237E  1  08                   php         ;test stores do not alter flags
00237F  1  49 C3                eor #$c3
002381  1  28                   plp
002382  1  91 32                sta (indt),y
002384  1  08                   php         ;flags after load/store sequence
002385  1  49 C3                eor #$c3
002387  1  D1 26                cmp (ind1),y   ;test result
002389  1  D0 FE                trap_ne
00238B  1  68                   pla         ;load status
00238C  1  49 7D                eor_flag <~fnz ;mask bits not altered
00238E  1  D9 1D 02             cmp fLDx,y  ;test flags
002391  1  D0 FE                trap_ne
002393  1  88                   dey
002394  1  10 E1                bpl tlday3
002396  1               
002396  1  A0 03                ldy #3      ;testing store result
002398  1  A2 00                ldx #0
00239A  1  B9 03 02     tstay1: lda abst,y
00239D  1  49 C3                eor #$c3
00239F  1  D9 18 02             cmp abs1,y
0023A2  1  D0 FE                trap_ne     ;store to abs data
0023A4  1  8A                   txa
0023A5  1  99 03 02             sta abst,y  ;clear
0023A8  1  88                   dey
0023A9  1  10 EF                bpl tstay1
0023AB  1               
0023AB  1  A2 06                ldx #6
0023AD  1  A0 03                ldy #3
0023AF  1               tldax4:
0023AF  1  A9 00 48 28          set_stat 0
0023B3  1  A1 26                lda (ind1,x)
0023B5  1  08                   php         ;test stores do not alter flags
0023B6  1  49 C3                eor #$c3
0023B8  1  28                   plp
0023B9  1  81 32                sta (indt,x)
0023BB  1  08                   php         ;flags after load/store sequence
0023BC  1  49 C3                eor #$c3
0023BE  1  D9 18 02             cmp abs1,y  ;test result
0023C1  1  D0 FE                trap_ne
0023C3  1  68                   pla         ;load status
0023C4  1  49 30                eor_flag 0
0023C6  1  D9 1D 02             cmp fLDx,y  ;test flags
0023C9  1  D0 FE                trap_ne
0023CB  1  CA                   dex
0023CC  1  CA                   dex
0023CD  1  88                   dey
0023CE  1  10 DF                bpl tldax4
0023D0  1               
0023D0  1  A2 06                ldx #6
0023D2  1  A0 03                ldy #3
0023D4  1               tldax5:
0023D4  1  A9 FF 48 28          set_stat $ff
0023D8  1  A1 26                lda (ind1,x)
0023DA  1  08                   php         ;test stores do not alter flags
0023DB  1  49 C3                eor #$c3
0023DD  1  28                   plp
0023DE  1  81 32                sta (indt,x)
0023E0  1  08                   php         ;flags after load/store sequence
0023E1  1  49 C3                eor #$c3
0023E3  1  D9 18 02             cmp abs1,y  ;test result
0023E6  1  D0 FE                trap_ne
0023E8  1  68                   pla         ;load status
0023E9  1  49 7D                eor_flag <~fnz ;mask bits not altered
0023EB  1  D9 1D 02             cmp fLDx,y  ;test flags
0023EE  1  D0 FE                trap_ne
0023F0  1  CA                   dex
0023F1  1  CA                   dex
0023F2  1  88                   dey
0023F3  1  10 DF                bpl tldax5
0023F5  1               
0023F5  1  A0 03                ldy #3      ;testing store result
0023F7  1  A2 00                ldx #0
0023F9  1  B9 03 02     tstay2: lda abst,y
0023FC  1  49 C3                eor #$c3
0023FE  1  D9 18 02             cmp abs1,y
002401  1  D0 FE                trap_ne     ;store to abs data
002403  1  8A                   txa
002404  1  99 03 02             sta abst,y  ;clear
002407  1  88                   dey
002408  1  10 EF                bpl tstay2
00240A  1  AD 00 02 C9          next_test
00240E  1  16 D0 FE A9  
002412  1  17 8D 00 02  
002416  1               
002416  1               ; indexed wraparound test (only zp should wrap)
002416  1  A2 FD                ldx #3+$fa
002418  1  B5 1B        tldax6: lda <(zp1-$fa),x   ;wrap on indexed zp
00241A  1  9D 09 01             sta abst-$fa,x      ;no STX abs,x!
00241D  1  CA                   dex
00241E  1  E0 FA                cpx #$fa
002420  1  B0 F6                bcs tldax6
002422  1  A2 FD                ldx #3+$fa
002424  1  BD 1E 01     tldax7: lda abs1-$fa,x      ;no wrap on indexed abs
002427  1  95 12                sta <(zpt-$fa),x
002429  1  CA                   dex
00242A  1  E0 FA                cpx #$fa
00242C  1  B0 F6                bcs tldax7
00242E  1               
00242E  1  A2 03                ldx #3      ;testing wraparound result
002430  1  A0 00                ldy #0
002432  1  B5 0C        tstax1: lda zpt,x
002434  1  D5 15                cmp zp1,x
002436  1  D0 FE                trap_ne     ;store to zp,x data
002438  1  94 0C                sty zpt,x   ;clear
00243A  1  BD 03 02             lda abst,x
00243D  1  DD 18 02             cmp abs1,x
002440  1  D0 FE                trap_ne     ;store to abs,x data
002442  1  8A                   txa
002443  1  9D 03 02             sta abst,x  ;clear
002446  1  CA                   dex
002447  1  10 E9                bpl tstax1
002449  1               
002449  1  A0 FB                ldy #3+$f8
00244B  1  A2 FE                ldx #6+$f8
00244D  1  A1 2E        tlday4: lda (<(ind1-$f8),x) ;wrap on indexed zp indirect
00244F  1  99 0B 01             sta abst-$f8,y
002452  1  CA                   dex
002453  1  CA                   dex
002454  1  88                   dey
002455  1  C0 F8                cpy #$f8
002457  1  B0 F4                bcs tlday4
002459  1  A0 03                ldy #3      ;testing wraparound result
00245B  1  A2 00                ldx #0
00245D  1  B9 03 02     tstay4: lda abst,y
002460  1  D9 18 02             cmp abs1,y
002463  1  D0 FE                trap_ne     ;store to abs data
002465  1  8A                   txa
002466  1  99 03 02             sta abst,y  ;clear
002469  1  88                   dey
00246A  1  10 F1                bpl tstay4
00246C  1               
00246C  1  A0 FB                ldy #3+$f8
00246E  1  B9 20 01     tlday5: lda abs1-$f8,y  ;no wrap on indexed abs
002471  1  91 3A                sta (inwt),y
002473  1  88                   dey
002474  1  C0 F8                cpy #$f8
002476  1  B0 F6                bcs tlday5
002478  1  A0 03                ldy #3      ;testing wraparound result
00247A  1  A2 00                ldx #0
00247C  1  B9 03 02     tstay5: lda abst,y
00247F  1  D9 18 02             cmp abs1,y
002482  1  D0 FE                trap_ne     ;store to abs data
002484  1  8A                   txa
002485  1  99 03 02             sta abst,y  ;clear
002488  1  88                   dey
002489  1  10 F1                bpl tstay5
00248B  1               
00248B  1  A0 FB                ldy #3+$f8
00248D  1  A2 FE                ldx #6+$f8
00248F  1  B1 30        tlday6: lda (inw1),y    ;no wrap on zp indirect indexed
002491  1  81 3A                sta (<(indt-$f8),x)
002493  1  CA                   dex
002494  1  CA                   dex
002495  1  88                   dey
002496  1  C0 F8                cpy #$f8
002498  1  B0 F5                bcs tlday6
00249A  1  A0 03                ldy #3      ;testing wraparound result
00249C  1  A2 00                ldx #0
00249E  1  B9 03 02     tstay6: lda abst,y
0024A1  1  D9 18 02             cmp abs1,y
0024A4  1  D0 FE                trap_ne     ;store to abs data
0024A6  1  8A                   txa
0024A7  1  99 03 02             sta abst,y  ;clear
0024AA  1  88                   dey
0024AB  1  10 F1                bpl tstay6
0024AD  1  AD 00 02 C9          next_test
0024B1  1  17 D0 FE A9  
0024B5  1  18 8D 00 02  
0024B9  1               
0024B9  1               ; LDA / STA - zp / abs / #
0024B9  1  A9 00 48 28          set_stat 0
0024BD  1  A5 15                lda zp1
0024BF  1  08                   php         ;test stores do not alter flags
0024C0  1  49 C3                eor #$c3
0024C2  1  28                   plp
0024C3  1  8D 03 02             sta abst
0024C6  1  08                   php         ;flags after load/store sequence
0024C7  1  49 C3                eor #$c3
0024C9  1  C9 C3                cmp #$c3    ;test result
0024CB  1  D0 FE                trap_ne
0024CD  1  68                   pla         ;load status
0024CE  1  49 30                eor_flag 0
0024D0  1  CD 1D 02             cmp fLDx    ;test flags
0024D3  1  D0 FE                trap_ne
0024D5  1  A9 00 48 28          set_stat 0
0024D9  1  A5 16                lda zp1+1
0024DB  1  08                   php         ;test stores do not alter flags
0024DC  1  49 C3                eor #$c3
0024DE  1  28                   plp
0024DF  1  8D 04 02             sta abst+1
0024E2  1  08                   php         ;flags after load/store sequence
0024E3  1  49 C3                eor #$c3
0024E5  1  C9 82                cmp #$82    ;test result
0024E7  1  D0 FE                trap_ne
0024E9  1  68                   pla         ;load status
0024EA  1  49 30                eor_flag 0
0024EC  1  CD 1E 02             cmp fLDx+1  ;test flags
0024EF  1  D0 FE                trap_ne
0024F1  1  A9 00 48 28          set_stat 0
0024F5  1  A5 17                lda zp1+2
0024F7  1  08                   php         ;test stores do not alter flags
0024F8  1  49 C3                eor #$c3
0024FA  1  28                   plp
0024FB  1  8D 05 02             sta abst+2
0024FE  1  08                   php         ;flags after load/store sequence
0024FF  1  49 C3                eor #$c3
002501  1  C9 41                cmp #$41    ;test result
002503  1  D0 FE                trap_ne
002505  1  68                   pla         ;load status
002506  1  49 30                eor_flag 0
002508  1  CD 1F 02             cmp fLDx+2  ;test flags
00250B  1  D0 FE                trap_ne
00250D  1  A9 00 48 28          set_stat 0
002511  1  A5 18                lda zp1+3
002513  1  08                   php         ;test stores do not alter flags
002514  1  49 C3                eor #$c3
002516  1  28                   plp
002517  1  8D 06 02             sta abst+3
00251A  1  08                   php         ;flags after load/store sequence
00251B  1  49 C3                eor #$c3
00251D  1  C9 00                cmp #0      ;test result
00251F  1  D0 FE                trap_ne
002521  1  68                   pla         ;load status
002522  1  49 30                eor_flag 0
002524  1  CD 20 02             cmp fLDx+3  ;test flags
002527  1  D0 FE                trap_ne
002529  1  A9 FF 48 28          set_stat $ff
00252D  1  A5 15                lda zp1
00252F  1  08                   php         ;test stores do not alter flags
002530  1  49 C3                eor #$c3
002532  1  28                   plp
002533  1  8D 03 02             sta abst
002536  1  08                   php         ;flags after load/store sequence
002537  1  49 C3                eor #$c3
002539  1  C9 C3                cmp #$c3    ;test result
00253B  1  D0 FE                trap_ne
00253D  1  68                   pla         ;load status
00253E  1  49 7D                eor_flag <~fnz ;mask bits not altered
002540  1  CD 1D 02             cmp fLDx    ;test flags
002543  1  D0 FE                trap_ne
002545  1  A9 FF 48 28          set_stat $ff
002549  1  A5 16                lda zp1+1
00254B  1  08                   php         ;test stores do not alter flags
00254C  1  49 C3                eor #$c3
00254E  1  28                   plp
00254F  1  8D 04 02             sta abst+1
002552  1  08                   php         ;flags after load/store sequence
002553  1  49 C3                eor #$c3
002555  1  C9 82                cmp #$82    ;test result
002557  1  D0 FE                trap_ne
002559  1  68                   pla         ;load status
00255A  1  49 7D                eor_flag <~fnz ;mask bits not altered
00255C  1  CD 1E 02             cmp fLDx+1  ;test flags
00255F  1  D0 FE                trap_ne
002561  1  A9 FF 48 28          set_stat $ff
002565  1  A5 17                lda zp1+2
002567  1  08                   php         ;test stores do not alter flags
002568  1  49 C3                eor #$c3
00256A  1  28                   plp
00256B  1  8D 05 02             sta abst+2
00256E  1  08                   php         ;flags after load/store sequence
00256F  1  49 C3                eor #$c3
002571  1  C9 41                cmp #$41    ;test result
002573  1  D0 FE                trap_ne
002575  1  68                   pla         ;load status
002576  1  49 7D                eor_flag <~fnz ;mask bits not altered
002578  1  CD 1F 02             cmp fLDx+2  ;test flags
00257B  1  D0 FE                trap_ne
00257D  1  A9 FF 48 28          set_stat $ff
002581  1  A5 18                lda zp1+3
002583  1  08                   php         ;test stores do not alter flags
002584  1  49 C3                eor #$c3
002586  1  28                   plp
002587  1  8D 06 02             sta abst+3
00258A  1  08                   php         ;flags after load/store sequence
00258B  1  49 C3                eor #$c3
00258D  1  C9 00                cmp #0      ;test result
00258F  1  D0 FE                trap_ne
002591  1  68                   pla         ;load status
002592  1  49 7D                eor_flag <~fnz ;mask bits not altered
002594  1  CD 20 02             cmp fLDx+3  ;test flags
002597  1  D0 FE                trap_ne
002599  1  A9 00 48 28          set_stat 0
00259D  1  AD 18 02             lda abs1
0025A0  1  08                   php         ;test stores do not alter flags
0025A1  1  49 C3                eor #$c3
0025A3  1  28                   plp
0025A4  1  85 0C                sta zpt
0025A6  1  08                   php         ;flags after load/store sequence
0025A7  1  49 C3                eor #$c3
0025A9  1  C5 15                cmp zp1     ;test result
0025AB  1  D0 FE                trap_ne
0025AD  1  68                   pla         ;load status
0025AE  1  49 30                eor_flag 0
0025B0  1  CD 1D 02             cmp fLDx    ;test flags
0025B3  1  D0 FE                trap_ne
0025B5  1  A9 00 48 28          set_stat 0
0025B9  1  AD 19 02             lda abs1+1
0025BC  1  08                   php         ;test stores do not alter flags
0025BD  1  49 C3                eor #$c3
0025BF  1  28                   plp
0025C0  1  85 0D                sta zpt+1
0025C2  1  08                   php         ;flags after load/store sequence
0025C3  1  49 C3                eor #$c3
0025C5  1  C5 16                cmp zp1+1   ;test result
0025C7  1  D0 FE                trap_ne
0025C9  1  68                   pla         ;load status
0025CA  1  49 30                eor_flag 0
0025CC  1  CD 1E 02             cmp fLDx+1  ;test flags
0025CF  1  D0 FE                trap_ne
0025D1  1  A9 00 48 28          set_stat 0
0025D5  1  AD 1A 02             lda abs1+2
0025D8  1  08                   php         ;test stores do not alter flags
0025D9  1  49 C3                eor #$c3
0025DB  1  28                   plp
0025DC  1  85 0E                sta zpt+2
0025DE  1  08                   php         ;flags after load/store sequence
0025DF  1  49 C3                eor #$c3
0025E1  1  C5 17                cmp zp1+2   ;test result
0025E3  1  D0 FE                trap_ne
0025E5  1  68                   pla         ;load status
0025E6  1  49 30                eor_flag 0
0025E8  1  CD 1F 02             cmp fLDx+2  ;test flags
0025EB  1  D0 FE                trap_ne
0025ED  1  A9 00 48 28          set_stat 0
0025F1  1  AD 1B 02             lda abs1+3
0025F4  1  08                   php         ;test stores do not alter flags
0025F5  1  49 C3                eor #$c3
0025F7  1  28                   plp
0025F8  1  85 0F                sta zpt+3
0025FA  1  08                   php         ;flags after load/store sequence
0025FB  1  49 C3                eor #$c3
0025FD  1  C5 18                cmp zp1+3   ;test result
0025FF  1  D0 FE                trap_ne
002601  1  68                   pla         ;load status
002602  1  49 30                eor_flag 0
002604  1  CD 20 02             cmp fLDx+3  ;test flags
002607  1  D0 FE                trap_ne
002609  1  A9 FF 48 28          set_stat $ff
00260D  1  AD 18 02             lda abs1
002610  1  08                   php         ;test stores do not alter flags
002611  1  49 C3                eor #$c3
002613  1  28                   plp
002614  1  85 0C                sta zpt
002616  1  08                   php         ;flags after load/store sequence
002617  1  49 C3                eor #$c3
002619  1  C5 15                cmp zp1     ;test result
00261B  1  D0 FE                trap_ne
00261D  1  68                   pla         ;load status
00261E  1  49 7D                eor_flag <~fnz ;mask bits not altered
002620  1  CD 1D 02             cmp fLDx    ;test flags
002623  1  D0 FE                trap_ne
002625  1  A9 FF 48 28          set_stat $ff
002629  1  AD 19 02             lda abs1+1
00262C  1  08                   php         ;test stores do not alter flags
00262D  1  49 C3                eor #$c3
00262F  1  28                   plp
002630  1  85 0D                sta zpt+1
002632  1  08                   php         ;flags after load/store sequence
002633  1  49 C3                eor #$c3
002635  1  C5 16                cmp zp1+1   ;test result
002637  1  D0 FE                trap_ne
002639  1  68                   pla         ;load status
00263A  1  49 7D                eor_flag <~fnz ;mask bits not altered
00263C  1  CD 1E 02             cmp fLDx+1  ;test flags
00263F  1  D0 FE                trap_ne
002641  1  A9 FF 48 28          set_stat $ff
002645  1  AD 1A 02             lda abs1+2
002648  1  08                   php         ;test stores do not alter flags
002649  1  49 C3                eor #$c3
00264B  1  28                   plp
00264C  1  85 0E                sta zpt+2
00264E  1  08                   php         ;flags after load/store sequence
00264F  1  49 C3                eor #$c3
002651  1  C5 17                cmp zp1+2   ;test result
002653  1  D0 FE                trap_ne
002655  1  68                   pla         ;load status
002656  1  49 7D                eor_flag <~fnz ;mask bits not altered
002658  1  CD 1F 02             cmp fLDx+2  ;test flags
00265B  1  D0 FE                trap_ne
00265D  1  A9 FF 48 28          set_stat $ff
002661  1  AD 1B 02             lda abs1+3
002664  1  08                   php         ;test stores do not alter flags
002665  1  49 C3                eor #$c3
002667  1  28                   plp
002668  1  85 0F                sta zpt+3
00266A  1  08                   php         ;flags after load/store sequence
00266B  1  49 C3                eor #$c3
00266D  1  C5 18                cmp zp1+3   ;test result
00266F  1  D0 FE                trap_ne
002671  1  68                   pla         ;load status
002672  1  49 7D                eor_flag <~fnz ;mask bits not altered
002674  1  CD 20 02             cmp fLDx+3  ;test flags
002677  1  D0 FE                trap_ne
002679  1  A9 00 48 28          set_stat 0
00267D  1  A9 C3                lda #$c3
00267F  1  08                   php
002680  1  CD 18 02             cmp abs1    ;test result
002683  1  D0 FE                trap_ne
002685  1  68                   pla         ;load status
002686  1  49 30                eor_flag 0
002688  1  CD 1D 02             cmp fLDx    ;test flags
00268B  1  D0 FE                trap_ne
00268D  1  A9 00 48 28          set_stat 0
002691  1  A9 82                lda #$82
002693  1  08                   php
002694  1  CD 19 02             cmp abs1+1  ;test result
002697  1  D0 FE                trap_ne
002699  1  68                   pla         ;load status
00269A  1  49 30                eor_flag 0
00269C  1  CD 1E 02             cmp fLDx+1  ;test flags
00269F  1  D0 FE                trap_ne
0026A1  1  A9 00 48 28          set_stat 0
0026A5  1  A9 41                lda #$41
0026A7  1  08                   php
0026A8  1  CD 1A 02             cmp abs1+2  ;test result
0026AB  1  D0 FE                trap_ne
0026AD  1  68                   pla         ;load status
0026AE  1  49 30                eor_flag 0
0026B0  1  CD 1F 02             cmp fLDx+2  ;test flags
0026B3  1  D0 FE                trap_ne
0026B5  1  A9 00 48 28          set_stat 0
0026B9  1  A9 00                lda #0
0026BB  1  08                   php
0026BC  1  CD 1B 02             cmp abs1+3  ;test result
0026BF  1  D0 FE                trap_ne
0026C1  1  68                   pla         ;load status
0026C2  1  49 30                eor_flag 0
0026C4  1  CD 20 02             cmp fLDx+3  ;test flags
0026C7  1  D0 FE                trap_ne
0026C9  1               
0026C9  1  A9 FF 48 28          set_stat $ff
0026CD  1  A9 C3                lda #$c3
0026CF  1  08                   php
0026D0  1  CD 18 02             cmp abs1    ;test result
0026D3  1  D0 FE                trap_ne
0026D5  1  68                   pla         ;load status
0026D6  1  49 7D                eor_flag <~fnz ;mask bits not altered
0026D8  1  CD 1D 02             cmp fLDx    ;test flags
0026DB  1  D0 FE                trap_ne
0026DD  1  A9 FF 48 28          set_stat $ff
0026E1  1  A9 82                lda #$82
0026E3  1  08                   php
0026E4  1  CD 19 02             cmp abs1+1  ;test result
0026E7  1  D0 FE                trap_ne
0026E9  1  68                   pla         ;load status
0026EA  1  49 7D                eor_flag <~fnz ;mask bits not altered
0026EC  1  CD 1E 02             cmp fLDx+1  ;test flags
0026EF  1  D0 FE                trap_ne
0026F1  1  A9 FF 48 28          set_stat $ff
0026F5  1  A9 41                lda #$41
0026F7  1  08                   php
0026F8  1  CD 1A 02             cmp abs1+2  ;test result
0026FB  1  D0 FE                trap_ne
0026FD  1  68                   pla         ;load status
0026FE  1  49 7D                eor_flag <~fnz ;mask bits not altered
002700  1  CD 1F 02             cmp fLDx+2  ;test flags
002703  1  D0 FE                trap_ne
002705  1  A9 FF 48 28          set_stat $ff
002709  1  A9 00                lda #0
00270B  1  08                   php
00270C  1  CD 1B 02             cmp abs1+3  ;test result
00270F  1  D0 FE                trap_ne
002711  1  68                   pla         ;load status
002712  1  49 7D                eor_flag <~fnz ;mask bits not altered
002714  1  CD 20 02             cmp fLDx+3  ;test flags
002717  1  D0 FE                trap_ne
002719  1               
002719  1  A2 00                ldx #0
00271B  1  A5 0C                lda zpt
00271D  1  49 C3                eor #$c3
00271F  1  C5 15                cmp zp1
002721  1  D0 FE                trap_ne     ;store to zp data
002723  1  86 0C                stx zpt     ;clear
002725  1  AD 03 02             lda abst
002728  1  49 C3                eor #$c3
00272A  1  CD 18 02             cmp abs1
00272D  1  D0 FE                trap_ne     ;store to abs data
00272F  1  8E 03 02             stx abst    ;clear
002732  1  A5 0D                lda zpt+1
002734  1  49 C3                eor #$c3
002736  1  C5 16                cmp zp1+1
002738  1  D0 FE                trap_ne     ;store to zp data
00273A  1  86 0D                stx zpt+1   ;clear
00273C  1  AD 04 02             lda abst+1
00273F  1  49 C3                eor #$c3
002741  1  CD 19 02             cmp abs1+1
002744  1  D0 FE                trap_ne     ;store to abs data
002746  1  8E 04 02             stx abst+1  ;clear
002749  1  A5 0E                lda zpt+2
00274B  1  49 C3                eor #$c3
00274D  1  C5 17                cmp zp1+2
00274F  1  D0 FE                trap_ne     ;store to zp data
002751  1  86 0E                stx zpt+2   ;clear
002753  1  AD 05 02             lda abst+2
002756  1  49 C3                eor #$c3
002758  1  CD 1A 02             cmp abs1+2
00275B  1  D0 FE                trap_ne     ;store to abs data
00275D  1  8E 05 02             stx abst+2  ;clear
002760  1  A5 0F                lda zpt+3
002762  1  49 C3                eor #$c3
002764  1  C5 18                cmp zp1+3
002766  1  D0 FE                trap_ne     ;store to zp data
002768  1  86 0F                stx zpt+3   ;clear
00276A  1  AD 06 02             lda abst+3
00276D  1  49 C3                eor #$c3
00276F  1  CD 1B 02             cmp abs1+3
002772  1  D0 FE                trap_ne     ;store to abs data
002774  1  8E 06 02             stx abst+3  ;clear
002777  1  AD 00 02 C9          next_test
00277B  1  18 D0 FE A9  
00277F  1  19 8D 00 02  
002783  1               
002783  1               ; testing bit test & compares BIT CPX CPY CMP all addressing modes
002783  1               ; BIT - zp / abs
002783  1  A9 00 48 A9          set_a $ff,0
002787  1  FF 28        
002789  1  24 18                bit zp1+3   ;00 - should set Z / clear  NV
00278B  1  08 C9 FF D0          tst_a $ff,fz
00278F  1  FE 68 48 C9  
002793  1  32 D0 FE 28  
002797  1  A9 00 48 A9          set_a 1,0
00279B  1  01 28        
00279D  1  24 17                bit zp1+2   ;41 - should set V (M6) / clear NZ
00279F  1  08 C9 01 D0          tst_a 1,fv
0027A3  1  FE 68 48 C9  
0027A7  1  70 D0 FE 28  
0027AB  1  A9 00 48 A9          set_a 1,0
0027AF  1  01 28        
0027B1  1  24 16                bit zp1+1   ;82 - should set N (M7) & Z / clear V
0027B3  1  08 C9 01 D0          tst_a 1,fnz
0027B7  1  FE 68 48 C9  
0027BB  1  B2 D0 FE 28  
0027BF  1  A9 00 48 A9          set_a 1,0
0027C3  1  01 28        
0027C5  1  24 15                bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
0027C7  1  08 C9 01 D0          tst_a 1,fnv
0027CB  1  FE 68 48 C9  
0027CF  1  F0 D0 FE 28  
0027D3  1               
0027D3  1  A9 FF 48 A9          set_a $ff,$ff
0027D7  1  FF 28        
0027D9  1  24 18                bit zp1+3   ;00 - should set Z / clear  NV
0027DB  1  08 C9 FF D0          tst_a $ff,~fnv
0027DF  1  FE 68 48 C9  
0027E3  1  3F D0 FE 28  
0027E7  1  A9 FF 48 A9          set_a 1,$ff
0027EB  1  01 28        
0027ED  1  24 17                bit zp1+2   ;41 - should set V (M6) / clear NZ
0027EF  1  08 C9 01 D0          tst_a 1,~fnz
0027F3  1  FE 68 48 C9  
0027F7  1  7D D0 FE 28  
0027FB  1  A9 FF 48 A9          set_a 1,$ff
0027FF  1  01 28        
002801  1  24 16                bit zp1+1   ;82 - should set N (M7) & Z / clear V
002803  1  08 C9 01 D0          tst_a 1,~fv
002807  1  FE 68 48 C9  
00280B  1  BF D0 FE 28  
00280F  1  A9 FF 48 A9          set_a 1,$ff
002813  1  01 28        
002815  1  24 15                bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
002817  1  08 C9 01 D0          tst_a 1,~fz
00281B  1  FE 68 48 C9  
00281F  1  FD D0 FE 28  
002823  1               
002823  1  A9 00 48 A9          set_a $ff,0
002827  1  FF 28        
002829  1  2C 1B 02             bit abs1+3  ;00 - should set Z / clear  NV
00282C  1  08 C9 FF D0          tst_a $ff,fz
002830  1  FE 68 48 C9  
002834  1  32 D0 FE 28  
002838  1  A9 00 48 A9          set_a 1,0
00283C  1  01 28        
00283E  1  2C 1A 02             bit abs1+2  ;41 - should set V (M6) / clear NZ
002841  1  08 C9 01 D0          tst_a 1,fv
002845  1  FE 68 48 C9  
002849  1  70 D0 FE 28  
00284D  1  A9 00 48 A9          set_a 1,0
002851  1  01 28        
002853  1  2C 19 02             bit abs1+1  ;82 - should set N (M7) & Z / clear V
002856  1  08 C9 01 D0          tst_a 1,fnz
00285A  1  FE 68 48 C9  
00285E  1  B2 D0 FE 28  
002862  1  A9 00 48 A9          set_a 1,0
002866  1  01 28        
002868  1  2C 18 02             bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
00286B  1  08 C9 01 D0          tst_a 1,fnv
00286F  1  FE 68 48 C9  
002873  1  F0 D0 FE 28  
002877  1               
002877  1  A9 FF 48 A9          set_a $ff,$ff
00287B  1  FF 28        
00287D  1  2C 1B 02             bit abs1+3  ;00 - should set Z / clear  NV
002880  1  08 C9 FF D0          tst_a $ff,~fnv
002884  1  FE 68 48 C9  
002888  1  3F D0 FE 28  
00288C  1  A9 FF 48 A9          set_a 1,$ff
002890  1  01 28        
002892  1  2C 1A 02             bit abs1+2  ;41 - should set V (M6) / clear NZ
002895  1  08 C9 01 D0          tst_a 1,~fnz
002899  1  FE 68 48 C9  
00289D  1  7D D0 FE 28  
0028A1  1  A9 FF 48 A9          set_a 1,$ff
0028A5  1  01 28        
0028A7  1  2C 19 02             bit abs1+1  ;82 - should set N (M7) & Z / clear V
0028AA  1  08 C9 01 D0          tst_a 1,~fv
0028AE  1  FE 68 48 C9  
0028B2  1  BF D0 FE 28  
0028B6  1  A9 FF 48 A9          set_a 1,$ff
0028BA  1  01 28        
0028BC  1  2C 18 02             bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
0028BF  1  08 C9 01 D0          tst_a 1,~fz
0028C3  1  FE 68 48 C9  
0028C7  1  FD D0 FE 28  
0028CB  1  AD 00 02 C9          next_test
0028CF  1  19 D0 FE A9  
0028D3  1  1A 8D 00 02  
0028D7  1               
0028D7  1               ; CPX - zp / abs / #
0028D7  1  A9 00 48 A2          set_x $80,0
0028DB  1  80 28        
0028DD  1  E4 19                cpx zp7f
0028DF  1  08 68 48 C9          tst_stat fc
0028E3  1  31 D0 FE 28  
0028E7  1  CA                   dex
0028E8  1  E4 19                cpx zp7f
0028EA  1  08 68 48 C9          tst_stat fzc
0028EE  1  33 D0 FE 28  
0028F2  1  CA                   dex
0028F3  1  E4 19                cpx zp7f
0028F5  1  08 E0 7E D0          tst_x $7e,fn
0028F9  1  FE 68 48 C9  
0028FD  1  B0 D0 FE 28  
002901  1  A9 FF 48 A2          set_x $80,$ff
002905  1  80 28        
002907  1  E4 19                cpx zp7f
002909  1  08 68 48 C9          tst_stat ~fnz
00290D  1  7D D0 FE 28  
002911  1  CA                   dex
002912  1  E4 19                cpx zp7f
002914  1  08 68 48 C9          tst_stat ~fn
002918  1  7F D0 FE 28  
00291C  1  CA                   dex
00291D  1  E4 19                cpx zp7f
00291F  1  08 E0 7E D0          tst_x $7e,~fzc
002923  1  FE 68 48 C9  
002927  1  FC D0 FE 28  
00292B  1               
00292B  1  A9 00 48 A2          set_x $80,0
00292F  1  80 28        
002931  1  EC 1C 02             cpx abs7f
002934  1  08 68 48 C9          tst_stat fc
002938  1  31 D0 FE 28  
00293C  1  CA                   dex
00293D  1  EC 1C 02             cpx abs7f
002940  1  08 68 48 C9          tst_stat fzc
002944  1  33 D0 FE 28  
002948  1  CA                   dex
002949  1  EC 1C 02             cpx abs7f
00294C  1  08 E0 7E D0          tst_x $7e,fn
002950  1  FE 68 48 C9  
002954  1  B0 D0 FE 28  
002958  1  A9 FF 48 A2          set_x $80,$ff
00295C  1  80 28        
00295E  1  EC 1C 02             cpx abs7f
002961  1  08 68 48 C9          tst_stat ~fnz
002965  1  7D D0 FE 28  
002969  1  CA                   dex
00296A  1  EC 1C 02             cpx abs7f
00296D  1  08 68 48 C9          tst_stat ~fn
002971  1  7F D0 FE 28  
002975  1  CA                   dex
002976  1  EC 1C 02             cpx abs7f
002979  1  08 E0 7E D0          tst_x $7e,~fzc
00297D  1  FE 68 48 C9  
002981  1  FC D0 FE 28  
002985  1               
002985  1  A9 00 48 A2          set_x $80,0
002989  1  80 28        
00298B  1  E0 7F                cpx #$7f
00298D  1  08 68 48 C9          tst_stat fc
002991  1  31 D0 FE 28  
002995  1  CA                   dex
002996  1  E0 7F                cpx #$7f
002998  1  08 68 48 C9          tst_stat fzc
00299C  1  33 D0 FE 28  
0029A0  1  CA                   dex
0029A1  1  E0 7F                cpx #$7f
0029A3  1  08 E0 7E D0          tst_x $7e,fn
0029A7  1  FE 68 48 C9  
0029AB  1  B0 D0 FE 28  
0029AF  1  A9 FF 48 A2          set_x $80,$ff
0029B3  1  80 28        
0029B5  1  E0 7F                cpx #$7f
0029B7  1  08 68 48 C9          tst_stat ~fnz
0029BB  1  7D D0 FE 28  
0029BF  1  CA                   dex
0029C0  1  E0 7F                cpx #$7f
0029C2  1  08 68 48 C9          tst_stat ~fn
0029C6  1  7F D0 FE 28  
0029CA  1  CA                   dex
0029CB  1  E0 7F                cpx #$7f
0029CD  1  08 E0 7E D0          tst_x $7e,~fzc
0029D1  1  FE 68 48 C9  
0029D5  1  FC D0 FE 28  
0029D9  1  AD 00 02 C9          next_test
0029DD  1  1A D0 FE A9  
0029E1  1  1B 8D 00 02  
0029E5  1               
0029E5  1               ; CPY - zp / abs / #
0029E5  1  A9 00 48 A0          set_y $80,0
0029E9  1  80 28        
0029EB  1  C4 19                cpy zp7f
0029ED  1  08 68 48 C9          tst_stat fc
0029F1  1  31 D0 FE 28  
0029F5  1  88                   dey
0029F6  1  C4 19                cpy zp7f
0029F8  1  08 68 48 C9          tst_stat fzc
0029FC  1  33 D0 FE 28  
002A00  1  88                   dey
002A01  1  C4 19                cpy zp7f
002A03  1  08 C0 7E D0          tst_y $7e,fn
002A07  1  FE 68 48 C9  
002A0B  1  B0 D0 FE 28  
002A0F  1  A9 FF 48 A0          set_y $80,$ff
002A13  1  80 28        
002A15  1  C4 19                cpy zp7f
002A17  1  08 68 48 C9          tst_stat ~fnz
002A1B  1  7D D0 FE 28  
002A1F  1  88                   dey
002A20  1  C4 19                cpy zp7f
002A22  1  08 68 48 C9          tst_stat ~fn
002A26  1  7F D0 FE 28  
002A2A  1  88                   dey
002A2B  1  C4 19                cpy zp7f
002A2D  1  08 C0 7E D0          tst_y $7e,~fzc
002A31  1  FE 68 48 C9  
002A35  1  FC D0 FE 28  
002A39  1               
002A39  1  A9 00 48 A0          set_y $80,0
002A3D  1  80 28        
002A3F  1  CC 1C 02             cpy abs7f
002A42  1  08 68 48 C9          tst_stat fc
002A46  1  31 D0 FE 28  
002A4A  1  88                   dey
002A4B  1  CC 1C 02             cpy abs7f
002A4E  1  08 68 48 C9          tst_stat fzc
002A52  1  33 D0 FE 28  
002A56  1  88                   dey
002A57  1  CC 1C 02             cpy abs7f
002A5A  1  08 C0 7E D0          tst_y $7e,fn
002A5E  1  FE 68 48 C9  
002A62  1  B0 D0 FE 28  
002A66  1  A9 FF 48 A0          set_y $80,$ff
002A6A  1  80 28        
002A6C  1  CC 1C 02             cpy abs7f
002A6F  1  08 68 48 C9          tst_stat ~fnz
002A73  1  7D D0 FE 28  
002A77  1  88                   dey
002A78  1  CC 1C 02             cpy abs7f
002A7B  1  08 68 48 C9          tst_stat ~fn
002A7F  1  7F D0 FE 28  
002A83  1  88                   dey
002A84  1  CC 1C 02             cpy abs7f
002A87  1  08 C0 7E D0          tst_y $7e,~fzc
002A8B  1  FE 68 48 C9  
002A8F  1  FC D0 FE 28  
002A93  1               
002A93  1  A9 00 48 A0          set_y $80,0
002A97  1  80 28        
002A99  1  C0 7F                cpy #$7f
002A9B  1  08 68 48 C9          tst_stat fc
002A9F  1  31 D0 FE 28  
002AA3  1  88                   dey
002AA4  1  C0 7F                cpy #$7f
002AA6  1  08 68 48 C9          tst_stat fzc
002AAA  1  33 D0 FE 28  
002AAE  1  88                   dey
002AAF  1  C0 7F                cpy #$7f
002AB1  1  08 C0 7E D0          tst_y $7e,fn
002AB5  1  FE 68 48 C9  
002AB9  1  B0 D0 FE 28  
002ABD  1  A9 FF 48 A0          set_y $80,$ff
002AC1  1  80 28        
002AC3  1  C0 7F                cpy #$7f
002AC5  1  08 68 48 C9          tst_stat ~fnz
002AC9  1  7D D0 FE 28  
002ACD  1  88                   dey
002ACE  1  C0 7F                cpy #$7f
002AD0  1  08 68 48 C9          tst_stat ~fn
002AD4  1  7F D0 FE 28  
002AD8  1  88                   dey
002AD9  1  C0 7F                cpy #$7f
002ADB  1  08 C0 7E D0          tst_y $7e,~fzc
002ADF  1  FE 68 48 C9  
002AE3  1  FC D0 FE 28  
002AE7  1  AD 00 02 C9          next_test
002AEB  1  1B D0 FE A9  
002AEF  1  1C 8D 00 02  
002AF3  1               
002AF3  1               ; CMP - zp / abs / #
002AF3  1  A9 00 48 A9          set_a $80,0
002AF7  1  80 28        
002AF9  1  C5 19                cmp zp7f
002AFB  1  08 C9 80 D0          tst_a $80,fc
002AFF  1  FE 68 48 C9  
002B03  1  31 D0 FE 28  
002B07  1  A9 00 48 A9          set_a $7f,0
002B0B  1  7F 28        
002B0D  1  C5 19                cmp zp7f
002B0F  1  08 C9 7F D0          tst_a $7f,fzc
002B13  1  FE 68 48 C9  
002B17  1  33 D0 FE 28  
002B1B  1  A9 00 48 A9          set_a $7e,0
002B1F  1  7E 28        
002B21  1  C5 19                cmp zp7f
002B23  1  08 C9 7E D0          tst_a $7e,fn
002B27  1  FE 68 48 C9  
002B2B  1  B0 D0 FE 28  
002B2F  1  A9 FF 48 A9          set_a $80,$ff
002B33  1  80 28        
002B35  1  C5 19                cmp zp7f
002B37  1  08 C9 80 D0          tst_a $80,~fnz
002B3B  1  FE 68 48 C9  
002B3F  1  7D D0 FE 28  
002B43  1  A9 FF 48 A9          set_a $7f,$ff
002B47  1  7F 28        
002B49  1  C5 19                cmp zp7f
002B4B  1  08 C9 7F D0          tst_a $7f,~fn
002B4F  1  FE 68 48 C9  
002B53  1  7F D0 FE 28  
002B57  1  A9 FF 48 A9          set_a $7e,$ff
002B5B  1  7E 28        
002B5D  1  C5 19                cmp zp7f
002B5F  1  08 C9 7E D0          tst_a $7e,~fzc
002B63  1  FE 68 48 C9  
002B67  1  FC D0 FE 28  
002B6B  1               
002B6B  1  A9 00 48 A9          set_a $80,0
002B6F  1  80 28        
002B71  1  CD 1C 02             cmp abs7f
002B74  1  08 C9 80 D0          tst_a $80,fc
002B78  1  FE 68 48 C9  
002B7C  1  31 D0 FE 28  
002B80  1  A9 00 48 A9          set_a $7f,0
002B84  1  7F 28        
002B86  1  CD 1C 02             cmp abs7f
002B89  1  08 C9 7F D0          tst_a $7f,fzc
002B8D  1  FE 68 48 C9  
002B91  1  33 D0 FE 28  
002B95  1  A9 00 48 A9          set_a $7e,0
002B99  1  7E 28        
002B9B  1  CD 1C 02             cmp abs7f
002B9E  1  08 C9 7E D0          tst_a $7e,fn
002BA2  1  FE 68 48 C9  
002BA6  1  B0 D0 FE 28  
002BAA  1  A9 FF 48 A9          set_a $80,$ff
002BAE  1  80 28        
002BB0  1  CD 1C 02             cmp abs7f
002BB3  1  08 C9 80 D0          tst_a $80,~fnz
002BB7  1  FE 68 48 C9  
002BBB  1  7D D0 FE 28  
002BBF  1  A9 FF 48 A9          set_a $7f,$ff
002BC3  1  7F 28        
002BC5  1  CD 1C 02             cmp abs7f
002BC8  1  08 C9 7F D0          tst_a $7f,~fn
002BCC  1  FE 68 48 C9  
002BD0  1  7F D0 FE 28  
002BD4  1  A9 FF 48 A9          set_a $7e,$ff
002BD8  1  7E 28        
002BDA  1  CD 1C 02             cmp abs7f
002BDD  1  08 C9 7E D0          tst_a $7e,~fzc
002BE1  1  FE 68 48 C9  
002BE5  1  FC D0 FE 28  
002BE9  1               
002BE9  1  A9 00 48 A9          set_a $80,0
002BED  1  80 28        
002BEF  1  C9 7F                cmp #$7f
002BF1  1  08 C9 80 D0          tst_a $80,fc
002BF5  1  FE 68 48 C9  
002BF9  1  31 D0 FE 28  
002BFD  1  A9 00 48 A9          set_a $7f,0
002C01  1  7F 28        
002C03  1  C9 7F                cmp #$7f
002C05  1  08 C9 7F D0          tst_a $7f,fzc
002C09  1  FE 68 48 C9  
002C0D  1  33 D0 FE 28  
002C11  1  A9 00 48 A9          set_a $7e,0
002C15  1  7E 28        
002C17  1  C9 7F                cmp #$7f
002C19  1  08 C9 7E D0          tst_a $7e,fn
002C1D  1  FE 68 48 C9  
002C21  1  B0 D0 FE 28  
002C25  1  A9 FF 48 A9          set_a $80,$ff
002C29  1  80 28        
002C2B  1  C9 7F                cmp #$7f
002C2D  1  08 C9 80 D0          tst_a $80,~fnz
002C31  1  FE 68 48 C9  
002C35  1  7D D0 FE 28  
002C39  1  A9 FF 48 A9          set_a $7f,$ff
002C3D  1  7F 28        
002C3F  1  C9 7F                cmp #$7f
002C41  1  08 C9 7F D0          tst_a $7f,~fn
002C45  1  FE 68 48 C9  
002C49  1  7F D0 FE 28  
002C4D  1  A9 FF 48 A9          set_a $7e,$ff
002C51  1  7E 28        
002C53  1  C9 7F                cmp #$7f
002C55  1  08 C9 7E D0          tst_a $7e,~fzc
002C59  1  FE 68 48 C9  
002C5D  1  FC D0 FE 28  
002C61  1               
002C61  1  A2 04                ldx #4          ;with indexing by X
002C63  1  A9 00 48 A9          set_a $80,0
002C67  1  80 28        
002C69  1  D5 15                cmp zp1,x
002C6B  1  08 C9 80 D0          tst_a $80,fc
002C6F  1  FE 68 48 C9  
002C73  1  31 D0 FE 28  
002C77  1  A9 00 48 A9          set_a $7f,0
002C7B  1  7F 28        
002C7D  1  D5 15                cmp zp1,x
002C7F  1  08 C9 7F D0          tst_a $7f,fzc
002C83  1  FE 68 48 C9  
002C87  1  33 D0 FE 28  
002C8B  1  A9 00 48 A9          set_a $7e,0
002C8F  1  7E 28        
002C91  1  D5 15                cmp zp1,x
002C93  1  08 C9 7E D0          tst_a $7e,fn
002C97  1  FE 68 48 C9  
002C9B  1  B0 D0 FE 28  
002C9F  1  A9 FF 48 A9          set_a $80,$ff
002CA3  1  80 28        
002CA5  1  D5 15                cmp zp1,x
002CA7  1  08 C9 80 D0          tst_a $80,~fnz
002CAB  1  FE 68 48 C9  
002CAF  1  7D D0 FE 28  
002CB3  1  A9 FF 48 A9          set_a $7f,$ff
002CB7  1  7F 28        
002CB9  1  D5 15                cmp zp1,x
002CBB  1  08 C9 7F D0          tst_a $7f,~fn
002CBF  1  FE 68 48 C9  
002CC3  1  7F D0 FE 28  
002CC7  1  A9 FF 48 A9          set_a $7e,$ff
002CCB  1  7E 28        
002CCD  1  D5 15                cmp zp1,x
002CCF  1  08 C9 7E D0          tst_a $7e,~fzc
002CD3  1  FE 68 48 C9  
002CD7  1  FC D0 FE 28  
002CDB  1               
002CDB  1  A9 00 48 A9          set_a $80,0
002CDF  1  80 28        
002CE1  1  DD 18 02             cmp abs1,x
002CE4  1  08 C9 80 D0          tst_a $80,fc
002CE8  1  FE 68 48 C9  
002CEC  1  31 D0 FE 28  
002CF0  1  A9 00 48 A9          set_a $7f,0
002CF4  1  7F 28        
002CF6  1  DD 18 02             cmp abs1,x
002CF9  1  08 C9 7F D0          tst_a $7f,fzc
002CFD  1  FE 68 48 C9  
002D01  1  33 D0 FE 28  
002D05  1  A9 00 48 A9          set_a $7e,0
002D09  1  7E 28        
002D0B  1  DD 18 02             cmp abs1,x
002D0E  1  08 C9 7E D0          tst_a $7e,fn
002D12  1  FE 68 48 C9  
002D16  1  B0 D0 FE 28  
002D1A  1  A9 FF 48 A9          set_a $80,$ff
002D1E  1  80 28        
002D20  1  DD 18 02             cmp abs1,x
002D23  1  08 C9 80 D0          tst_a $80,~fnz
002D27  1  FE 68 48 C9  
002D2B  1  7D D0 FE 28  
002D2F  1  A9 FF 48 A9          set_a $7f,$ff
002D33  1  7F 28        
002D35  1  DD 18 02             cmp abs1,x
002D38  1  08 C9 7F D0          tst_a $7f,~fn
002D3C  1  FE 68 48 C9  
002D40  1  7F D0 FE 28  
002D44  1  A9 FF 48 A9          set_a $7e,$ff
002D48  1  7E 28        
002D4A  1  DD 18 02             cmp abs1,x
002D4D  1  08 C9 7E D0          tst_a $7e,~fzc
002D51  1  FE 68 48 C9  
002D55  1  FC D0 FE 28  
002D59  1               
002D59  1  A0 04                ldy #4          ;with indexing by Y
002D5B  1  A2 08                ldx #8          ;with indexed indirect
002D5D  1  A9 00 48 A9          set_a $80,0
002D61  1  80 28        
002D63  1  D9 18 02             cmp abs1,y
002D66  1  08 C9 80 D0          tst_a $80,fc
002D6A  1  FE 68 48 C9  
002D6E  1  31 D0 FE 28  
002D72  1  A9 00 48 A9          set_a $7f,0
002D76  1  7F 28        
002D78  1  D9 18 02             cmp abs1,y
002D7B  1  08 C9 7F D0          tst_a $7f,fzc
002D7F  1  FE 68 48 C9  
002D83  1  33 D0 FE 28  
002D87  1  A9 00 48 A9          set_a $7e,0
002D8B  1  7E 28        
002D8D  1  D9 18 02             cmp abs1,y
002D90  1  08 C9 7E D0          tst_a $7e,fn
002D94  1  FE 68 48 C9  
002D98  1  B0 D0 FE 28  
002D9C  1  A9 FF 48 A9          set_a $80,$ff
002DA0  1  80 28        
002DA2  1  D9 18 02             cmp abs1,y
002DA5  1  08 C9 80 D0          tst_a $80,~fnz
002DA9  1  FE 68 48 C9  
002DAD  1  7D D0 FE 28  
002DB1  1  A9 FF 48 A9          set_a $7f,$ff
002DB5  1  7F 28        
002DB7  1  D9 18 02             cmp abs1,y
002DBA  1  08 C9 7F D0          tst_a $7f,~fn
002DBE  1  FE 68 48 C9  
002DC2  1  7F D0 FE 28  
002DC6  1  A9 FF 48 A9          set_a $7e,$ff
002DCA  1  7E 28        
002DCC  1  D9 18 02             cmp abs1,y
002DCF  1  08 C9 7E D0          tst_a $7e,~fzc
002DD3  1  FE 68 48 C9  
002DD7  1  FC D0 FE 28  
002DDB  1               
002DDB  1  A9 00 48 A9          set_a $80,0
002DDF  1  80 28        
002DE1  1  C1 26                cmp (ind1,x)
002DE3  1  08 C9 80 D0          tst_a $80,fc
002DE7  1  FE 68 48 C9  
002DEB  1  31 D0 FE 28  
002DEF  1  A9 00 48 A9          set_a $7f,0
002DF3  1  7F 28        
002DF5  1  C1 26                cmp (ind1,x)
002DF7  1  08 C9 7F D0          tst_a $7f,fzc
002DFB  1  FE 68 48 C9  
002DFF  1  33 D0 FE 28  
002E03  1  A9 00 48 A9          set_a $7e,0
002E07  1  7E 28        
002E09  1  C1 26                cmp (ind1,x)
002E0B  1  08 C9 7E D0          tst_a $7e,fn
002E0F  1  FE 68 48 C9  
002E13  1  B0 D0 FE 28  
002E17  1  A9 FF 48 A9          set_a $80,$ff
002E1B  1  80 28        
002E1D  1  C1 26                cmp (ind1,x)
002E1F  1  08 C9 80 D0          tst_a $80,~fnz
002E23  1  FE 68 48 C9  
002E27  1  7D D0 FE 28  
002E2B  1  A9 FF 48 A9          set_a $7f,$ff
002E2F  1  7F 28        
002E31  1  C1 26                cmp (ind1,x)
002E33  1  08 C9 7F D0          tst_a $7f,~fn
002E37  1  FE 68 48 C9  
002E3B  1  7F D0 FE 28  
002E3F  1  A9 FF 48 A9          set_a $7e,$ff
002E43  1  7E 28        
002E45  1  C1 26                cmp (ind1,x)
002E47  1  08 C9 7E D0          tst_a $7e,~fzc
002E4B  1  FE 68 48 C9  
002E4F  1  FC D0 FE 28  
002E53  1               
002E53  1  A9 00 48 A9          set_a $80,0
002E57  1  80 28        
002E59  1  D1 26                cmp (ind1),y
002E5B  1  08 C9 80 D0          tst_a $80,fc
002E5F  1  FE 68 48 C9  
002E63  1  31 D0 FE 28  
002E67  1  A9 00 48 A9          set_a $7f,0
002E6B  1  7F 28        
002E6D  1  D1 26                cmp (ind1),y
002E6F  1  08 C9 7F D0          tst_a $7f,fzc
002E73  1  FE 68 48 C9  
002E77  1  33 D0 FE 28  
002E7B  1  A9 00 48 A9          set_a $7e,0
002E7F  1  7E 28        
002E81  1  D1 26                cmp (ind1),y
002E83  1  08 C9 7E D0          tst_a $7e,fn
002E87  1  FE 68 48 C9  
002E8B  1  B0 D0 FE 28  
002E8F  1  A9 FF 48 A9          set_a $80,$ff
002E93  1  80 28        
002E95  1  D1 26                cmp (ind1),y
002E97  1  08 C9 80 D0          tst_a $80,~fnz
002E9B  1  FE 68 48 C9  
002E9F  1  7D D0 FE 28  
002EA3  1  A9 FF 48 A9          set_a $7f,$ff
002EA7  1  7F 28        
002EA9  1  D1 26                cmp (ind1),y
002EAB  1  08 C9 7F D0          tst_a $7f,~fn
002EAF  1  FE 68 48 C9  
002EB3  1  7F D0 FE 28  
002EB7  1  A9 FF 48 A9          set_a $7e,$ff
002EBB  1  7E 28        
002EBD  1  D1 26                cmp (ind1),y
002EBF  1  08 C9 7E D0          tst_a $7e,~fzc
002EC3  1  FE 68 48 C9  
002EC7  1  FC D0 FE 28  
002ECB  1  AD 00 02 C9          next_test
002ECF  1  1C D0 FE A9  
002ED3  1  1D 8D 00 02  
002ED7  1               
002ED7  1               ; testing shifts - ASL LSR ROL ROR all addressing modes
002ED7  1               ; shifts - accumulator
002ED7  1  A2 05                ldx #5
002ED9  1               tasl:
002ED9  1  A9 00 48 B5          set_ax zps,0
002EDD  1  13 28        
002EDF  1  0A                   asl a
002EE0  1  08 DD 21 02          tst_ax rASL,fASL,0
002EE4  1  D0 FE 68 49  
002EE8  1  30 DD 39 02  
002EEE  1  CA                   dex
002EEF  1  10 E8                bpl tasl
002EF1  1  A2 05                ldx #5
002EF3  1               tasl1:
002EF3  1  A9 FF 48 B5          set_ax zps,$ff
002EF7  1  13 28        
002EF9  1  0A                   asl a
002EFA  1  08 DD 21 02          tst_ax rASL,fASL,$ff-fnzc
002EFE  1  D0 FE 68 49  
002F02  1  7C DD 39 02  
002F08  1  CA                   dex
002F09  1  10 E8                bpl tasl1
002F0B  1               
002F0B  1  A2 05                ldx #5
002F0D  1               tlsr:
002F0D  1  A9 00 48 B5          set_ax zps,0
002F11  1  13 28        
002F13  1  4A                   lsr a
002F14  1  08 DD 2D 02          tst_ax rLSR,fLSR,0
002F18  1  D0 FE 68 49  
002F1C  1  30 DD 45 02  
002F22  1  CA                   dex
002F23  1  10 E8                bpl tlsr
002F25  1  A2 05                ldx #5
002F27  1               tlsr1:
002F27  1  A9 FF 48 B5          set_ax zps,$ff
002F2B  1  13 28        
002F2D  1  4A                   lsr a
002F2E  1  08 DD 2D 02          tst_ax rLSR,fLSR,$ff-fnzc
002F32  1  D0 FE 68 49  
002F36  1  7C DD 45 02  
002F3C  1  CA                   dex
002F3D  1  10 E8                bpl tlsr1
002F3F  1               
002F3F  1  A2 05                ldx #5
002F41  1               trol:
002F41  1  A9 00 48 B5          set_ax zps,0
002F45  1  13 28        
002F47  1  2A                   rol a
002F48  1  08 DD 21 02          tst_ax rROL,fROL,0
002F4C  1  D0 FE 68 49  
002F50  1  30 DD 39 02  
002F56  1  CA                   dex
002F57  1  10 E8                bpl trol
002F59  1  A2 05                ldx #5
002F5B  1               trol1:
002F5B  1  A9 FE 48 B5          set_ax zps,$ff-fc
002F5F  1  13 28        
002F61  1  2A                   rol a
002F62  1  08 DD 21 02          tst_ax rROL,fROL,$ff-fnzc
002F66  1  D0 FE 68 49  
002F6A  1  7C DD 39 02  
002F70  1  CA                   dex
002F71  1  10 E8                bpl trol1
002F73  1               
002F73  1  A2 05                ldx #5
002F75  1               trolc:
002F75  1  A9 01 48 B5          set_ax zps,fc
002F79  1  13 28        
002F7B  1  2A                   rol a
002F7C  1  08 DD 27 02          tst_ax rROLc,fROLc,0
002F80  1  D0 FE 68 49  
002F84  1  30 DD 3F 02  
002F8A  1  CA                   dex
002F8B  1  10 E8                bpl trolc
002F8D  1  A2 05                ldx #5
002F8F  1               trolc1:
002F8F  1  A9 FF 48 B5          set_ax zps,$ff
002F93  1  13 28        
002F95  1  2A                   rol a
002F96  1  08 DD 27 02          tst_ax rROLc,fROLc,$ff-fnzc
002F9A  1  D0 FE 68 49  
002F9E  1  7C DD 3F 02  
002FA4  1  CA                   dex
002FA5  1  10 E8                bpl trolc1
002FA7  1               
002FA7  1  A2 05                ldx #5
002FA9  1               tror:
002FA9  1  A9 00 48 B5          set_ax zps,0
002FAD  1  13 28        
002FAF  1  6A                   ror a
002FB0  1  08 DD 2D 02          tst_ax rROR,fROR,0
002FB4  1  D0 FE 68 49  
002FB8  1  30 DD 45 02  
002FBE  1  CA                   dex
002FBF  1  10 E8                bpl tror
002FC1  1  A2 05                ldx #5
002FC3  1               tror1:
002FC3  1  A9 FE 48 B5          set_ax zps,$ff-fc
002FC7  1  13 28        
002FC9  1  6A                   ror a
002FCA  1  08 DD 2D 02          tst_ax rROR,fROR,$ff-fnzc
002FCE  1  D0 FE 68 49  
002FD2  1  7C DD 45 02  
002FD8  1  CA                   dex
002FD9  1  10 E8                bpl tror1
002FDB  1               
002FDB  1  A2 05                ldx #5
002FDD  1               trorc:
002FDD  1  A9 01 48 B5          set_ax zps,fc
002FE1  1  13 28        
002FE3  1  6A                   ror a
002FE4  1  08 DD 33 02          tst_ax rRORc,fRORc,0
002FE8  1  D0 FE 68 49  
002FEC  1  30 DD 4B 02  
002FF2  1  CA                   dex
002FF3  1  10 E8                bpl trorc
002FF5  1  A2 05                ldx #5
002FF7  1               trorc1:
002FF7  1  A9 FF 48 B5          set_ax zps,$ff
002FFB  1  13 28        
002FFD  1  6A                   ror a
002FFE  1  08 DD 33 02          tst_ax rRORc,fRORc,$ff-fnzc
003002  1  D0 FE 68 49  
003006  1  7C DD 4B 02  
00300C  1  CA                   dex
00300D  1  10 E8                bpl trorc1
00300F  1  AD 00 02 C9          next_test
003013  1  1D D0 FE A9  
003017  1  1E 8D 00 02  
00301B  1               
00301B  1               ; shifts - zeropage
00301B  1  A2 05                ldx #5
00301D  1               tasl2:
00301D  1  A9 00 48 B5          set_z zps,0
003021  1  13 85 0C 28  
003025  1  06 0C                asl zpt
003027  1  08 A5 0C DD          tst_z rASL,fASL,0
00302B  1  21 02 D0 FE  
00302F  1  68 49 30 DD  
003037  1  CA                   dex
003038  1  10 E3                bpl tasl2
00303A  1  A2 05                ldx #5
00303C  1               tasl3:
00303C  1  A9 FF 48 B5          set_z zps,$ff
003040  1  13 85 0C 28  
003044  1  06 0C                asl zpt
003046  1  08 A5 0C DD          tst_z rASL,fASL,$ff-fnzc
00304A  1  21 02 D0 FE  
00304E  1  68 49 7C DD  
003056  1  CA                   dex
003057  1  10 E3                bpl tasl3
003059  1               
003059  1  A2 05                ldx #5
00305B  1               tlsr2:
00305B  1  A9 00 48 B5          set_z zps,0
00305F  1  13 85 0C 28  
003063  1  46 0C                lsr zpt
003065  1  08 A5 0C DD          tst_z rLSR,fLSR,0
003069  1  2D 02 D0 FE  
00306D  1  68 49 30 DD  
003075  1  CA                   dex
003076  1  10 E3                bpl tlsr2
003078  1  A2 05                ldx #5
00307A  1               tlsr3:
00307A  1  A9 FF 48 B5          set_z zps,$ff
00307E  1  13 85 0C 28  
003082  1  46 0C                lsr zpt
003084  1  08 A5 0C DD          tst_z rLSR,fLSR,$ff-fnzc
003088  1  2D 02 D0 FE  
00308C  1  68 49 7C DD  
003094  1  CA                   dex
003095  1  10 E3                bpl tlsr3
003097  1               
003097  1  A2 05                ldx #5
003099  1               trol2:
003099  1  A9 00 48 B5          set_z zps,0
00309D  1  13 85 0C 28  
0030A1  1  26 0C                rol zpt
0030A3  1  08 A5 0C DD          tst_z rROL,fROL,0
0030A7  1  21 02 D0 FE  
0030AB  1  68 49 30 DD  
0030B3  1  CA                   dex
0030B4  1  10 E3                bpl trol2
0030B6  1  A2 05                ldx #5
0030B8  1               trol3:
0030B8  1  A9 FE 48 B5          set_z zps,$ff-fc
0030BC  1  13 85 0C 28  
0030C0  1  26 0C                rol zpt
0030C2  1  08 A5 0C DD          tst_z rROL,fROL,$ff-fnzc
0030C6  1  21 02 D0 FE  
0030CA  1  68 49 7C DD  
0030D2  1  CA                   dex
0030D3  1  10 E3                bpl trol3
0030D5  1               
0030D5  1  A2 05                ldx #5
0030D7  1               trolc2:
0030D7  1  A9 01 48 B5          set_z zps,fc
0030DB  1  13 85 0C 28  
0030DF  1  26 0C                rol zpt
0030E1  1  08 A5 0C DD          tst_z rROLc,fROLc,0
0030E5  1  27 02 D0 FE  
0030E9  1  68 49 30 DD  
0030F1  1  CA                   dex
0030F2  1  10 E3                bpl trolc2
0030F4  1  A2 05                ldx #5
0030F6  1               trolc3:
0030F6  1  A9 FF 48 B5          set_z zps,$ff
0030FA  1  13 85 0C 28  
0030FE  1  26 0C                rol zpt
003100  1  08 A5 0C DD          tst_z rROLc,fROLc,$ff-fnzc
003104  1  27 02 D0 FE  
003108  1  68 49 7C DD  
003110  1  CA                   dex
003111  1  10 E3                bpl trolc3
003113  1               
003113  1  A2 05                ldx #5
003115  1               tror2:
003115  1  A9 00 48 B5          set_z zps,0
003119  1  13 85 0C 28  
00311D  1  66 0C                ror zpt
00311F  1  08 A5 0C DD          tst_z rROR,fROR,0
003123  1  2D 02 D0 FE  
003127  1  68 49 30 DD  
00312F  1  CA                   dex
003130  1  10 E3                bpl tror2
003132  1  A2 05                ldx #5
003134  1               tror3:
003134  1  A9 FE 48 B5          set_z zps,$ff-fc
003138  1  13 85 0C 28  
00313C  1  66 0C                ror zpt
00313E  1  08 A5 0C DD          tst_z rROR,fROR,$ff-fnzc
003142  1  2D 02 D0 FE  
003146  1  68 49 7C DD  
00314E  1  CA                   dex
00314F  1  10 E3                bpl tror3
003151  1               
003151  1  A2 05                ldx #5
003153  1               trorc2:
003153  1  A9 01 48 B5          set_z zps,fc
003157  1  13 85 0C 28  
00315B  1  66 0C                ror zpt
00315D  1  08 A5 0C DD          tst_z rRORc,fRORc,0
003161  1  33 02 D0 FE  
003165  1  68 49 30 DD  
00316D  1  CA                   dex
00316E  1  10 E3                bpl trorc2
003170  1  A2 05                ldx #5
003172  1               trorc3:
003172  1  A9 FF 48 B5          set_z zps,$ff
003176  1  13 85 0C 28  
00317A  1  66 0C                ror zpt
00317C  1  08 A5 0C DD          tst_z rRORc,fRORc,$ff-fnzc
003180  1  33 02 D0 FE  
003184  1  68 49 7C DD  
00318C  1  CA                   dex
00318D  1  10 E3                bpl trorc3
00318F  1  AD 00 02 C9          next_test
003193  1  1E D0 FE A9  
003197  1  1F 8D 00 02  
00319B  1               
00319B  1               ; shifts - absolute
00319B  1  A2 05                ldx #5
00319D  1               tasl4:
00319D  1  A9 00 48 B5          set_abs zps,0
0031A1  1  13 8D 03 02  
0031A5  1  28           
0031A6  1  0E 03 02             asl abst
0031A9  1  08 AD 03 02          tst_abs rASL,fASL,0
0031AD  1  DD 21 02 D0  
0031B1  1  FE 68 49 30  
0031BA  1  CA                   dex
0031BB  1  10 E0                bpl tasl4
0031BD  1  A2 05                ldx #5
0031BF  1               tasl5:
0031BF  1  A9 FF 48 B5          set_abs zps,$ff
0031C3  1  13 8D 03 02  
0031C7  1  28           
0031C8  1  0E 03 02             asl abst
0031CB  1  08 AD 03 02          tst_abs rASL,fASL,$ff-fnzc
0031CF  1  DD 21 02 D0  
0031D3  1  FE 68 49 7C  
0031DC  1  CA                   dex
0031DD  1  10 E0                bpl tasl5
0031DF  1               
0031DF  1  A2 05                ldx #5
0031E1  1               tlsr4:
0031E1  1  A9 00 48 B5          set_abs zps,0
0031E5  1  13 8D 03 02  
0031E9  1  28           
0031EA  1  4E 03 02             lsr abst
0031ED  1  08 AD 03 02          tst_abs rLSR,fLSR,0
0031F1  1  DD 2D 02 D0  
0031F5  1  FE 68 49 30  
0031FE  1  CA                   dex
0031FF  1  10 E0                bpl tlsr4
003201  1  A2 05                ldx #5
003203  1               tlsr5:
003203  1  A9 FF 48 B5          set_abs zps,$ff
003207  1  13 8D 03 02  
00320B  1  28           
00320C  1  4E 03 02             lsr abst
00320F  1  08 AD 03 02          tst_abs rLSR,fLSR,$ff-fnzc
003213  1  DD 2D 02 D0  
003217  1  FE 68 49 7C  
003220  1  CA                   dex
003221  1  10 E0                bpl tlsr5
003223  1               
003223  1  A2 05                ldx #5
003225  1               trol4:
003225  1  A9 00 48 B5          set_abs zps,0
003229  1  13 8D 03 02  
00322D  1  28           
00322E  1  2E 03 02             rol abst
003231  1  08 AD 03 02          tst_abs rROL,fROL,0
003235  1  DD 21 02 D0  
003239  1  FE 68 49 30  
003242  1  CA                   dex
003243  1  10 E0                bpl trol4
003245  1  A2 05                ldx #5
003247  1               trol5:
003247  1  A9 FE 48 B5          set_abs zps,$ff-fc
00324B  1  13 8D 03 02  
00324F  1  28           
003250  1  2E 03 02             rol abst
003253  1  08 AD 03 02          tst_abs rROL,fROL,$ff-fnzc
003257  1  DD 21 02 D0  
00325B  1  FE 68 49 7C  
003264  1  CA                   dex
003265  1  10 E0                bpl trol5
003267  1               
003267  1  A2 05                ldx #5
003269  1               trolc4:
003269  1  A9 01 48 B5          set_abs zps,fc
00326D  1  13 8D 03 02  
003271  1  28           
003272  1  2E 03 02             rol abst
003275  1  08 AD 03 02          tst_abs rROLc,fROLc,0
003279  1  DD 27 02 D0  
00327D  1  FE 68 49 30  
003286  1  CA                   dex
003287  1  10 E0                bpl trolc4
003289  1  A2 05                ldx #5
00328B  1               trolc5:
00328B  1  A9 FF 48 B5          set_abs zps,$ff
00328F  1  13 8D 03 02  
003293  1  28           
003294  1  2E 03 02             rol abst
003297  1  08 AD 03 02          tst_abs rROLc,fROLc,$ff-fnzc
00329B  1  DD 27 02 D0  
00329F  1  FE 68 49 7C  
0032A8  1  CA                   dex
0032A9  1  10 E0                bpl trolc5
0032AB  1               
0032AB  1  A2 05                ldx #5
0032AD  1               tror4:
0032AD  1  A9 00 48 B5          set_abs zps,0
0032B1  1  13 8D 03 02  
0032B5  1  28           
0032B6  1  6E 03 02             ror abst
0032B9  1  08 AD 03 02          tst_abs rROR,fROR,0
0032BD  1  DD 2D 02 D0  
0032C1  1  FE 68 49 30  
0032CA  1  CA                   dex
0032CB  1  10 E0                bpl tror4
0032CD  1  A2 05                ldx #5
0032CF  1               tror5:
0032CF  1  A9 FE 48 B5          set_abs zps,$ff-fc
0032D3  1  13 8D 03 02  
0032D7  1  28           
0032D8  1  6E 03 02             ror abst
0032DB  1  08 AD 03 02          tst_abs rROR,fROR,$ff-fnzc
0032DF  1  DD 2D 02 D0  
0032E3  1  FE 68 49 7C  
0032EC  1  CA                   dex
0032ED  1  10 E0                bpl tror5
0032EF  1               
0032EF  1  A2 05                ldx #5
0032F1  1               trorc4:
0032F1  1  A9 01 48 B5          set_abs zps,fc
0032F5  1  13 8D 03 02  
0032F9  1  28           
0032FA  1  6E 03 02             ror abst
0032FD  1  08 AD 03 02          tst_abs rRORc,fRORc,0
003301  1  DD 33 02 D0  
003305  1  FE 68 49 30  
00330E  1  CA                   dex
00330F  1  10 E0                bpl trorc4
003311  1  A2 05                ldx #5
003313  1               trorc5:
003313  1  A9 FF 48 B5          set_abs zps,$ff
003317  1  13 8D 03 02  
00331B  1  28           
00331C  1  6E 03 02             ror abst
00331F  1  08 AD 03 02          tst_abs rRORc,fRORc,$ff-fnzc
003323  1  DD 33 02 D0  
003327  1  FE 68 49 7C  
003330  1  CA                   dex
003331  1  10 E0                bpl trorc5
003333  1  AD 00 02 C9          next_test
003337  1  1F D0 FE A9  
00333B  1  20 8D 00 02  
00333F  1               
00333F  1               ; shifts - zp indexed
00333F  1  A2 05                ldx #5
003341  1               tasl6:
003341  1  A9 00 48 B5          set_zx zps,0
003345  1  13 95 0C 28  
003349  1  16 0C                asl zpt,x
00334B  1  08 B5 0C DD          tst_zx rASL,fASL,0
00334F  1  21 02 D0 FE  
003353  1  68 49 30 DD  
00335B  1  CA                   dex
00335C  1  10 E3                bpl tasl6
00335E  1  A2 05                ldx #5
003360  1               tasl7:
003360  1  A9 FF 48 B5          set_zx zps,$ff
003364  1  13 95 0C 28  
003368  1  16 0C                asl zpt,x
00336A  1  08 B5 0C DD          tst_zx rASL,fASL,$ff-fnzc
00336E  1  21 02 D0 FE  
003372  1  68 49 7C DD  
00337A  1  CA                   dex
00337B  1  10 E3                bpl tasl7
00337D  1               
00337D  1  A2 05                ldx #5
00337F  1               tlsr6:
00337F  1  A9 00 48 B5          set_zx zps,0
003383  1  13 95 0C 28  
003387  1  56 0C                lsr zpt,x
003389  1  08 B5 0C DD          tst_zx rLSR,fLSR,0
00338D  1  2D 02 D0 FE  
003391  1  68 49 30 DD  
003399  1  CA                   dex
00339A  1  10 E3                bpl tlsr6
00339C  1  A2 05                ldx #5
00339E  1               tlsr7:
00339E  1  A9 FF 48 B5          set_zx zps,$ff
0033A2  1  13 95 0C 28  
0033A6  1  56 0C                lsr zpt,x
0033A8  1  08 B5 0C DD          tst_zx rLSR,fLSR,$ff-fnzc
0033AC  1  2D 02 D0 FE  
0033B0  1  68 49 7C DD  
0033B8  1  CA                   dex
0033B9  1  10 E3                bpl tlsr7
0033BB  1               
0033BB  1  A2 05                ldx #5
0033BD  1               trol6:
0033BD  1  A9 00 48 B5          set_zx zps,0
0033C1  1  13 95 0C 28  
0033C5  1  36 0C                rol zpt,x
0033C7  1  08 B5 0C DD          tst_zx rROL,fROL,0
0033CB  1  21 02 D0 FE  
0033CF  1  68 49 30 DD  
0033D7  1  CA                   dex
0033D8  1  10 E3                bpl trol6
0033DA  1  A2 05                ldx #5
0033DC  1               trol7:
0033DC  1  A9 FE 48 B5          set_zx zps,$ff-fc
0033E0  1  13 95 0C 28  
0033E4  1  36 0C                rol zpt,x
0033E6  1  08 B5 0C DD          tst_zx rROL,fROL,$ff-fnzc
0033EA  1  21 02 D0 FE  
0033EE  1  68 49 7C DD  
0033F6  1  CA                   dex
0033F7  1  10 E3                bpl trol7
0033F9  1               
0033F9  1  A2 05                ldx #5
0033FB  1               trolc6:
0033FB  1  A9 01 48 B5          set_zx zps,fc
0033FF  1  13 95 0C 28  
003403  1  36 0C                rol zpt,x
003405  1  08 B5 0C DD          tst_zx rROLc,fROLc,0
003409  1  27 02 D0 FE  
00340D  1  68 49 30 DD  
003415  1  CA                   dex
003416  1  10 E3                bpl trolc6
003418  1  A2 05                ldx #5
00341A  1               trolc7:
00341A  1  A9 FF 48 B5          set_zx zps,$ff
00341E  1  13 95 0C 28  
003422  1  36 0C                rol zpt,x
003424  1  08 B5 0C DD          tst_zx rROLc,fROLc,$ff-fnzc
003428  1  27 02 D0 FE  
00342C  1  68 49 7C DD  
003434  1  CA                   dex
003435  1  10 E3                bpl trolc7
003437  1               
003437  1  A2 05                ldx #5
003439  1               tror6:
003439  1  A9 00 48 B5          set_zx zps,0
00343D  1  13 95 0C 28  
003441  1  76 0C                ror zpt,x
003443  1  08 B5 0C DD          tst_zx rROR,fROR,0
003447  1  2D 02 D0 FE  
00344B  1  68 49 30 DD  
003453  1  CA                   dex
003454  1  10 E3                bpl tror6
003456  1  A2 05                ldx #5
003458  1               tror7:
003458  1  A9 FE 48 B5          set_zx zps,$ff-fc
00345C  1  13 95 0C 28  
003460  1  76 0C                ror zpt,x
003462  1  08 B5 0C DD          tst_zx rROR,fROR,$ff-fnzc
003466  1  2D 02 D0 FE  
00346A  1  68 49 7C DD  
003472  1  CA                   dex
003473  1  10 E3                bpl tror7
003475  1               
003475  1  A2 05                ldx #5
003477  1               trorc6:
003477  1  A9 01 48 B5          set_zx zps,fc
00347B  1  13 95 0C 28  
00347F  1  76 0C                ror zpt,x
003481  1  08 B5 0C DD          tst_zx rRORc,fRORc,0
003485  1  33 02 D0 FE  
003489  1  68 49 30 DD  
003491  1  CA                   dex
003492  1  10 E3                bpl trorc6
003494  1  A2 05                ldx #5
003496  1               trorc7:
003496  1  A9 FF 48 B5          set_zx zps,$ff
00349A  1  13 95 0C 28  
00349E  1  76 0C                ror zpt,x
0034A0  1  08 B5 0C DD          tst_zx rRORc,fRORc,$ff-fnzc
0034A4  1  33 02 D0 FE  
0034A8  1  68 49 7C DD  
0034B0  1  CA                   dex
0034B1  1  10 E3                bpl trorc7
0034B3  1  AD 00 02 C9          next_test
0034B7  1  20 D0 FE A9  
0034BB  1  21 8D 00 02  
0034BF  1               
0034BF  1               ; shifts - abs indexed
0034BF  1  A2 05                ldx #5
0034C1  1               tasl8:
0034C1  1  A9 00 48 B5          set_absx zps,0
0034C5  1  13 9D 03 02  
0034C9  1  28           
0034CA  1  1E 03 02             asl abst,x
0034CD  1  08 BD 03 02          tst_absx rASL,fASL,0
0034D1  1  DD 21 02 D0  
0034D5  1  FE 68 49 30  
0034DE  1  CA                   dex
0034DF  1  10 E0                bpl tasl8
0034E1  1  A2 05                ldx #5
0034E3  1               tasl9:
0034E3  1  A9 FF 48 B5          set_absx zps,$ff
0034E7  1  13 9D 03 02  
0034EB  1  28           
0034EC  1  1E 03 02             asl abst,x
0034EF  1  08 BD 03 02          tst_absx rASL,fASL,$ff-fnzc
0034F3  1  DD 21 02 D0  
0034F7  1  FE 68 49 7C  
003500  1  CA                   dex
003501  1  10 E0                bpl tasl9
003503  1               
003503  1  A2 05                ldx #5
003505  1               tlsr8:
003505  1  A9 00 48 B5          set_absx zps,0
003509  1  13 9D 03 02  
00350D  1  28           
00350E  1  5E 03 02             lsr abst,x
003511  1  08 BD 03 02          tst_absx rLSR,fLSR,0
003515  1  DD 2D 02 D0  
003519  1  FE 68 49 30  
003522  1  CA                   dex
003523  1  10 E0                bpl tlsr8
003525  1  A2 05                ldx #5
003527  1               tlsr9:
003527  1  A9 FF 48 B5          set_absx zps,$ff
00352B  1  13 9D 03 02  
00352F  1  28           
003530  1  5E 03 02             lsr abst,x
003533  1  08 BD 03 02          tst_absx rLSR,fLSR,$ff-fnzc
003537  1  DD 2D 02 D0  
00353B  1  FE 68 49 7C  
003544  1  CA                   dex
003545  1  10 E0                bpl tlsr9
003547  1               
003547  1  A2 05                ldx #5
003549  1               trol8:
003549  1  A9 00 48 B5          set_absx zps,0
00354D  1  13 9D 03 02  
003551  1  28           
003552  1  3E 03 02             rol abst,x
003555  1  08 BD 03 02          tst_absx rROL,fROL,0
003559  1  DD 21 02 D0  
00355D  1  FE 68 49 30  
003566  1  CA                   dex
003567  1  10 E0                bpl trol8
003569  1  A2 05                ldx #5
00356B  1               trol9:
00356B  1  A9 FE 48 B5          set_absx zps,$ff-fc
00356F  1  13 9D 03 02  
003573  1  28           
003574  1  3E 03 02             rol abst,x
003577  1  08 BD 03 02          tst_absx rROL,fROL,$ff-fnzc
00357B  1  DD 21 02 D0  
00357F  1  FE 68 49 7C  
003588  1  CA                   dex
003589  1  10 E0                bpl trol9
00358B  1               
00358B  1  A2 05                ldx #5
00358D  1               trolc8:
00358D  1  A9 01 48 B5          set_absx zps,fc
003591  1  13 9D 03 02  
003595  1  28           
003596  1  3E 03 02             rol abst,x
003599  1  08 BD 03 02          tst_absx rROLc,fROLc,0
00359D  1  DD 27 02 D0  
0035A1  1  FE 68 49 30  
0035AA  1  CA                   dex
0035AB  1  10 E0                bpl trolc8
0035AD  1  A2 05                ldx #5
0035AF  1               trolc9:
0035AF  1  A9 FF 48 B5          set_absx zps,$ff
0035B3  1  13 9D 03 02  
0035B7  1  28           
0035B8  1  3E 03 02             rol abst,x
0035BB  1  08 BD 03 02          tst_absx rROLc,fROLc,$ff-fnzc
0035BF  1  DD 27 02 D0  
0035C3  1  FE 68 49 7C  
0035CC  1  CA                   dex
0035CD  1  10 E0                bpl trolc9
0035CF  1               
0035CF  1  A2 05                ldx #5
0035D1  1               tror8:
0035D1  1  A9 00 48 B5          set_absx zps,0
0035D5  1  13 9D 03 02  
0035D9  1  28           
0035DA  1  7E 03 02             ror abst,x
0035DD  1  08 BD 03 02          tst_absx rROR,fROR,0
0035E1  1  DD 2D 02 D0  
0035E5  1  FE 68 49 30  
0035EE  1  CA                   dex
0035EF  1  10 E0                bpl tror8
0035F1  1  A2 05                ldx #5
0035F3  1               tror9:
0035F3  1  A9 FE 48 B5          set_absx zps,$ff-fc
0035F7  1  13 9D 03 02  
0035FB  1  28           
0035FC  1  7E 03 02             ror abst,x
0035FF  1  08 BD 03 02          tst_absx rROR,fROR,$ff-fnzc
003603  1  DD 2D 02 D0  
003607  1  FE 68 49 7C  
003610  1  CA                   dex
003611  1  10 E0                bpl tror9
003613  1               
003613  1  A2 05                ldx #5
003615  1               trorc8:
003615  1  A9 01 48 B5          set_absx zps,fc
003619  1  13 9D 03 02  
00361D  1  28           
00361E  1  7E 03 02             ror abst,x
003621  1  08 BD 03 02          tst_absx rRORc,fRORc,0
003625  1  DD 33 02 D0  
003629  1  FE 68 49 30  
003632  1  CA                   dex
003633  1  10 E0                bpl trorc8
003635  1  A2 05                ldx #5
003637  1               trorc9:
003637  1  A9 FF 48 B5          set_absx zps,$ff
00363B  1  13 9D 03 02  
00363F  1  28           
003640  1  7E 03 02             ror abst,x
003643  1  08 BD 03 02          tst_absx rRORc,fRORc,$ff-fnzc
003647  1  DD 33 02 D0  
00364B  1  FE 68 49 7C  
003654  1  CA                   dex
003655  1  10 E0                bpl trorc9
003657  1  AD 00 02 C9          next_test
00365B  1  21 D0 FE A9  
00365F  1  22 8D 00 02  
003663  1               
003663  1               ; testing memory increment/decrement - INC DEC all addressing modes
003663  1               ; zeropage
003663  1  A2 00                ldx #0
003665  1  A9 7E                lda #$7e
003667  1  85 0C                sta zpt
003669  1               tinc:
003669  1  A9 00 48 28          set_stat 0
00366D  1  E6 0C                inc zpt
00366F  1  08 A5 0C DD          tst_z rINC,fINC,0
003673  1  51 02 D0 FE  
003677  1  68 49 30 DD  
00367F  1  E8                   inx
003680  1  E0 02                cpx #2
003682  1  D0 04                bne tinc1
003684  1  A9 FE                lda #$fe
003686  1  85 0C                sta zpt
003688  1  E0 05        tinc1:  cpx #5
00368A  1  D0 DD                bne tinc
00368C  1  CA                   dex
00368D  1  E6 0C                inc zpt
00368F  1               tdec:
00368F  1  A9 00 48 28          set_stat 0
003693  1  C6 0C                dec zpt
003695  1  08 A5 0C DD          tst_z rINC,fINC,0
003699  1  51 02 D0 FE  
00369D  1  68 49 30 DD  
0036A5  1  CA                   dex
0036A6  1  30 0A                bmi tdec1
0036A8  1  E0 01                cpx #1
0036AA  1  D0 E3                bne tdec
0036AC  1  A9 81                lda #$81
0036AE  1  85 0C                sta zpt
0036B0  1  D0 DD                bne tdec
0036B2  1               tdec1:
0036B2  1  A2 00                ldx #0
0036B4  1  A9 7E                lda #$7e
0036B6  1  85 0C                sta zpt
0036B8  1               tinc10:
0036B8  1  A9 FF 48 28          set_stat $ff
0036BC  1  E6 0C                inc zpt
0036BE  1  08 A5 0C DD          tst_z rINC,fINC,$ff-fnz
0036C2  1  51 02 D0 FE  
0036C6  1  68 49 7D DD  
0036CE  1  E8                   inx
0036CF  1  E0 02                cpx #2
0036D1  1  D0 04                bne tinc11
0036D3  1  A9 FE                lda #$fe
0036D5  1  85 0C                sta zpt
0036D7  1  E0 05        tinc11: cpx #5
0036D9  1  D0 DD                bne tinc10
0036DB  1  CA                   dex
0036DC  1  E6 0C                inc zpt
0036DE  1               tdec10:
0036DE  1  A9 FF 48 28          set_stat $ff
0036E2  1  C6 0C                dec zpt
0036E4  1  08 A5 0C DD          tst_z rINC,fINC,$ff-fnz
0036E8  1  51 02 D0 FE  
0036EC  1  68 49 7D DD  
0036F4  1  CA                   dex
0036F5  1  30 0A                bmi tdec11
0036F7  1  E0 01                cpx #1
0036F9  1  D0 E3                bne tdec10
0036FB  1  A9 81                lda #$81
0036FD  1  85 0C                sta zpt
0036FF  1  D0 DD                bne tdec10
003701  1               tdec11:
003701  1  AD 00 02 C9          next_test
003705  1  22 D0 FE A9  
003709  1  23 8D 00 02  
00370D  1               
00370D  1               ; absolute memory
00370D  1  A2 00                ldx #0
00370F  1  A9 7E                lda #$7e
003711  1  8D 03 02             sta abst
003714  1               tinc2:
003714  1  A9 00 48 28          set_stat 0
003718  1  EE 03 02             inc abst
00371B  1  08 AD 03 02          tst_abs rINC,fINC,0
00371F  1  DD 51 02 D0  
003723  1  FE 68 49 30  
00372C  1  E8                   inx
00372D  1  E0 02                cpx #2
00372F  1  D0 05                bne tinc3
003731  1  A9 FE                lda #$fe
003733  1  8D 03 02             sta abst
003736  1  E0 05        tinc3:  cpx #5
003738  1  D0 DA                bne tinc2
00373A  1  CA                   dex
00373B  1  EE 03 02             inc abst
00373E  1               tdec2:
00373E  1  A9 00 48 28          set_stat 0
003742  1  CE 03 02             dec abst
003745  1  08 AD 03 02          tst_abs rINC,fINC,0
003749  1  DD 51 02 D0  
00374D  1  FE 68 49 30  
003756  1  CA                   dex
003757  1  30 0B                bmi tdec3
003759  1  E0 01                cpx #1
00375B  1  D0 E1                bne tdec2
00375D  1  A9 81                lda #$81
00375F  1  8D 03 02             sta abst
003762  1  D0 DA                bne tdec2
003764  1               tdec3:
003764  1  A2 00                ldx #0
003766  1  A9 7E                lda #$7e
003768  1  8D 03 02             sta abst
00376B  1               tinc12:
00376B  1  A9 FF 48 28          set_stat $ff
00376F  1  EE 03 02             inc abst
003772  1  08 AD 03 02          tst_abs rINC,fINC,$ff-fnz
003776  1  DD 51 02 D0  
00377A  1  FE 68 49 7D  
003783  1  E8                   inx
003784  1  E0 02                cpx #2
003786  1  D0 05                bne tinc13
003788  1  A9 FE                lda #$fe
00378A  1  8D 03 02             sta abst
00378D  1  E0 05        tinc13:  cpx #5
00378F  1  D0 DA                bne tinc12
003791  1  CA                   dex
003792  1  EE 03 02             inc abst
003795  1               tdec12:
003795  1  A9 FF 48 28          set_stat $ff
003799  1  CE 03 02             dec abst
00379C  1  08 AD 03 02          tst_abs rINC,fINC,$ff-fnz
0037A0  1  DD 51 02 D0  
0037A4  1  FE 68 49 7D  
0037AD  1  CA                   dex
0037AE  1  30 0B                bmi tdec13
0037B0  1  E0 01                cpx #1
0037B2  1  D0 E1                bne tdec12
0037B4  1  A9 81                lda #$81
0037B6  1  8D 03 02             sta abst
0037B9  1  D0 DA                bne tdec12
0037BB  1               tdec13:
0037BB  1  AD 00 02 C9          next_test
0037BF  1  23 D0 FE A9  
0037C3  1  24 8D 00 02  
0037C7  1               
0037C7  1               ; zeropage indexed
0037C7  1  A2 00                ldx #0
0037C9  1  A9 7E                lda #$7e
0037CB  1  95 0C        tinc4:  sta zpt,x
0037CD  1  A9 00 48 28          set_stat 0
0037D1  1  F6 0C                inc zpt,x
0037D3  1  08 B5 0C DD          tst_zx rINC,fINC,0
0037D7  1  51 02 D0 FE  
0037DB  1  68 49 30 DD  
0037E3  1  B5 0C                lda zpt,x
0037E5  1  E8                   inx
0037E6  1  E0 02                cpx #2
0037E8  1  D0 02                bne tinc5
0037EA  1  A9 FE                lda #$fe
0037EC  1  E0 05        tinc5:  cpx #5
0037EE  1  D0 DB                bne tinc4
0037F0  1  CA                   dex
0037F1  1  A9 02                lda #2
0037F3  1  95 0C        tdec4:  sta zpt,x
0037F5  1  A9 00 48 28          set_stat 0
0037F9  1  D6 0C                dec zpt,x
0037FB  1  08 B5 0C DD          tst_zx rINC,fINC,0
0037FF  1  51 02 D0 FE  
003803  1  68 49 30 DD  
00380B  1  B5 0C                lda zpt,x
00380D  1  CA                   dex
00380E  1  30 08                bmi tdec5
003810  1  E0 01                cpx #1
003812  1  D0 DF                bne tdec4
003814  1  A9 81                lda #$81
003816  1  D0 DB                bne tdec4
003818  1               tdec5:
003818  1  A2 00                ldx #0
00381A  1  A9 7E                lda #$7e
00381C  1  95 0C        tinc14: sta zpt,x
00381E  1  A9 FF 48 28          set_stat $ff
003822  1  F6 0C                inc zpt,x
003824  1  08 B5 0C DD          tst_zx rINC,fINC,$ff-fnz
003828  1  51 02 D0 FE  
00382C  1  68 49 7D DD  
003834  1  B5 0C                lda zpt,x
003836  1  E8                   inx
003837  1  E0 02                cpx #2
003839  1  D0 02                bne tinc15
00383B  1  A9 FE                lda #$fe
00383D  1  E0 05        tinc15: cpx #5
00383F  1  D0 DB                bne tinc14
003841  1  CA                   dex
003842  1  A9 02                lda #2
003844  1  95 0C        tdec14: sta zpt,x
003846  1  A9 FF 48 28          set_stat $ff
00384A  1  D6 0C                dec zpt,x
00384C  1  08 B5 0C DD          tst_zx rINC,fINC,$ff-fnz
003850  1  51 02 D0 FE  
003854  1  68 49 7D DD  
00385C  1  B5 0C                lda zpt,x
00385E  1  CA                   dex
00385F  1  30 08                bmi tdec15
003861  1  E0 01                cpx #1
003863  1  D0 DF                bne tdec14
003865  1  A9 81                lda #$81
003867  1  D0 DB                bne tdec14
003869  1               tdec15:
003869  1  AD 00 02 C9          next_test
00386D  1  24 D0 FE A9  
003871  1  25 8D 00 02  
003875  1               
003875  1               ; memory indexed
003875  1  A2 00                ldx #0
003877  1  A9 7E                lda #$7e
003879  1  9D 03 02     tinc6:  sta abst,x
00387C  1  A9 00 48 28          set_stat 0
003880  1  FE 03 02             inc abst,x
003883  1  08 BD 03 02          tst_absx rINC,fINC,0
003887  1  DD 51 02 D0  
00388B  1  FE 68 49 30  
003894  1  BD 03 02             lda abst,x
003897  1  E8                   inx
003898  1  E0 02                cpx #2
00389A  1  D0 02                bne tinc7
00389C  1  A9 FE                lda #$fe
00389E  1  E0 05        tinc7:  cpx #5
0038A0  1  D0 D7                bne tinc6
0038A2  1  CA                   dex
0038A3  1  A9 02                lda #2
0038A5  1  9D 03 02     tdec6:  sta abst,x
0038A8  1  A9 00 48 28          set_stat 0
0038AC  1  DE 03 02             dec abst,x
0038AF  1  08 BD 03 02          tst_absx rINC,fINC,0
0038B3  1  DD 51 02 D0  
0038B7  1  FE 68 49 30  
0038C0  1  BD 03 02             lda abst,x
0038C3  1  CA                   dex
0038C4  1  30 08                bmi tdec7
0038C6  1  E0 01                cpx #1
0038C8  1  D0 DB                bne tdec6
0038CA  1  A9 81                lda #$81
0038CC  1  D0 D7                bne tdec6
0038CE  1               tdec7:
0038CE  1  A2 00                ldx #0
0038D0  1  A9 7E                lda #$7e
0038D2  1  9D 03 02     tinc16: sta abst,x
0038D5  1  A9 FF 48 28          set_stat $ff
0038D9  1  FE 03 02             inc abst,x
0038DC  1  08 BD 03 02          tst_absx rINC,fINC,$ff-fnz
0038E0  1  DD 51 02 D0  
0038E4  1  FE 68 49 7D  
0038ED  1  BD 03 02             lda abst,x
0038F0  1  E8                   inx
0038F1  1  E0 02                cpx #2
0038F3  1  D0 02                bne tinc17
0038F5  1  A9 FE                lda #$fe
0038F7  1  E0 05        tinc17: cpx #5
0038F9  1  D0 D7                bne tinc16
0038FB  1  CA                   dex
0038FC  1  A9 02                lda #2
0038FE  1  9D 03 02     tdec16: sta abst,x
003901  1  A9 FF 48 28          set_stat $ff
003905  1  DE 03 02             dec abst,x
003908  1  08 BD 03 02          tst_absx rINC,fINC,$ff-fnz
00390C  1  DD 51 02 D0  
003910  1  FE 68 49 7D  
003919  1  BD 03 02             lda abst,x
00391C  1  CA                   dex
00391D  1  30 08                bmi tdec17
00391F  1  E0 01                cpx #1
003921  1  D0 DB                bne tdec16
003923  1  A9 81                lda #$81
003925  1  D0 D7                bne tdec16
003927  1               tdec17:
003927  1  AD 00 02 C9          next_test
00392B  1  25 D0 FE A9  
00392F  1  26 8D 00 02  
003933  1               
003933  1               ; testing logical instructions - AND EOR ORA all addressing modes
003933  1               ; AND
003933  1  A2 03                ldx #3          ;immediate
003935  1  B5 1E        tand:   lda zpAN,x
003937  1  8D 0A 02             sta ex_andi+1   ;set AND # operand
00393A  1  A9 00 48 BD          set_ax  absANa,0
00393E  1  6B 02 28     
003941  1  20 09 02             jsr ex_andi     ;execute AND # in RAM
003944  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003948  1  D0 FE 68 49  
00394C  1  30 DD 77 02  
003952  1  CA                   dex
003953  1  10 E0                bpl tand
003955  1  A2 03                ldx #3
003957  1  B5 1E        tand1:  lda zpAN,x
003959  1  8D 0A 02             sta ex_andi+1   ;set AND # operand
00395C  1  A9 FF 48 BD          set_ax  absANa,$ff
003960  1  6B 02 28     
003963  1  20 09 02             jsr ex_andi     ;execute AND # in RAM
003966  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
00396A  1  D0 FE 68 49  
00396E  1  7D DD 77 02  
003974  1  CA                   dex
003975  1  10 E0                bpl tand1
003977  1               
003977  1  A2 03                ldx #3      ;zp
003979  1  B5 1E        tand2:  lda zpAN,x
00397B  1  85 0C                sta zpt
00397D  1  A9 00 48 BD          set_ax  absANa,0
003981  1  6B 02 28     
003984  1  25 0C                and zpt
003986  1  08 DD 73 02          tst_ax  absrlo,absflo,0
00398A  1  D0 FE 68 49  
00398E  1  30 DD 77 02  
003994  1  CA                   dex
003995  1  10 E2                bpl tand2
003997  1  A2 03                ldx #3
003999  1  B5 1E        tand3:  lda zpAN,x
00399B  1  85 0C                sta zpt
00399D  1  A9 FF 48 BD          set_ax  absANa,$ff
0039A1  1  6B 02 28     
0039A4  1  25 0C                and zpt
0039A6  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
0039AA  1  D0 FE 68 49  
0039AE  1  7D DD 77 02  
0039B4  1  CA                   dex
0039B5  1  10 E2                bpl tand3
0039B7  1               
0039B7  1  A2 03                ldx #3      ;abs
0039B9  1  B5 1E        tand4:  lda zpAN,x
0039BB  1  8D 03 02             sta abst
0039BE  1  A9 00 48 BD          set_ax  absANa,0
0039C2  1  6B 02 28     
0039C5  1  2D 03 02             and abst
0039C8  1  08 DD 73 02          tst_ax  absrlo,absflo,0
0039CC  1  D0 FE 68 49  
0039D0  1  30 DD 77 02  
0039D6  1  CA                   dex
0039D7  1  10 E0                bpl tand4
0039D9  1  A2 03                ldx #3
0039DB  1  B5 1E        tand5:  lda zpAN,x
0039DD  1  8D 03 02             sta abst
0039E0  1  A9 FF 48 BD          set_ax  absANa,$ff
0039E4  1  6B 02 28     
0039E7  1  2D 03 02             and abst
0039EA  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
0039EE  1  D0 FE 68 49  
0039F2  1  7D DD 77 02  
0039F8  1  CA                   dex
0039F9  1  10 02                bpl tand6
0039FB  1               
0039FB  1  A2 03                ldx #3      ;zp,x
0039FD  1               tand6:
0039FD  1  A9 00 48 BD          set_ax  absANa,0
003A01  1  6B 02 28     
003A04  1  35 1E                and zpAN,x
003A06  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003A0A  1  D0 FE 68 49  
003A0E  1  30 DD 77 02  
003A14  1  CA                   dex
003A15  1  10 E6                bpl tand6
003A17  1  A2 03                ldx #3
003A19  1               tand7:
003A19  1  A9 FF 48 BD          set_ax  absANa,$ff
003A1D  1  6B 02 28     
003A20  1  35 1E                and zpAN,x
003A22  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003A26  1  D0 FE 68 49  
003A2A  1  7D DD 77 02  
003A30  1  CA                   dex
003A31  1  10 E6                bpl tand7
003A33  1               
003A33  1  A2 03                ldx #3      ;abs,x
003A35  1               tand8:
003A35  1  A9 00 48 BD          set_ax  absANa,0
003A39  1  6B 02 28     
003A3C  1  3D 5F 02             and absAN,x
003A3F  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003A43  1  D0 FE 68 49  
003A47  1  30 DD 77 02  
003A4D  1  CA                   dex
003A4E  1  10 E5                bpl tand8
003A50  1  A2 03                ldx #3
003A52  1               tand9:
003A52  1  A9 FF 48 BD          set_ax  absANa,$ff
003A56  1  6B 02 28     
003A59  1  3D 5F 02             and absAN,x
003A5C  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003A60  1  D0 FE 68 49  
003A64  1  7D DD 77 02  
003A6A  1  CA                   dex
003A6B  1  10 E5                bpl tand9
003A6D  1               
003A6D  1  A0 03                ldy #3      ;abs,y
003A6F  1               tand10:
003A6F  1  A9 00 48 B9          set_ay  absANa,0
003A73  1  6B 02 28     
003A76  1  39 5F 02             and absAN,y
003A79  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003A7D  1  D0 FE 68 49  
003A81  1  30 D9 77 02  
003A87  1  88                   dey
003A88  1  10 E5                bpl tand10
003A8A  1  A0 03                ldy #3
003A8C  1               tand11:
003A8C  1  A9 FF 48 B9          set_ay  absANa,$ff
003A90  1  6B 02 28     
003A93  1  39 5F 02             and absAN,y
003A96  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003A9A  1  D0 FE 68 49  
003A9E  1  7D D9 77 02  
003AA4  1  88                   dey
003AA5  1  10 E5                bpl tand11
003AA7  1               
003AA7  1  A2 06                ldx #6      ;(zp,x)
003AA9  1  A0 03                ldy #3
003AAB  1               tand12:
003AAB  1  A9 00 48 B9          set_ay  absANa,0
003AAF  1  6B 02 28     
003AB2  1  21 3C                and (indAN,x)
003AB4  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003AB8  1  D0 FE 68 49  
003ABC  1  30 D9 77 02  
003AC2  1  CA                   dex
003AC3  1  CA                   dex
003AC4  1  88                   dey
003AC5  1  10 E4                bpl tand12
003AC7  1  A2 06                ldx #6
003AC9  1  A0 03                ldy #3
003ACB  1               tand13:
003ACB  1  A9 FF 48 B9          set_ay  absANa,$ff
003ACF  1  6B 02 28     
003AD2  1  21 3C                and (indAN,x)
003AD4  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003AD8  1  D0 FE 68 49  
003ADC  1  7D D9 77 02  
003AE2  1  CA                   dex
003AE3  1  CA                   dex
003AE4  1  88                   dey
003AE5  1  10 E4                bpl tand13
003AE7  1               
003AE7  1  A0 03                ldy #3      ;(zp),y
003AE9  1               tand14:
003AE9  1  A9 00 48 B9          set_ay  absANa,0
003AED  1  6B 02 28     
003AF0  1  31 3C                and (indAN),y
003AF2  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003AF6  1  D0 FE 68 49  
003AFA  1  30 D9 77 02  
003B00  1  88                   dey
003B01  1  10 E6                bpl tand14
003B03  1  A0 03                ldy #3
003B05  1               tand15:
003B05  1  A9 FF 48 B9          set_ay  absANa,$ff
003B09  1  6B 02 28     
003B0C  1  31 3C                and (indAN),y
003B0E  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003B12  1  D0 FE 68 49  
003B16  1  7D D9 77 02  
003B1C  1  88                   dey
003B1D  1  10 E6                bpl tand15
003B1F  1  AD 00 02 C9          next_test
003B23  1  26 D0 FE A9  
003B27  1  27 8D 00 02  
003B2B  1               
003B2B  1               ; EOR
003B2B  1  A2 03                ldx #3          ;immediate - self modifying code
003B2D  1  B5 22        teor:   lda zpEO,x
003B2F  1  8D 0D 02             sta ex_eori+1   ;set EOR # operand
003B32  1  A9 00 48 BD          set_ax  absEOa,0
003B36  1  6F 02 28     
003B39  1  20 0C 02             jsr ex_eori     ;execute EOR # in RAM
003B3C  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003B40  1  D0 FE 68 49  
003B44  1  30 DD 77 02  
003B4A  1  CA                   dex
003B4B  1  10 E0                bpl teor
003B4D  1  A2 03                ldx #3
003B4F  1  B5 22        teor1:  lda zpEO,x
003B51  1  8D 0D 02             sta ex_eori+1   ;set EOR # operand
003B54  1  A9 FF 48 BD          set_ax  absEOa,$ff
003B58  1  6F 02 28     
003B5B  1  20 0C 02             jsr ex_eori     ;execute EOR # in RAM
003B5E  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003B62  1  D0 FE 68 49  
003B66  1  7D DD 77 02  
003B6C  1  CA                   dex
003B6D  1  10 E0                bpl teor1
003B6F  1               
003B6F  1  A2 03                ldx #3      ;zp
003B71  1  B5 22        teor2:   lda zpEO,x
003B73  1  85 0C                sta zpt
003B75  1  A9 00 48 BD          set_ax  absEOa,0
003B79  1  6F 02 28     
003B7C  1  45 0C                eor zpt
003B7E  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003B82  1  D0 FE 68 49  
003B86  1  30 DD 77 02  
003B8C  1  CA                   dex
003B8D  1  10 E2                bpl teor2
003B8F  1  A2 03                ldx #3
003B91  1  B5 22        teor3:  lda zpEO,x
003B93  1  85 0C                sta zpt
003B95  1  A9 FF 48 BD          set_ax  absEOa,$ff
003B99  1  6F 02 28     
003B9C  1  45 0C                eor zpt
003B9E  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003BA2  1  D0 FE 68 49  
003BA6  1  7D DD 77 02  
003BAC  1  CA                   dex
003BAD  1  10 E2                bpl teor3
003BAF  1               
003BAF  1  A2 03                ldx #3      ;abs
003BB1  1  B5 22        teor4:  lda zpEO,x
003BB3  1  8D 03 02             sta abst
003BB6  1  A9 00 48 BD          set_ax  absEOa,0
003BBA  1  6F 02 28     
003BBD  1  4D 03 02             eor abst
003BC0  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003BC4  1  D0 FE 68 49  
003BC8  1  30 DD 77 02  
003BCE  1  CA                   dex
003BCF  1  10 E0                bpl teor4
003BD1  1  A2 03                ldx #3
003BD3  1  B5 22        teor5:  lda zpEO,x
003BD5  1  8D 03 02             sta abst
003BD8  1  A9 FF 48 BD          set_ax  absEOa,$ff
003BDC  1  6F 02 28     
003BDF  1  4D 03 02             eor abst
003BE2  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003BE6  1  D0 FE 68 49  
003BEA  1  7D DD 77 02  
003BF0  1  CA                   dex
003BF1  1  10 02                bpl teor6
003BF3  1               
003BF3  1  A2 03                ldx #3      ;zp,x
003BF5  1               teor6:
003BF5  1  A9 00 48 BD          set_ax  absEOa,0
003BF9  1  6F 02 28     
003BFC  1  55 22                eor zpEO,x
003BFE  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003C02  1  D0 FE 68 49  
003C06  1  30 DD 77 02  
003C0C  1  CA                   dex
003C0D  1  10 E6                bpl teor6
003C0F  1  A2 03                ldx #3
003C11  1               teor7:
003C11  1  A9 FF 48 BD          set_ax  absEOa,$ff
003C15  1  6F 02 28     
003C18  1  55 22                eor zpEO,x
003C1A  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003C1E  1  D0 FE 68 49  
003C22  1  7D DD 77 02  
003C28  1  CA                   dex
003C29  1  10 E6                bpl teor7
003C2B  1               
003C2B  1  A2 03                ldx #3      ;abs,x
003C2D  1               teor8:
003C2D  1  A9 00 48 BD          set_ax  absEOa,0
003C31  1  6F 02 28     
003C34  1  5D 63 02             eor absEO,x
003C37  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003C3B  1  D0 FE 68 49  
003C3F  1  30 DD 77 02  
003C45  1  CA                   dex
003C46  1  10 E5                bpl teor8
003C48  1  A2 03                ldx #3
003C4A  1               teor9:
003C4A  1  A9 FF 48 BD          set_ax  absEOa,$ff
003C4E  1  6F 02 28     
003C51  1  5D 63 02             eor absEO,x
003C54  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003C58  1  D0 FE 68 49  
003C5C  1  7D DD 77 02  
003C62  1  CA                   dex
003C63  1  10 E5                bpl teor9
003C65  1               
003C65  1  A0 03                ldy #3      ;abs,y
003C67  1               teor10:
003C67  1  A9 00 48 B9          set_ay  absEOa,0
003C6B  1  6F 02 28     
003C6E  1  59 63 02             eor absEO,y
003C71  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003C75  1  D0 FE 68 49  
003C79  1  30 D9 77 02  
003C7F  1  88                   dey
003C80  1  10 E5                bpl teor10
003C82  1  A0 03                ldy #3
003C84  1               teor11:
003C84  1  A9 FF 48 B9          set_ay  absEOa,$ff
003C88  1  6F 02 28     
003C8B  1  59 63 02             eor absEO,y
003C8E  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003C92  1  D0 FE 68 49  
003C96  1  7D D9 77 02  
003C9C  1  88                   dey
003C9D  1  10 E5                bpl teor11
003C9F  1               
003C9F  1  A2 06                ldx #6      ;(zp,x)
003CA1  1  A0 03                ldy #3
003CA3  1               teor12:
003CA3  1  A9 00 48 B9          set_ay  absEOa,0
003CA7  1  6F 02 28     
003CAA  1  41 44                eor (indEO,x)
003CAC  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003CB0  1  D0 FE 68 49  
003CB4  1  30 D9 77 02  
003CBA  1  CA                   dex
003CBB  1  CA                   dex
003CBC  1  88                   dey
003CBD  1  10 E4                bpl teor12
003CBF  1  A2 06                ldx #6
003CC1  1  A0 03                ldy #3
003CC3  1               teor13:
003CC3  1  A9 FF 48 B9          set_ay  absEOa,$ff
003CC7  1  6F 02 28     
003CCA  1  41 44                eor (indEO,x)
003CCC  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003CD0  1  D0 FE 68 49  
003CD4  1  7D D9 77 02  
003CDA  1  CA                   dex
003CDB  1  CA                   dex
003CDC  1  88                   dey
003CDD  1  10 E4                bpl teor13
003CDF  1               
003CDF  1  A0 03                ldy #3      ;(zp),y
003CE1  1               teor14:
003CE1  1  A9 00 48 B9          set_ay  absEOa,0
003CE5  1  6F 02 28     
003CE8  1  51 44                eor (indEO),y
003CEA  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003CEE  1  D0 FE 68 49  
003CF2  1  30 D9 77 02  
003CF8  1  88                   dey
003CF9  1  10 E6                bpl teor14
003CFB  1  A0 03                ldy #3
003CFD  1               teor15:
003CFD  1  A9 FF 48 B9          set_ay  absEOa,$ff
003D01  1  6F 02 28     
003D04  1  51 44                eor (indEO),y
003D06  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003D0A  1  D0 FE 68 49  
003D0E  1  7D D9 77 02  
003D14  1  88                   dey
003D15  1  10 E6                bpl teor15
003D17  1  AD 00 02 C9          next_test
003D1B  1  27 D0 FE A9  
003D1F  1  28 8D 00 02  
003D23  1               
003D23  1               ; OR
003D23  1  A2 03                ldx #3          ;immediate - self modifying code
003D25  1  B5 1A        tora:   lda zpOR,x
003D27  1  8D 10 02             sta ex_orai+1   ;set ORA # operand
003D2A  1  A9 00 48 BD          set_ax  absORa,0
003D2E  1  67 02 28     
003D31  1  20 0F 02             jsr ex_orai     ;execute ORA # in RAM
003D34  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003D38  1  D0 FE 68 49  
003D3C  1  30 DD 77 02  
003D42  1  CA                   dex
003D43  1  10 E0                bpl tora
003D45  1  A2 03                ldx #3
003D47  1  B5 1A        tora1:  lda zpOR,x
003D49  1  8D 10 02             sta ex_orai+1   ;set ORA # operand
003D4C  1  A9 FF 48 BD          set_ax  absORa,$ff
003D50  1  67 02 28     
003D53  1  20 0F 02             jsr ex_orai     ;execute ORA # in RAM
003D56  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003D5A  1  D0 FE 68 49  
003D5E  1  7D DD 77 02  
003D64  1  CA                   dex
003D65  1  10 E0                bpl tora1
003D67  1               
003D67  1  A2 03                ldx #3      ;zp
003D69  1  B5 1A        tora2:  lda zpOR,x
003D6B  1  85 0C                sta zpt
003D6D  1  A9 00 48 BD          set_ax  absORa,0
003D71  1  67 02 28     
003D74  1  05 0C                ora zpt
003D76  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003D7A  1  D0 FE 68 49  
003D7E  1  30 DD 77 02  
003D84  1  CA                   dex
003D85  1  10 E2                bpl tora2
003D87  1  A2 03                ldx #3
003D89  1  B5 1A        tora3:  lda zpOR,x
003D8B  1  85 0C                sta zpt
003D8D  1  A9 FF 48 BD          set_ax  absORa,$ff
003D91  1  67 02 28     
003D94  1  05 0C                ora zpt
003D96  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003D9A  1  D0 FE 68 49  
003D9E  1  7D DD 77 02  
003DA4  1  CA                   dex
003DA5  1  10 E2                bpl tora3
003DA7  1               
003DA7  1  A2 03                ldx #3      ;abs
003DA9  1  B5 1A        tora4:  lda zpOR,x
003DAB  1  8D 03 02             sta abst
003DAE  1  A9 00 48 BD          set_ax  absORa,0
003DB2  1  67 02 28     
003DB5  1  0D 03 02             ora abst
003DB8  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003DBC  1  D0 FE 68 49  
003DC0  1  30 DD 77 02  
003DC6  1  CA                   dex
003DC7  1  10 E0                bpl tora4
003DC9  1  A2 03                ldx #3
003DCB  1  B5 1A        tora5:  lda zpOR,x
003DCD  1  8D 03 02             sta abst
003DD0  1  A9 FF 48 BD          set_ax  absORa,$ff
003DD4  1  67 02 28     
003DD7  1  0D 03 02             ora abst
003DDA  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003DDE  1  D0 FE 68 49  
003DE2  1  7D DD 77 02  
003DE8  1  CA                   dex
003DE9  1  10 02                bpl tora6
003DEB  1               
003DEB  1  A2 03                ldx #3      ;zp,x
003DED  1               tora6:
003DED  1  A9 00 48 BD          set_ax  absORa,0
003DF1  1  67 02 28     
003DF4  1  15 1A                ora zpOR,x
003DF6  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003DFA  1  D0 FE 68 49  
003DFE  1  30 DD 77 02  
003E04  1  CA                   dex
003E05  1  10 E6                bpl tora6
003E07  1  A2 03                ldx #3
003E09  1               tora7:
003E09  1  A9 FF 48 BD          set_ax  absORa,$ff
003E0D  1  67 02 28     
003E10  1  15 1A                ora zpOR,x
003E12  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003E16  1  D0 FE 68 49  
003E1A  1  7D DD 77 02  
003E20  1  CA                   dex
003E21  1  10 E6                bpl tora7
003E23  1               
003E23  1  A2 03                ldx #3      ;abs,x
003E25  1               tora8:
003E25  1  A9 00 48 BD          set_ax  absORa,0
003E29  1  67 02 28     
003E2C  1  1D 5B 02             ora absOR,x
003E2F  1  08 DD 73 02          tst_ax  absrlo,absflo,0
003E33  1  D0 FE 68 49  
003E37  1  30 DD 77 02  
003E3D  1  CA                   dex
003E3E  1  10 E5                bpl tora8
003E40  1  A2 03                ldx #3
003E42  1               tora9:
003E42  1  A9 FF 48 BD          set_ax  absORa,$ff
003E46  1  67 02 28     
003E49  1  1D 5B 02             ora absOR,x
003E4C  1  08 DD 73 02          tst_ax  absrlo,absflo,$ff-fnz
003E50  1  D0 FE 68 49  
003E54  1  7D DD 77 02  
003E5A  1  CA                   dex
003E5B  1  10 E5                bpl tora9
003E5D  1               
003E5D  1  A0 03                ldy #3      ;abs,y
003E5F  1               tora10:
003E5F  1  A9 00 48 B9          set_ay  absORa,0
003E63  1  67 02 28     
003E66  1  19 5B 02             ora absOR,y
003E69  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003E6D  1  D0 FE 68 49  
003E71  1  30 D9 77 02  
003E77  1  88                   dey
003E78  1  10 E5                bpl tora10
003E7A  1  A0 03                ldy #3
003E7C  1               tora11:
003E7C  1  A9 FF 48 B9          set_ay  absORa,$ff
003E80  1  67 02 28     
003E83  1  19 5B 02             ora absOR,y
003E86  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003E8A  1  D0 FE 68 49  
003E8E  1  7D D9 77 02  
003E94  1  88                   dey
003E95  1  10 E5                bpl tora11
003E97  1               
003E97  1  A2 06                ldx #6      ;(zp,x)
003E99  1  A0 03                ldy #3
003E9B  1               tora12:
003E9B  1  A9 00 48 B9          set_ay  absORa,0
003E9F  1  67 02 28     
003EA2  1  01 4C                ora (indOR,x)
003EA4  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003EA8  1  D0 FE 68 49  
003EAC  1  30 D9 77 02  
003EB2  1  CA                   dex
003EB3  1  CA                   dex
003EB4  1  88                   dey
003EB5  1  10 E4                bpl tora12
003EB7  1  A2 06                ldx #6
003EB9  1  A0 03                ldy #3
003EBB  1               tora13:
003EBB  1  A9 FF 48 B9          set_ay  absORa,$ff
003EBF  1  67 02 28     
003EC2  1  01 4C                ora (indOR,x)
003EC4  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003EC8  1  D0 FE 68 49  
003ECC  1  7D D9 77 02  
003ED2  1  CA                   dex
003ED3  1  CA                   dex
003ED4  1  88                   dey
003ED5  1  10 E4                bpl tora13
003ED7  1               
003ED7  1  A0 03                ldy #3      ;(zp),y
003ED9  1               tora14:
003ED9  1  A9 00 48 B9          set_ay  absORa,0
003EDD  1  67 02 28     
003EE0  1  11 4C                ora (indOR),y
003EE2  1  08 D9 73 02          tst_ay  absrlo,absflo,0
003EE6  1  D0 FE 68 49  
003EEA  1  30 D9 77 02  
003EF0  1  88                   dey
003EF1  1  10 E6                bpl tora14
003EF3  1  A0 03                ldy #3
003EF5  1               tora15:
003EF5  1  A9 FF 48 B9          set_ay  absORa,$ff
003EF9  1  67 02 28     
003EFC  1  11 4C                ora (indOR),y
003EFE  1  08 D9 73 02          tst_ay  absrlo,absflo,$ff-fnz
003F02  1  D0 FE 68 49  
003F06  1  7D D9 77 02  
003F0C  1  88                   dey
003F0D  1  10 E6                bpl tora15
003F0F  1                   .if I_flag = 3
003F0F  1  58                   cli
003F10  1                   .endif
003F10  1  AD 00 02 C9          next_test
003F14  1  28 D0 FE A9  
003F18  1  29 8D 00 02  
003F1C  1               
003F1C  1               ; full binary add/subtract test
003F1C  1               ; iterates through all combinations of operands and carry input
003F1C  1               ; uses increments/decrements to predict result & result flags
003F1C  1  D8                   cld
003F1D  1  A2 0E                ldx #ad2        ;for indexed test
003F1F  1  A0 FF                ldy #$ff        ;max range
003F21  1  A9 00                lda #0          ;start with adding zeroes & no carry
003F23  1  85 0C                sta adfc        ;carry in - for diag
003F25  1  85 0D                sta ad1         ;operand 1 - accumulator
003F27  1  85 0E                sta ad2         ;operand 2 - memory or immediate
003F29  1  8D 03 02             sta ada2        ;non zp
003F2C  1  85 0F                sta adrl        ;expected result bits 0-7
003F2E  1  85 10                sta adrh        ;expected result bit 8 (carry out)
003F30  1  A9 FF                lda #$ff        ;complemented operand 2 for subtract
003F32  1  85 12                sta sb2
003F34  1  8D 04 02             sta sba2        ;non zp
003F37  1  A9 02                lda #2          ;expected Z-flag
003F39  1  85 11                sta adrf
003F3B  1  18           tadd:   clc             ;test with carry clear
003F3C  1  20 B6 41             jsr chkadd
003F3F  1  E6 0C                inc adfc        ;now with carry
003F41  1  E6 0F                inc adrl        ;result +1
003F43  1  08                   php             ;save N & Z from low result
003F44  1  08                   php
003F45  1  68                   pla             ;accu holds expected flags
003F46  1  29 82                and #$82        ;mask N & Z
003F48  1  28                   plp
003F49  1  D0 02                bne tadd1
003F4B  1  E6 10                inc adrh        ;result bit 8 - carry
003F4D  1  05 10        tadd1:  ora adrh        ;merge C to expected flags
003F4F  1  85 11                sta adrf        ;save expected flags except overflow
003F51  1  38                   sec             ;test with carry set
003F52  1  20 B6 41             jsr chkadd
003F55  1  C6 0C                dec adfc        ;same for operand +1 but no carry
003F57  1  E6 0D                inc ad1
003F59  1  D0 E0                bne tadd        ;iterate op1
003F5B  1  A9 00                lda #0          ;preset result to op2 when op1 = 0
003F5D  1  85 10                sta adrh
003F5F  1  EE 03 02             inc ada2
003F62  1  E6 0E                inc ad2
003F64  1  08                   php             ;save NZ as operand 2 becomes the new result
003F65  1  68                   pla
003F66  1  29 82                and #$82        ;mask N00000Z0
003F68  1  85 11                sta adrf        ;no need to check carry as we are adding to 0
003F6A  1  C6 12                dec sb2         ;complement subtract operand 2
003F6C  1  CE 04 02             dec sba2
003F6F  1  A5 0E                lda ad2
003F71  1  85 0F                sta adrl
003F73  1  D0 C6                bne tadd        ;iterate op2
003F75  1                   .if disable_decimal < 1
003F75  1  AD 00 02 C9          next_test
003F79  1  29 D0 FE A9  
003F7D  1  2A 8D 00 02  
003F81  1               
003F81  1               ; decimal add/subtract test
003F81  1               ; *** WARNING - tests documented behavior only! ***
003F81  1               ;   only valid BCD operands are tested, N V Z flags are ignored
003F81  1               ; iterates through all valid combinations of operands and carry input
003F81  1               ; uses increments/decrements to predict result & carry flag
003F81  1  F8                   sed
003F82  1  A2 0E                ldx #ad2        ;for indexed test
003F84  1  A0 FF                ldy #$ff        ;max range
003F86  1  A9 99                lda #$99        ;start with adding 99 to 99 with carry
003F88  1  85 0D                sta ad1         ;operand 1 - accumulator
003F8A  1  85 0E                sta ad2         ;operand 2 - memory or immediate
003F8C  1  8D 03 02             sta ada2        ;non zp
003F8F  1  85 0F                sta adrl        ;expected result bits 0-7
003F91  1  A9 01                lda #1          ;set carry in & out
003F93  1  85 0C                sta adfc        ;carry in - for diag
003F95  1  85 10                sta adrh        ;expected result bit 8 (carry out)
003F97  1  A9 00                lda #0          ;complemented operand 2 for subtract
003F99  1  85 12                sta sb2
003F9B  1  8D 04 02             sta sba2        ;non zp
003F9E  1  38           tdad:   sec             ;test with carry set
003F9F  1  20 83 40             jsr chkdad
003FA2  1  C6 0C                dec adfc        ;now with carry clear
003FA4  1  A5 0F                lda adrl        ;decimal adjust result
003FA6  1  D0 08                bne tdad1       ;skip clear carry & preset result 99 (9A-1)
003FA8  1  C6 10                dec adrh
003FAA  1  A9 99                lda #$99
003FAC  1  85 0F                sta adrl
003FAE  1  D0 12                bne tdad3
003FB0  1  29 0F        tdad1:  and #$f         ;lower nibble mask
003FB2  1  D0 0C                bne tdad2       ;no decimal adjust needed
003FB4  1  C6 0F                dec adrl        ;decimal adjust (?0-6)
003FB6  1  C6 0F                dec adrl
003FB8  1  C6 0F                dec adrl
003FBA  1  C6 0F                dec adrl
003FBC  1  C6 0F                dec adrl
003FBE  1  C6 0F                dec adrl
003FC0  1  C6 0F        tdad2:  dec adrl        ;result -1
003FC2  1  18           tdad3:  clc             ;test with carry clear
003FC3  1  20 83 40             jsr chkdad
003FC6  1  E6 0C                inc adfc        ;same for operand -1 but with carry
003FC8  1  A5 0D                lda ad1         ;decimal adjust operand 1
003FCA  1  F0 15                beq tdad5       ;iterate operand 2
003FCC  1  29 0F                and #$f         ;lower nibble mask
003FCE  1  D0 0C                bne tdad4       ;skip decimal adjust
003FD0  1  C6 0D                dec ad1         ;decimal adjust (?0-6)
003FD2  1  C6 0D                dec ad1
003FD4  1  C6 0D                dec ad1
003FD6  1  C6 0D                dec ad1
003FD8  1  C6 0D                dec ad1
003FDA  1  C6 0D                dec ad1
003FDC  1  C6 0D        tdad4:  dec ad1         ;operand 1 -1
003FDE  1  4C 9E 3F             jmp tdad        ;iterate op1
003FE1  1               
003FE1  1  A9 99        tdad5:  lda #$99        ;precharge op1 max
003FE3  1  85 0D                sta ad1
003FE5  1  A5 0E                lda ad2         ;decimal adjust operand 2
003FE7  1  F0 30                beq tdad7       ;end of iteration
003FE9  1  29 0F                and #$f         ;lower nibble mask
003FEB  1  D0 18                bne tdad6       ;skip decimal adjust
003FED  1  C6 0E                dec ad2         ;decimal adjust (?0-6)
003FEF  1  C6 0E                dec ad2
003FF1  1  C6 0E                dec ad2
003FF3  1  C6 0E                dec ad2
003FF5  1  C6 0E                dec ad2
003FF7  1  C6 0E                dec ad2
003FF9  1  E6 12                inc sb2         ;complemented decimal adjust for subtract (?9+6)
003FFB  1  E6 12                inc sb2
003FFD  1  E6 12                inc sb2
003FFF  1  E6 12                inc sb2
004001  1  E6 12                inc sb2
004003  1  E6 12                inc sb2
004005  1  C6 0E        tdad6:  dec ad2         ;operand 2 -1
004007  1  E6 12                inc sb2         ;complemented operand for subtract
004009  1  A5 12                lda sb2
00400B  1  8D 04 02             sta sba2        ;copy as non zp operand
00400E  1  A5 0E                lda ad2
004010  1  8D 03 02             sta ada2        ;copy as non zp operand
004013  1  85 0F                sta adrl        ;new result since op1+carry=00+carry +op2=op2
004015  1  E6 10                inc adrh        ;result carry
004017  1  D0 85                bne tdad        ;iterate op2
004019  1               tdad7:
004019  1  AD 00 02 C9          next_test
00401D  1  2A D0 FE A9  
004021  1  2B 8D 00 02  
004025  1               
004025  1               ; decimal/binary switch test
004025  1               ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
004025  1               ;   tables
004025  1  18                   clc
004026  1  D8                   cld
004027  1  08                   php
004028  1  A9 55                lda #$55
00402A  1  69 55                adc #$55
00402C  1  C9 AA                cmp #$aa
00402E  1  D0 FE                trap_ne         ;expected binary result after cld
004030  1  18                   clc
004031  1  F8                   sed
004032  1  08                   php
004033  1  A9 55                lda #$55
004035  1  69 55                adc #$55
004037  1  C9 10                cmp #$10
004039  1  D0 FE                trap_ne         ;expected decimal result after sed
00403B  1  D8                   cld
00403C  1  28                   plp
00403D  1  A9 55                lda #$55
00403F  1  69 55                adc #$55
004041  1  C9 10                cmp #$10
004043  1  D0 FE                trap_ne         ;expected decimal result after plp D=1
004045  1  28                   plp
004046  1  A9 55                lda #$55
004048  1  69 55                adc #$55
00404A  1  C9 AA                cmp #$aa
00404C  1  D0 FE                trap_ne         ;expected binary result after plp D=0
00404E  1  18                   clc
00404F  1  A9 40                lda #>bin_rti_ret ;emulated interrupt for rti
004051  1  48                   pha
004052  1  A9 69                lda #<bin_rti_ret
004054  1  48                   pha
004055  1  08                   php
004056  1  F8                   sed
004057  1  A9 40                lda #>dec_rti_ret ;emulated interrupt for rti
004059  1  48                   pha
00405A  1  A9 60                lda #<dec_rti_ret
00405C  1  48                   pha
00405D  1  08                   php
00405E  1  D8                   cld
00405F  1  40                   rti
004060  1               dec_rti_ret:
004060  1  A9 55                lda #$55
004062  1  69 55                adc #$55
004064  1  C9 10                cmp #$10
004066  1  D0 FE                trap_ne         ;expected decimal result after rti D=1
004068  1  40                   rti
004069  1               bin_rti_ret:
004069  1  A9 55                lda #$55
00406B  1  69 55                adc #$55
00406D  1  C9 AA                cmp #$aa
00406F  1  D0 FE                trap_ne         ;expected binary result after rti D=0
004071  1                   .endif
004071  1               
004071  1  AD 00 02             lda test_case
004074  1  C9 2B                cmp #test_num
004076  1  D0 FE                trap_ne         ;previous test is out of sequence
004078  1  A9 F0                lda #$f0        ;mark opcode testing complete
00407A  1  8D 00 02             sta test_case
00407D  1               
00407D  1               ; final RAM integrity test
00407D  1               ;   verifies that none of the previous tests has altered RAM outside of the
00407D  1               ;   designated write areas.
00407D  1                       check_ram
00407D  1               ; *** DEBUG INFO ***
00407D  1               ; to debug checksum errors uncomment check_ram in the next_test macro to
00407D  1               ; narrow down the responsible opcode.
00407D  1               ; may give false errors when monitor, OS or other background activity is
00407D  1               ; allowed during previous tests.
00407D  1               
00407D  1               
00407D  1               ; S U C C E S S ************************************************
00407D  1               ; -------------
00407D  1  4C 7D 40             success         ;if you get here everything went well
004080  1               ; -------------
004080  1               ; S U C C E S S ************************************************
004080  1  4C 00 10             jmp start       ;run again
004083  1               
004083  1                   .if disable_decimal < 1
004083  1               ; core subroutine of the decimal add/subtract test
004083  1               ; *** WARNING - tests documented behavior only! ***
004083  1               ;   only valid BCD operands are tested, N V Z flags are ignored
004083  1               ; iterates through all valid combinations of operands and carry input
004083  1               ; uses increments/decrements to predict result & carry flag
004083  1               chkdad:
004083  1               ; decimal ADC / SBC zp
004083  1  08                   php             ;save carry for subtract
004084  1  A5 0D                lda ad1
004086  1  65 0E                adc ad2         ;perform add
004088  1  08                   php
004089  1  C5 0F                cmp adrl        ;check result
00408B  1  D0 FE                trap_ne         ;bad result
00408D  1  68                   pla             ;check flags
00408E  1  29 01                and #1          ;mask carry
004090  1  C5 10                cmp adrh
004092  1  D0 FE                trap_ne         ;bad carry
004094  1  28                   plp
004095  1  08                   php             ;save carry for next add
004096  1  A5 0D                lda ad1
004098  1  E5 12                sbc sb2         ;perform subtract
00409A  1  08                   php
00409B  1  C5 0F                cmp adrl        ;check result
00409D  1  D0 FE                trap_ne         ;bad result
00409F  1  68                   pla             ;check flags
0040A0  1  29 01                and #1          ;mask carry
0040A2  1  C5 10                cmp adrh
0040A4  1  D0 FE                trap_ne         ;bad flags
0040A6  1  28                   plp
0040A7  1               ; decimal ADC / SBC abs
0040A7  1  08                   php             ;save carry for subtract
0040A8  1  A5 0D                lda ad1
0040AA  1  6D 03 02             adc ada2        ;perform add
0040AD  1  08                   php
0040AE  1  C5 0F                cmp adrl        ;check result
0040B0  1  D0 FE                trap_ne         ;bad result
0040B2  1  68                   pla             ;check flags
0040B3  1  29 01                and #1          ;mask carry
0040B5  1  C5 10                cmp adrh
0040B7  1  D0 FE                trap_ne         ;bad carry
0040B9  1  28                   plp
0040BA  1  08                   php             ;save carry for next add
0040BB  1  A5 0D                lda ad1
0040BD  1  ED 04 02             sbc sba2        ;perform subtract
0040C0  1  08                   php
0040C1  1  C5 0F                cmp adrl        ;check result
0040C3  1  D0 FE                trap_ne         ;bad result
0040C5  1  68                   pla             ;check flags
0040C6  1  29 01                and #1          ;mask carry
0040C8  1  C5 10                cmp adrh
0040CA  1  D0 FE                trap_ne         ;bad carry
0040CC  1  28                   plp
0040CD  1               ; decimal ADC / SBC #
0040CD  1  08                   php             ;save carry for subtract
0040CE  1  A5 0E                lda ad2
0040D0  1  8D 13 02             sta ex_adci+1   ;set ADC # operand
0040D3  1  A5 0D                lda ad1
0040D5  1  20 12 02             jsr ex_adci     ;execute ADC # in RAM
0040D8  1  08                   php
0040D9  1  C5 0F                cmp adrl        ;check result
0040DB  1  D0 FE                trap_ne         ;bad result
0040DD  1  68                   pla             ;check flags
0040DE  1  29 01                and #1          ;mask carry
0040E0  1  C5 10                cmp adrh
0040E2  1  D0 FE                trap_ne         ;bad carry
0040E4  1  28                   plp
0040E5  1  08                   php             ;save carry for next add
0040E6  1  A5 12                lda sb2
0040E8  1  8D 16 02             sta ex_sbci+1   ;set SBC # operand
0040EB  1  A5 0D                lda ad1
0040ED  1  20 15 02             jsr ex_sbci     ;execute SBC # in RAM
0040F0  1  08                   php
0040F1  1  C5 0F                cmp adrl        ;check result
0040F3  1  D0 FE                trap_ne         ;bad result
0040F5  1  68                   pla             ;check flags
0040F6  1  29 01                and #1          ;mask carry
0040F8  1  C5 10                cmp adrh
0040FA  1  D0 FE                trap_ne         ;bad carry
0040FC  1  28                   plp
0040FD  1               ; decimal ADC / SBC zp,x
0040FD  1  08                   php             ;save carry for subtract
0040FE  1  A5 0D                lda ad1
004100  1  75 00                adc 0,x         ;perform add
004102  1  08                   php
004103  1  C5 0F                cmp adrl        ;check result
004105  1  D0 FE                trap_ne         ;bad result
004107  1  68                   pla             ;check flags
004108  1  29 01                and #1          ;mask carry
00410A  1  C5 10                cmp adrh
00410C  1  D0 FE                trap_ne         ;bad carry
00410E  1  28                   plp
00410F  1  08                   php             ;save carry for next add
004110  1  A5 0D                lda ad1
004112  1  F5 04                sbc sb2-ad2,x   ;perform subtract
004114  1  08                   php
004115  1  C5 0F                cmp adrl        ;check result
004117  1  D0 FE                trap_ne         ;bad result
004119  1  68                   pla             ;check flags
00411A  1  29 01                and #1          ;mask carry
00411C  1  C5 10                cmp adrh
00411E  1  D0 FE                trap_ne         ;bad carry
004120  1  28                   plp
004121  1               ; decimal ADC / SBC abs,x
004121  1  08                   php             ;save carry for subtract
004122  1  A5 0D                lda ad1
004124  1  7D F5 01             adc ada2-ad2,x  ;perform add
004127  1  08                   php
004128  1  C5 0F                cmp adrl        ;check result
00412A  1  D0 FE                trap_ne         ;bad result
00412C  1  68                   pla             ;check flags
00412D  1  29 01                and #1          ;mask carry
00412F  1  C5 10                cmp adrh
004131  1  D0 FE                trap_ne         ;bad carry
004133  1  28                   plp
004134  1  08                   php             ;save carry for next add
004135  1  A5 0D                lda ad1
004137  1  FD F6 01             sbc sba2-ad2,x  ;perform subtract
00413A  1  08                   php
00413B  1  C5 0F                cmp adrl        ;check result
00413D  1  D0 FE                trap_ne         ;bad result
00413F  1  68                   pla             ;check flags
004140  1  29 01                and #1          ;mask carry
004142  1  C5 10                cmp adrh
004144  1  D0 FE                trap_ne         ;bad carry
004146  1  28                   plp
004147  1               ; decimal ADC / SBC abs,y
004147  1  08                   php             ;save carry for subtract
004148  1  A5 0D                lda ad1
00414A  1  79 04 01             adc ada2-$ff,y  ;perform add
00414D  1  08                   php
00414E  1  C5 0F                cmp adrl        ;check result
004150  1  D0 FE                trap_ne         ;bad result
004152  1  68                   pla             ;check flags
004153  1  29 01                and #1          ;mask carry
004155  1  C5 10                cmp adrh
004157  1  D0 FE                trap_ne         ;bad carry
004159  1  28                   plp
00415A  1  08                   php             ;save carry for next add
00415B  1  A5 0D                lda ad1
00415D  1  F9 05 01             sbc sba2-$ff,y  ;perform subtract
004160  1  08                   php
004161  1  C5 0F                cmp adrl        ;check result
004163  1  D0 FE                trap_ne         ;bad result
004165  1  68                   pla             ;check flags
004166  1  29 01                and #1          ;mask carry
004168  1  C5 10                cmp adrh
00416A  1  D0 FE                trap_ne         ;bad carry
00416C  1  28                   plp
00416D  1               ; decimal ADC / SBC (zp,x)
00416D  1  08                   php             ;save carry for subtract
00416E  1  A5 0D                lda ad1
004170  1  61 46                adc (<adi2-ad2,x) ;perform add
004172  1  08                   php
004173  1  C5 0F                cmp adrl        ;check result
004175  1  D0 FE                trap_ne         ;bad result
004177  1  68                   pla             ;check flags
004178  1  29 01                and #1          ;mask carry
00417A  1  C5 10                cmp adrh
00417C  1  D0 FE                trap_ne         ;bad carry
00417E  1  28                   plp
00417F  1  08                   php             ;save carry for next add
004180  1  A5 0D                lda ad1
004182  1  E1 48                sbc (<sbi2-ad2,x) ;perform subtract
004184  1  08                   php
004185  1  C5 0F                cmp adrl        ;check result
004187  1  D0 FE                trap_ne         ;bad result
004189  1  68                   pla             ;check flags
00418A  1  29 01                and #1          ;mask carry
00418C  1  C5 10                cmp adrh
00418E  1  D0 FE                trap_ne         ;bad carry
004190  1  28                   plp
004191  1               ; decimal ADC / SBC (abs),y
004191  1  08                   php             ;save carry for subtract
004192  1  A5 0D                lda ad1
004194  1  71 58                adc (adiy2),y   ;perform add
004196  1  08                   php
004197  1  C5 0F                cmp adrl        ;check result
004199  1  D0 FE                trap_ne         ;bad result
00419B  1  68                   pla             ;check flags
00419C  1  29 01                and #1          ;mask carry
00419E  1  C5 10                cmp adrh
0041A0  1  D0 FE                trap_ne         ;bad carry
0041A2  1  28                   plp
0041A3  1  08                   php             ;save carry for next add
0041A4  1  A5 0D                lda ad1
0041A6  1  F1 5A                sbc (sbiy2),y   ;perform subtract
0041A8  1  08                   php
0041A9  1  C5 0F                cmp adrl        ;check result
0041AB  1  D0 FE                trap_ne         ;bad result
0041AD  1  68                   pla             ;check flags
0041AE  1  29 01                and #1          ;mask carry
0041B0  1  C5 10                cmp adrh
0041B2  1  D0 FE                trap_ne         ;bad carry
0041B4  1  28                   plp
0041B5  1  60                   rts
0041B6  1                   .endif
0041B6  1               
0041B6  1               ; core subroutine of the full binary add/subtract test
0041B6  1               ; iterates through all combinations of operands and carry input
0041B6  1               ; uses increments/decrements to predict result & result flags
0041B6  1  A5 11        chkadd: lda adrf        ;add V-flag if overflow
0041B8  1  29 83                and #$83        ;keep N-----ZC / clear V
0041BA  1  48                   pha
0041BB  1  A5 0D                lda ad1         ;test sign unequal between operands
0041BD  1  45 0E                eor ad2
0041BF  1  30 0A                bmi ckad1       ;no overflow possible - operands have different sign
0041C1  1  A5 0D                lda ad1         ;test sign equal between operands and result
0041C3  1  45 0F                eor adrl
0041C5  1  10 04                bpl ckad1       ;no overflow occured - operand and result have same sign
0041C7  1  68                   pla
0041C8  1  09 40                ora #$40        ;set V
0041CA  1  48                   pha
0041CB  1  68           ckad1:  pla
0041CC  1  85 11                sta adrf        ;save expected flags
0041CE  1               ; binary ADC / SBC zp
0041CE  1  08                   php             ;save carry for subtract
0041CF  1  A5 0D                lda ad1
0041D1  1  65 0E                adc ad2         ;perform add
0041D3  1  08                   php
0041D4  1  C5 0F                cmp adrl        ;check result
0041D6  1  D0 FE                trap_ne         ;bad result
0041D8  1  68                   pla             ;check flags
0041D9  1  29 C3                and #$c3        ;mask NV----ZC
0041DB  1  C5 11                cmp adrf
0041DD  1  D0 FE                trap_ne         ;bad flags
0041DF  1  28                   plp
0041E0  1  08                   php             ;save carry for next add
0041E1  1  A5 0D                lda ad1
0041E3  1  E5 12                sbc sb2         ;perform subtract
0041E5  1  08                   php
0041E6  1  C5 0F                cmp adrl        ;check result
0041E8  1  D0 FE                trap_ne         ;bad result
0041EA  1  68                   pla             ;check flags
0041EB  1  29 C3                and #$c3        ;mask NV----ZC
0041ED  1  C5 11                cmp adrf
0041EF  1  D0 FE                trap_ne         ;bad flags
0041F1  1  28                   plp
0041F2  1               ; binary ADC / SBC abs
0041F2  1  08                   php             ;save carry for subtract
0041F3  1  A5 0D                lda ad1
0041F5  1  6D 03 02             adc ada2        ;perform add
0041F8  1  08                   php
0041F9  1  C5 0F                cmp adrl        ;check result
0041FB  1  D0 FE                trap_ne         ;bad result
0041FD  1  68                   pla             ;check flags
0041FE  1  29 C3                and #$c3        ;mask NV----ZC
004200  1  C5 11                cmp adrf
004202  1  D0 FE                trap_ne         ;bad flags
004204  1  28                   plp
004205  1  08                   php             ;save carry for next add
004206  1  A5 0D                lda ad1
004208  1  ED 04 02             sbc sba2        ;perform subtract
00420B  1  08                   php
00420C  1  C5 0F                cmp adrl        ;check result
00420E  1  D0 FE                trap_ne         ;bad result
004210  1  68                   pla             ;check flags
004211  1  29 C3                and #$c3        ;mask NV----ZC
004213  1  C5 11                cmp adrf
004215  1  D0 FE                trap_ne         ;bad flags
004217  1  28                   plp
004218  1               ; binary ADC / SBC #
004218  1  08                   php             ;save carry for subtract
004219  1  A5 0E                lda ad2
00421B  1  8D 13 02             sta ex_adci+1   ;set ADC # operand
00421E  1  A5 0D                lda ad1
004220  1  20 12 02             jsr ex_adci     ;execute ADC # in RAM
004223  1  08                   php
004224  1  C5 0F                cmp adrl        ;check result
004226  1  D0 FE                trap_ne         ;bad result
004228  1  68                   pla             ;check flags
004229  1  29 C3                and #$c3        ;mask NV----ZC
00422B  1  C5 11                cmp adrf
00422D  1  D0 FE                trap_ne         ;bad flags
00422F  1  28                   plp
004230  1  08                   php             ;save carry for next add
004231  1  A5 12                lda sb2
004233  1  8D 16 02             sta ex_sbci+1   ;set SBC # operand
004236  1  A5 0D                lda ad1
004238  1  20 15 02             jsr ex_sbci     ;execute SBC # in RAM
00423B  1  08                   php
00423C  1  C5 0F                cmp adrl        ;check result
00423E  1  D0 FE                trap_ne         ;bad result
004240  1  68                   pla             ;check flags
004241  1  29 C3                and #$c3        ;mask NV----ZC
004243  1  C5 11                cmp adrf
004245  1  D0 FE                trap_ne         ;bad flags
004247  1  28                   plp
004248  1               ; binary ADC / SBC zp,x
004248  1  08                   php             ;save carry for subtract
004249  1  A5 0D                lda ad1
00424B  1  75 00                adc 0,x         ;perform add
00424D  1  08                   php
00424E  1  C5 0F                cmp adrl        ;check result
004250  1  D0 FE                trap_ne         ;bad result
004252  1  68                   pla             ;check flags
004253  1  29 C3                and #$c3        ;mask NV----ZC
004255  1  C5 11                cmp adrf
004257  1  D0 FE                trap_ne         ;bad flags
004259  1  28                   plp
00425A  1  08                   php             ;save carry for next add
00425B  1  A5 0D                lda ad1
00425D  1  F5 04                sbc sb2-ad2,x   ;perform subtract
00425F  1  08                   php
004260  1  C5 0F                cmp adrl        ;check result
004262  1  D0 FE                trap_ne         ;bad result
004264  1  68                   pla             ;check flags
004265  1  29 C3                and #$c3        ;mask NV----ZC
004267  1  C5 11                cmp adrf
004269  1  D0 FE                trap_ne         ;bad flags
00426B  1  28                   plp
00426C  1               ; binary ADC / SBC abs,x
00426C  1  08                   php             ;save carry for subtract
00426D  1  A5 0D                lda ad1
00426F  1  7D F5 01             adc ada2-ad2,x  ;perform add
004272  1  08                   php
004273  1  C5 0F                cmp adrl        ;check result
004275  1  D0 FE                trap_ne         ;bad result
004277  1  68                   pla             ;check flags
004278  1  29 C3                and #$c3        ;mask NV----ZC
00427A  1  C5 11                cmp adrf
00427C  1  D0 FE                trap_ne         ;bad flags
00427E  1  28                   plp
00427F  1  08                   php             ;save carry for next add
004280  1  A5 0D                lda ad1
004282  1  FD F6 01             sbc sba2-ad2,x  ;perform subtract
004285  1  08                   php
004286  1  C5 0F                cmp adrl        ;check result
004288  1  D0 FE                trap_ne         ;bad result
00428A  1  68                   pla             ;check flags
00428B  1  29 C3                and #$c3        ;mask NV----ZC
00428D  1  C5 11                cmp adrf
00428F  1  D0 FE                trap_ne         ;bad flags
004291  1  28                   plp
004292  1               ; binary ADC / SBC abs,y
004292  1  08                   php             ;save carry for subtract
004293  1  A5 0D                lda ad1
004295  1  79 04 01             adc ada2-$ff,y  ;perform add
004298  1  08                   php
004299  1  C5 0F                cmp adrl        ;check result
00429B  1  D0 FE                trap_ne         ;bad result
00429D  1  68                   pla             ;check flags
00429E  1  29 C3                and #$c3        ;mask NV----ZC
0042A0  1  C5 11                cmp adrf
0042A2  1  D0 FE                trap_ne         ;bad flags
0042A4  1  28                   plp
0042A5  1  08                   php             ;save carry for next add
0042A6  1  A5 0D                lda ad1
0042A8  1  F9 05 01             sbc sba2-$ff,y  ;perform subtract
0042AB  1  08                   php
0042AC  1  C5 0F                cmp adrl        ;check result
0042AE  1  D0 FE                trap_ne         ;bad result
0042B0  1  68                   pla             ;check flags
0042B1  1  29 C3                and #$c3        ;mask NV----ZC
0042B3  1  C5 11                cmp adrf
0042B5  1  D0 FE                trap_ne         ;bad flags
0042B7  1  28                   plp
0042B8  1               ; binary ADC / SBC (zp,x)
0042B8  1  08                   php             ;save carry for subtract
0042B9  1  A5 0D                lda ad1
0042BB  1  61 46                adc (<adi2-ad2,x) ;perform add
0042BD  1  08                   php
0042BE  1  C5 0F                cmp adrl        ;check result
0042C0  1  D0 FE                trap_ne         ;bad result
0042C2  1  68                   pla             ;check flags
0042C3  1  29 C3                and #$c3        ;mask NV----ZC
0042C5  1  C5 11                cmp adrf
0042C7  1  D0 FE                trap_ne         ;bad flags
0042C9  1  28                   plp
0042CA  1  08                   php             ;save carry for next add
0042CB  1  A5 0D                lda ad1
0042CD  1  E1 48                sbc (<sbi2-ad2,x) ;perform subtract
0042CF  1  08                   php
0042D0  1  C5 0F                cmp adrl        ;check result
0042D2  1  D0 FE                trap_ne         ;bad result
0042D4  1  68                   pla             ;check flags
0042D5  1  29 C3                and #$c3        ;mask NV----ZC
0042D7  1  C5 11                cmp adrf
0042D9  1  D0 FE                trap_ne         ;bad flags
0042DB  1  28                   plp
0042DC  1               ; binary ADC / SBC (abs),y
0042DC  1  08                   php             ;save carry for subtract
0042DD  1  A5 0D                lda ad1
0042DF  1  71 58                adc (adiy2),y   ;perform add
0042E1  1  08                   php
0042E2  1  C5 0F                cmp adrl        ;check result
0042E4  1  D0 FE                trap_ne         ;bad result
0042E6  1  68                   pla             ;check flags
0042E7  1  29 C3                and #$c3        ;mask NV----ZC
0042E9  1  C5 11                cmp adrf
0042EB  1  D0 FE                trap_ne         ;bad flags
0042ED  1  28                   plp
0042EE  1  08                   php             ;save carry for next add
0042EF  1  A5 0D                lda ad1
0042F1  1  F1 5A                sbc (sbiy2),y   ;perform subtract
0042F3  1  08                   php
0042F4  1  C5 0F                cmp adrl        ;check result
0042F6  1  D0 FE                trap_ne         ;bad result
0042F8  1  68                   pla             ;check flags
0042F9  1  29 C3                and #$c3        ;mask NV----ZC
0042FB  1  C5 11                cmp adrf
0042FD  1  D0 FE                trap_ne         ;bad flags
0042FF  1  28                   plp
004300  1  60                   rts
004301  1               
004301  1               ; target for the jump absolute test
004301  1  88                   dey
004302  1  88                   dey
004303  1               test_far:
004303  1  08                   php             ;either SP or Y count will fail, if we do not hit
004304  1  88                   dey
004305  1  88                   dey
004306  1  88                   dey
004307  1  28                   plp
004308  1  B0 FE                trap_cs         ;flags loaded?
00430A  1  70 FE                trap_vs
00430C  1  30 FE                trap_mi
00430E  1  F0 FE                trap_eq
004310  1  C9 46                cmp #'F'        ;registers loaded?
004312  1  D0 FE                trap_ne
004314  1  E0 41                cpx #'A'
004316  1  D0 FE                trap_ne
004318  1  C0 4F                cpy #('R'-3)
00431A  1  D0 FE                trap_ne
00431C  1  48                   pha             ;save a,x
00431D  1  8A                   txa
00431E  1  48                   pha
00431F  1  BA                   tsx
004320  1  E0 FD                cpx #$fd        ;check SP
004322  1  D0 FE                trap_ne
004324  1  68                   pla             ;restore x
004325  1  AA                   tax
004326  1  A9 FF 48 28          set_stat $ff
00432A  1  68                   pla             ;restore a
00432B  1  E8                   inx             ;return registers with modifications
00432C  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
00432E  1  4C 0F 15             jmp far_ret
004331  1               
004331  1               ; target for the jump indirect test
004331  1               ;       .align 2
004331  1                       .if * & 1       ; workaround for problems with .align 2
004331  1  00                       .byte 0     ;
004332  1                       .endif          ;
004332  1               ptr_tst_ind:
004332  1  3B 43                .word   test_ind
004334  1               ptr_ind_ret:
004334  1  64 15                .word   ind_ret
004336  1  4C 36 43             trap            ;runover protection
004339  1  88                   dey
00433A  1  88                   dey
00433B  1               test_ind:
00433B  1  08                   php             ;either SP or Y count will fail, if we do not hit
00433C  1  88                   dey
00433D  1  88                   dey
00433E  1  88                   dey
00433F  1  28                   plp
004340  1  B0 FE                trap_cs         ;flags loaded?
004342  1  70 FE                trap_vs
004344  1  30 FE                trap_mi
004346  1  F0 FE                trap_eq
004348  1  C9 49                cmp #'I'        ;registers loaded?
00434A  1  D0 FE                trap_ne
00434C  1  E0 4E                cpx #'N'
00434E  1  D0 FE                trap_ne
004350  1  C0 41                cpy #('D'-3)
004352  1  D0 FE                trap_ne
004354  1  48                   pha             ;save a,x
004355  1  8A                   txa
004356  1  48                   pha
004357  1  BA                   tsx
004358  1  E0 FD                cpx #$fd        ;check SP
00435A  1  D0 FE                trap_ne
00435C  1  68                   pla             ;restore x
00435D  1  AA                   tax
00435E  1  A9 FF 48 28          set_stat $ff
004362  1  68                   pla             ;restore a
004363  1  E8                   inx             ;return registers with modifications
004364  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
004366  1  6C 34 43             jmp (ptr_ind_ret)
004369  1  4C 69 43             trap            ;runover protection
00436C  1  4C 00 10             jmp start       ;catastrophic error - cannot continue
00436F  1               
00436F  1               ; target for the jump subroutine test
00436F  1  88                   dey
004370  1  88                   dey
004371  1               test_jsr:
004371  1  08                   php             ;either SP or Y count will fail, if we do not hit
004372  1  88                   dey
004373  1  88                   dey
004374  1  88                   dey
004375  1  28                   plp
004376  1  B0 FE                trap_cs         ;flags loaded?
004378  1  70 FE                trap_vs
00437A  1  30 FE                trap_mi
00437C  1  F0 FE                trap_eq
00437E  1  C9 4A                cmp #'J'        ;registers loaded?
004380  1  D0 FE                trap_ne
004382  1  E0 53                cpx #'S'
004384  1  D0 FE                trap_ne
004386  1  C0 4F                cpy #('R'-3)
004388  1  D0 FE                trap_ne
00438A  1  48                   pha             ;save a,x
00438B  1  8A                   txa
00438C  1  48                   pha
00438D  1  BA                   tsx             ;sp -4? (return addr,a,x)
00438E  1  E0 FB                cpx #$fb
004390  1  D0 FE                trap_ne
004392  1  AD FF 01             lda $1ff        ;propper return on stack
004395  1  C9 15                cmp #>jsr_ret
004397  1  D0 FE                trap_ne
004399  1  AD FE 01             lda $1fe
00439C  1  C9 9A                cmp #<jsr_ret
00439E  1  D0 FE                trap_ne
0043A0  1  A9 FF 48 28          set_stat $ff
0043A4  1  68                   pla             ;pull x,a
0043A5  1  AA                   tax
0043A6  1  68                   pla
0043A7  1  E8                   inx             ;return registers with modifications
0043A8  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
0043AA  1  60                   rts
0043AB  1  4C AB 43             trap            ;runover protection
0043AE  1  4C 00 10             jmp start       ;catastrophic error - cannot continue
0043B1  1               
0043B1  1               ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
0043B1  1               nmi_trap:
0043B1  1  4C B1 43             trap            ;check stack for conditions at NMI
0043B4  1  4C 00 10             jmp start       ;catastrophic error - cannot continue
0043B7  1               res_trap:
0043B7  1  4C B7 43             trap            ;unexpected RESET
0043BA  1  4C 00 10             jmp start       ;catastrophic error - cannot continue
0043BD  1               
0043BD  1  88                   dey
0043BE  1  88                   dey
0043BF  1               irq_trap:               ;BRK test or unextpected BRK or IRQ
0043BF  1  08                   php             ;either SP or Y count will fail, if we do not hit
0043C0  1  88                   dey
0043C1  1  88                   dey
0043C2  1  88                   dey
0043C3  1                       ;next traps could be caused by unexpected BRK or IRQ
0043C3  1                       ;check stack for BREAK and originating location
0043C3  1                       ;possible jump/branch into weeds (uninitialized space)
0043C3  1  C9 BD                cmp #$ff-'B'    ;BRK pass 2 registers loaded?
0043C5  1  F0 42                beq break2
0043C7  1  C9 42                cmp #'B'        ;BRK pass 1 registers loaded?
0043C9  1  D0 FE                trap_ne
0043CB  1  E0 52                cpx #'R'
0043CD  1  D0 FE                trap_ne
0043CF  1  C0 48                cpy #'K'-3
0043D1  1  D0 FE                trap_ne
0043D3  1  85 0A                sta irq_a       ;save registers during break test
0043D5  1  86 0B                stx irq_x
0043D7  1  BA                   tsx             ;test break on stack
0043D8  1  BD 02 01             lda $102,x
0043DB  1  C9 30                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
0043DD  1  D0 FE                trap_ne         ; - no break flag on stack
0043DF  1  68                   pla
0043E0  1  C9 34                cmp_flag intdis ;should have added interrupt disable
0043E2  1  D0 FE                trap_ne
0043E4  1  BA                   tsx
0043E5  1  E0 FC                cpx #$fc        ;sp -3? (return addr, flags)
0043E7  1  D0 FE                trap_ne
0043E9  1  AD FF 01             lda $1ff        ;propper return on stack
0043EC  1  C9 15                cmp #>brk_ret0
0043EE  1  D0 FE                trap_ne
0043F0  1  AD FE 01             lda $1fe
0043F3  1  C9 DC                cmp #<brk_ret0
0043F5  1  D0 FE                trap_ne
0043F7  1  A9 FF                load_flag $ff
0043F9  1  48                   pha
0043FA  1  A6 0B                ldx irq_x
0043FC  1  E8                   inx             ;return registers with modifications
0043FD  1  A5 0A                lda irq_a
0043FF  1  49 AA                eor #$aa
004401  1  28                   plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
004402  1  40                   rti
004403  1  4C 03 44             trap            ;runover protection
004406  1  4C 00 10             jmp start       ;catastrophic error - cannot continue
004409  1               
004409  1               break2:                 ;BRK pass 2
004409  1  E0 AD                cpx #$ff-'R'
00440B  1  D0 FE                trap_ne
00440D  1  C0 B1                cpy #$ff-'K'-3
00440F  1  D0 FE                trap_ne
004411  1  85 0A                sta irq_a       ;save registers during break test
004413  1  86 0B                stx irq_x
004415  1  BA                   tsx             ;test break on stack
004416  1  BD 02 01             lda $102,x
004419  1  C9 FF                cmp_flag $ff    ;break test should have B=1
00441B  1  D0 FE                trap_ne         ; - no break flag on stack
00441D  1  68                   pla
00441E  1  09 08                ora #decmode    ;ignore decmode cleared if 65c02
004420  1  C9 FF                cmp_flag $ff    ;actual passed flags
004422  1  D0 FE                trap_ne
004424  1  BA                   tsx
004425  1  E0 FC                cpx #$fc        ;sp -3? (return addr, flags)
004427  1  D0 FE                trap_ne
004429  1  AD FF 01             lda $1ff        ;propper return on stack
00442C  1  C9 16                cmp #>brk_ret1
00442E  1  D0 FE                trap_ne
004430  1  AD FE 01             lda $1fe
004433  1  C9 0B                cmp #<brk_ret1
004435  1  D0 FE                trap_ne
004437  1  A9 04                load_flag intdis
004439  1  48                   pha
00443A  1  A6 0B                ldx irq_x
00443C  1  E8                   inx             ;return registers with modifications
00443D  1  A5 0A                lda irq_a
00443F  1  49 AA                eor #$aa
004441  1  28                   plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
004442  1  40                   rti
004443  1  4C 43 44             trap            ;runover protection
004446  1  4C 00 10             jmp start       ;catastrophic error - cannot continue
004449  1               
004449  1                   .if report = 1
004449  1                       include "report.i65"
004449  1                   .endif
004449  1               
004449  1               ;copy of data to initialize BSS segment
004449  1                   .if load_data_direct <> 1
004449  1               zp_init:
004449  1               zps_:   .byte   $80,1           ;additional shift pattern to test zero result & flag
004449  1               zp1_:   .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
004449  1               zp7f_:  .byte   $7f             ;test pattern for compare
004449  1               ;logical zeropage operands
004449  1               zpOR_:  .byte   0,$1f,$71,$80   ;test pattern for OR
004449  1               zpAN_:  .byte   $0f,$ff,$7f,$80 ;test pattern for AND
004449  1               zpEO_:  .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
004449  1               ;indirect addressing pointers
004449  1               ind1_:  .word   abs1            ;indirect pointer to pattern in absolute memory
004449  1                       .word   abs1+1
004449  1                       .word   abs1+2
004449  1                       .word   abs1+3
004449  1                       .word   abs7f
004449  1               inw1_:  .word   abs1-$f8        ;indirect pointer for wrap-test pattern
004449  1               indt_:  .word   abst            ;indirect pointer to store area in absolute memory
004449  1                       .word   abst+1
004449  1                       .word   abst+2
004449  1                       .word   abst+3
004449  1               inwt_:  .word   abst-$f8        ;indirect pointer for wrap-test store
004449  1               indAN_: .word   absAN           ;indirect pointer to AND pattern in absolute memory
004449  1                       .word   absAN+1
004449  1                       .word   absAN+2
004449  1                       .word   absAN+3
004449  1               indEO_: .word   absEO           ;indirect pointer to EOR pattern in absolute memory
004449  1                       .word   absEO+1
004449  1                       .word   absEO+2
004449  1                       .word   absEO+3
004449  1               indOR_: .word   absOR           ;indirect pointer to OR pattern in absolute memory
004449  1                       .word   absOR+1
004449  1                       .word   absOR+2
004449  1                       .word   absOR+3
004449  1               ;add/subtract indirect pointers
004449  1               adi2_:  .word   ada2            ;indirect pointer to operand 2 in absolute memory
004449  1               sbi2_:  .word   sba2            ;indirect pointer to complemented operand 2 (SBC)
004449  1               adiy2_: .word   ada2-$ff        ;with offset for indirect indexed
004449  1               sbiy2_: .word   sba2-$ff
004449  1               zp_end:
004449  1                   .if (zp_end - zp_init) <> (zp_bss_end - zp_bss)
004449  1                       ;force assembler error if size is different
004449  1                       .error "mismatch between bss and zeropage data"
004449  1                   .endif
004449  1               data_init:
004449  1               ex_and_:and #0              ;execute immediate opcodes
004449  1                       rts
004449  1               ex_eor_:eor #0              ;execute immediate opcodes
004449  1                       rts
004449  1               ex_ora_:ora #0              ;execute immediate opcodes
004449  1                       rts
004449  1               ex_adc_:adc #0              ;execute immediate opcodes
004449  1                       rts
004449  1               ex_sbc_:sbc #0              ;execute immediate opcodes
004449  1                       rts
004449  1               ;zps:   .byte   $80,1           ;additional shift patterns test zero result & flag
004449  1               abs1_:  .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
004449  1               abs7f_: .byte   $7f             ;test pattern for compare
004449  1               ;loads
004449  1               fLDx_:  .byte   fn,fn,0,fz              ;expected flags for load
004449  1               ;shifts
004449  1               rASL_:                                  ;expected result ASL & ROL -carry
004449  1               rROL_:  .byte   0,2,$86,$04,$82,0
004449  1               rROLc_: .byte   1,3,$87,$05,$83,1       ;expected result ROL +carry
004449  1               rLSR_:                                  ;expected result LSR & ROR -carry
004449  1               rROR_:  .byte   $40,0,$61,$41,$20,0
004449  1               rRORc_: .byte   $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
004449  1               fASL_:                                  ;expected flags for shifts
004449  1               fROL_:  .byte   fzc,0,fnc,fc,fn,fz      ;no carry in
004449  1               fROLc_: .byte   fc,0,fnc,fc,fn,0        ;carry in
004449  1               fLSR_:
004449  1               fROR_:  .byte   0,fzc,fc,0,fc,fz        ;no carry in
004449  1               fRORc_: .byte   fn,fnc,fnc,fn,fnc,fn    ;carry in
004449  1               ;increments (decrements)
004449  1               rINC_:  .byte   $7f,$80,$ff,0,1         ;expected result for INC/DEC
004449  1               fINC_:  .byte   0,fn,fn,fz,0            ;expected flags for INC/DEC
004449  1               ;logical memory operand
004449  1               absOR_: .byte   0,$1f,$71,$80           ;test pattern for OR
004449  1               absAN_: .byte   $0f,$ff,$7f,$80         ;test pattern for AND
004449  1               absEO_: .byte   $ff,$0f,$8f,$8f         ;test pattern for EOR
004449  1               ;logical accu operand
004449  1               absORa_:.byte   0,$f1,$1f,0             ;test pattern for OR
004449  1               absANa_:.byte   $f0,$ff,$ff,$ff         ;test pattern for AND
004449  1               absEOa_:.byte   $ff,$f0,$f0,$0f         ;test pattern for EOR
004449  1               ;logical results
004449  1               absrlo_:.byte   0,$ff,$7f,$80
004449  1               absflo_:.byte   fz,fn,0,fn
004449  1               data_end
004449  1                   .if (data_end - data_init) <> (data_bss_end - data_bss)
004449  1                       ;force assembler error if size is different
004449  1                       .error "mismatch between bss and data"
004449  1                   .endif
004449  1               
004449  1               vec_init
004449  1                       .word   nmi_trap
004449  1                       .word   res_trap
004449  1                       .word   irq_trap
004449  1               vec_bss equ $fffa
004449  1                   .endif                   ;end of RAM init data
004449  1               
004449  1                   .if (load_data_direct = 1) & (ROM_vectors = 1)
004449  1                       .segment "VECTORS"
004449  1                       .org $fffa       ;vectors
004449  1                       .word   nmi_trap
004449  1                       .word   res_trap
004449  1                       .word   irq_trap
004449  1                   .endif
004449  1               
